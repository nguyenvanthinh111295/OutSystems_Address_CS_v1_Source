/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Reflection;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration {
    /// <summary>
    /// Class that represents a parameter inside a database configuration.
    /// </summary>
    public class Parameter : IParameter {

        private class Converter {

            private readonly Type t;

            public Converter(Type t) {
                this.t = t;
            }

            public string ToString(object value) {
                if (value is bool) {
                    return value.ToString().ToLowerInvariant();
                } else if (value.GetType().IsEnum) {
                    var enumWithUnderscores = value.ToString();
                    return enumWithUnderscores.Replace('_', ' ');
                }
                return value.ToString();
            }

            public object FromString(string value) {
                if (t.IsEnum) {
                    if (value == string.Empty) {
                        return Enum.GetValues(t).GetValue(0);
                    } else {
                        return Enum.Parse(t, value.Replace(' ', '_'));
                    }
                }
                if (t == typeof(bool)) {
                    return value != string.Empty && Convert.ToBoolean(value);
                } 
                if (t == typeof(string)) {
                    return value;
                } 
                if (t == typeof(int)) {
                    return value == string.Empty ? 0 : Convert.ToInt32(value);
                } 
                throw new InvalidOperationException("Unsuported convertion for type " + t);
            }
        }

        private readonly string name;
        private readonly MethodInfo getter;
        private readonly MethodInfo setter;
        private readonly Converter converter;

        private readonly object config;
        private readonly bool encrypt;
        private readonly bool persist;

        /// <summary>
        /// Creates a new Parameter.
        /// </summary>
        ///
        /// <param name="name">The parameter's name.</param>
        /// <param name="getter">Method to get the value of the parameter.</param>
        /// <param name="setter">Method to set the value of the parameter.</param>
        /// <param name="encrypt">Indicates if the parameter is encrypted.</param>
        /// <param name="persist">Indicates if the parameter should be persisted.</param>
        /// <param name="config">The database configuration.</param>
        public Parameter(string name, MethodInfo getter, MethodInfo setter, bool encrypt, bool persist, object config) {
            this.name = name;
            this.getter = getter;
            this.setter = setter;
            this.config = config;
            this.encrypt = encrypt;
            this.persist = persist;
            converter = new Converter(getter.ReturnType);
        }

        /// <summary>
        /// Gets the parameter's type.
        /// </summary>
        ///
        /// <value>The parameter's type.</value>
        public Type Type { get { return getter.ReturnType; } }

        /// <summary>
        /// Gets the parameter's name.
        /// </summary>
        ///
        /// <value>The parameter's name.</value>
        public string Name { get { return name; } }

        /// <summary>
        /// Sets the parameter with a given value.
        /// </summary>
        ///
        /// <exception cref="ConfigurationReflectionException">Thrown when a reflection error related to configuration code occurs.</exception>
        ///
        /// <param name="stringifiedValue">The value as a string to be set as a parameter's value.</param>
        public void Set(string stringifiedValue) {
            try {
                var value = converter.FromString(stringifiedValue);
                setter.Invoke(config, new[] { value });
            } catch (Exception e) {
                throw new ConfigurationReflectionException(e);
            }
        }

        /// <summary>
        /// Gets the parameter's value.
        /// </summary>
        ///
        /// <exception cref="ConfigurationReflectionException">Thrown when a reflection error related to configuration code occurs.</exception>
        ///
        /// <returns>A string representing the value. An empty string is returned if the parameter's value is null.</returns>
        public string Get() {
            try {
                var value = getter.Invoke(config, (object[])null);
                return converter.ToString(value ?? "");
            } catch (Exception e) {
                throw new ConfigurationReflectionException(e);
            }
        }


        /// <summary>
        /// This property indicates whether this object is read-only.
        /// </summary>
        /// <value>True if this object is read-only, false if not.</value>
        public bool ReadOnly { get { return setter == null; } }


        public bool Encrypt {
            get { return encrypt; }
        }

        public bool Persist {
            get { return persist; }
        }
    }
}
