/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Net;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;

namespace OutSystems.HubEdition.Extensibility.Data.Platform.Configuration {
    public abstract class BasePlatformDatabaseConfiguration : IPlatformDatabaseConfiguration, ISuggestionableConfiguration {

        /// <summary>
        /// Gets the database provider. It provides information about the database,
        /// and access to its services.
        /// </summary>
        public abstract IPlatformDatabaseProvider PlatformDatabaseProvider { get; }

        public bool ImplementsElevatedPrivilegesOperations {
            get { return this is IElevatedUserConfiguration; }
        }

        public virtual bool RequiresElevatedPrivileges {
            get { return this is IElevatedUserConfiguration; }
        }

        public abstract AuthenticationType AuthenticationMode { get; }

        public abstract IRuntimeDatabaseConfiguration RuntimeDatabaseConfiguration(Source source, User userType);

        public abstract bool Equals(IPlatformDatabaseConfiguration other);

        public ISuggestor UserNameSuggestor {
            get;
            set;
        }

        public ISuggestor TableSpaceSuggestor {
            get;
            set;
        }

        private string adminUser = null;
        private string runtimeUser = null;
        private string logUser = null;

        #region Admin

        [UserDefinedConfigurationParameter(Label = "User", IsMandatory = true, Order = 1, Region = ParameterRegion.UserAdminSpecific , Prompt = "Admin username")]
        public virtual string AdminUser {
            get {
                return adminUser ?? "OSADMIN";
            }
            set {
                adminUser = value;
                UserNameSuggestor = NameSuggestorFactory.NewSuggestor(true, adminUser, "ADMIN");
            }
        }

        [UserDefinedConfigurationParameter(Label = "Password", IsPassword = true, IsMandatory = true, Order = 2, Region = ParameterRegion.UserAdminSpecific, Prompt = "Admin password", Encrypt=true)]
        public virtual string AdminPassword { get; set; }

        public NetworkCredential AdminAuthenticationCredential {
            get {
                return new NetworkCredential(AdminUser, AdminPassword);
            }
        }

        #endregion

        #region Runtime

        [UserDefinedConfigurationParameter(Label = "User", IsMandatory = true, Order = 1, Region = ParameterRegion.UserRuntimeSpecific, Prompt = "Runtime username")]
        public virtual string RuntimeUser {
            get {
                if (runtimeUser == null && UserNameSuggestor != null) {
                    return UserNameSuggestor.GetSuggestion("RUNTIME", "OSRUNTIME");
                }
                return runtimeUser ?? "OSRUNTIME";
            }
            set {
                runtimeUser = value;
            }
        }

        [UserDefinedConfigurationParameter(Label = "Password", IsPassword = true, IsMandatory = true, Order = 2, Region = ParameterRegion.UserRuntimeSpecific, Prompt = "Runtime password", Encrypt=true)]
        public virtual string RuntimePassword { get; set; }

        public NetworkCredential RuntimeAuthenticationCredential {
            get {
                return new NetworkCredential(RuntimeUser, RuntimePassword);
            }
        }

        #endregion

        #region Log

        [UserDefinedConfigurationParameter(Label = "User", IsMandatory = true, Order = 1, Region = ParameterRegion.UserLogSpecific, Prompt = "Log username")]
        public virtual string LogUser {
            get {
                if (logUser == null && UserNameSuggestor != null) {
                    return UserNameSuggestor.GetSuggestion("LOG", "OSLOG");
                }
                return logUser ?? "OSLOG";
            }
            set {
                logUser = value;
            }
        }

        [UserDefinedConfigurationParameter(Label = "Password", IsPassword = true, IsMandatory = true, Order = 2, Region = ParameterRegion.UserLogSpecific, Prompt = "Log password", Encrypt=true)]
        public virtual string LogPassword { get; set; }

        public NetworkCredential LogAuthenticationCredential {
            get {
                return new NetworkCredential(LogUser, LogPassword);
            }
        }

        #endregion

        #region Database Advanced Settings

        [UserDefinedConfigurationParameter(Label = "Runtime Applications", Order = 1, Region = ParameterRegion.Advanced, Prompt = "Runtime TNS name")]
        public virtual string RuntimeAdvancedSettings { get; set; }

        [UserDefinedConfigurationParameter(Label = "OutSystems Services", Order = 2, Region = ParameterRegion.Advanced, Example = "Max Pool Size= 100; Connection Timeout = 15;", Prompt = "Services TNS name")]
        public virtual string ServicesAdvancedSettings { get; set; }

        #endregion

#if JAVA
        [ConfigurationParameter]
#endif
        public bool AdvancedConfigurationMode {
            get;
            set;
        }

        public virtual string ContextualHelpForAdvancedMode {
            get {
                return "";
            }
        }

        public virtual string ContextualHelpForBasicMode {
            get {
                return "";
            }
        }
    }
}
