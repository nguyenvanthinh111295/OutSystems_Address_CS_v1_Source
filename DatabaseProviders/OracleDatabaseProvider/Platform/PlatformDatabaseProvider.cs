/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.DatabaseProvider.Oracle.ConfigurationService;
using OutSystems.HubEdition.DatabaseProvider.Oracle.Platform.Configuration;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.Platform {

    public class PlatformDatabaseProvider : DatabaseProvider, IPlatformDatabaseProvider {

        private readonly IPlatformProviderProperties properties;
        
        public static readonly new IPlatformDatabaseProvider Instance = new PlatformDatabaseProvider();
        
        public PlatformDatabaseProvider() {
            properties = new PlatformProviderProperties(this);
        }

        public new IPlatformProviderProperties Properties {
            get { return properties; }
        }

        public IRuntimeDatabaseConfiguration CreateEmptyRuntimeDatabaseConfiguration() {
            return new RuntimeDatabaseConfiguration(Instance);
        }

        public IPlatformDatabaseServices GetPlatformDatabaseServices(IRuntimeDatabaseConfiguration databaseConfiguration) {
            return new PlatformDatabaseServices(databaseConfiguration);
        }

        public override IDatabaseServices GetIntegrationDatabaseServices(IRuntimeDatabaseConfiguration databaseConfiguration) {
            return new PlatformDatabaseServices(databaseConfiguration);
        }

        public IPlatformDatabaseConfiguration CreateEmptyPlatformDatabaseConfiguration() {
            return new PlatformDatabaseConfiguration();
        }

        public IPlatformConfigurationManager GetConfigurationManager(IPlatformDatabaseConfiguration uiConfiguration){
            return new PlatformConfigurationManager(uiConfiguration);
        }

        public ISessionConfigurationManager GetConfigurationManager(ISessionDatabaseConfiguration uiConfiguration, IPlatformDatabaseConfiguration platformConfiguration) {
            return new SessionConfigurationManager(uiConfiguration);
        }

        public ISessionDatabaseConfiguration CreateEmptySessionDatabaseConfiguration() {
            return new SessionDatabaseConfiguration();
        }
    }
}