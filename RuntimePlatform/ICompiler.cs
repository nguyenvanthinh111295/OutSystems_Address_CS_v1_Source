/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.ObfuscationProperties;

namespace OutSystems.HubEdition {

    [Obsolete]
    public enum ApplicationServerKind { IIS, JBoss, Unknown }

    public enum ApplicationServerStack { Unknown, Net, Java }

    public enum DeployPhase {
        Espace_Publish,

        Solution_ImpactAnalysis,
        Solution_UpdateMetamodel,
        Solution_CompileOmlWithEmptyProxies,
        Solution_CompileOmlProxies,
        Solution_UpdateSchema_Phase1,
        Solution_UpdateSchema_Phase2,
    };

    [DoNotObfuscateType]
    public interface ICompiler {

        HEMessage SubscribeNode(bool activate, string strHostName, string ip_Addr, byte[] hash, bool is32Bit, string machineSerial);

        HEMessage SubscribeNode(bool activate, string strHostName, byte[] hash, bool is32Bit, string machineSerial);

        HEMessage UnSubscribeNode(string strHostName);
        HEMessageArrayList GetCompilerResult(ICompilerContext context, string componentName, int componentId, bool isExtension, string testAreaName, int timeout);
        HEMessageArrayList ImpactAnalysis(ICompilerContext context, byte[] ssOML, string espaceName, int espaceVersionId, string username);
        HEMessageArrayList ImpactAnalysisAsync(ICompilerContext context, byte[] ssOML, string espaceName, int espaceVersionId, string uniqueId, string username);
        HEMessageArrayList UpdateEspaceMetamodel(ICompilerContext context, string espaceName, int espaceVersionId, bool debugMode, bool skipConsistencyMessages, bool forceNewTables, string uniqueId, string username);
        HEMessageArrayList CompileOmlWithEmptyProxies(ICompilerContext context, string espaceName, int espaceVersionId, bool debugMode, ICompilerReference[] producers, bool withoutImpactAnalysis, string uniqueId, string username, bool ssForceFirstLoad, bool ssAllowSkipCompilation);
        HEMessageArrayList CompileOmlProxies(ICompilerContext context, string espaceName, int espaceVersionId, bool debugMode, ICompilerReference[] producers, string uniqueId, string username);
        HEMessageArrayList CompileOmlImpactAnalysisOnlyWithScripts(ICompilerContext context, string espaceName, int espaceVersionId, ICompilerReference[] producers, bool debugMode, string uniqueId, string username);
        HEMessageArrayList PullEspaceProducers(ICompilerContext context, string espaceName, int espaceVersionId, bool debugMode, ICompilerReference[] producers, string uniqueId, string username);
        HEMessageArrayList CompileOmlAsync(ICompilerContext context, byte[] oml, bool debugMode, string espaceName, int espaceVersionId, string username, bool forceDontReuseTables, string uniqueId, bool fromSS);
        HEMessageArrayList CompileOmlAsync(ICompilerContext context, byte[] oml, bool debugMode, string espaceName, int espaceVersionId, string username, bool forceDontReuseTables, string uniqueId, bool fromSS, Dictionary<string, string> settingsOverride);
        HEMessageArrayList CompileOml(ICompilerContext context, bool debugMode, string espaceName, int espaceVersionId, string username, string uniqueId);
        HEMessageArrayList CompileOml(ICompilerContext context, byte[] oml, bool debugMode, string espaceName, int espaceVersionId, string username, bool forceNewTables, string uniqueId);
        HEMessageArrayList CompileOml(ICompilerContext context, byte[] oml, bool debugMode, string espaceName, int espaceVersionId, string username, bool forceNewTables, string uniqueId, Dictionary<string, string> settingsOverride);
        HEMessageArrayList CompileOmlPartial(ICompilerContext context, byte[] oml, bool debugMode, string espaceName, int espaceVersionId, string username, string uniqueId);
        bool CanUseExistingPartialOml(ICompilerContext context, string espaceName, string testAreaName, string uniqueId);

        HEMessageArrayList PrepareDeployEspace(ICompilerContext context, string name, int versionId, string username, bool partial, ICompilerReference[] deployPack, string uniqueId, bool fromSS);

        HEMessageArrayList PrepareEspaceCompilationWorkspace(ICompilerContext context, string eSpaceName, int versionId, string uniqueId);

        HEMessageArrayList DeleteEspaceCompilationWorkspace(ICompilerContext context, string eSpaceName, string uniqueId);

        ICompilerDeployResponse DeployEspaceFirstPart(ICompilerContext context, string name, string username, bool forRedeployOnly, bool partial, int espaceVersionId, string uniqueId, bool fromSS);

        HEMessageArrayList DeployEspaceUpdateDB(ICompilerContext context, string eSpaceName, int eSpaceVersionId, string uniqueId, string username, DeployPhase phase);

        HEMessageArrayList SolutionUpdateDBSecondStage(ICompilerContext context, ICompilerReference[] modules, string uniqueId, string username, bool continueOnError);

        ICompilerBoolOutput DeployEspaceHasUpdateDBScripts(ICompilerContext context, string eSpaceName, DeployPhase phase, string uniqueId);

        [Obsolete("deprecated on 8.0.0.0 used for backward compatibility during upgrades")]
        ICompilerDeployResponse DeployEspaceChangeVdir(ICompilerContext context, string espaceName, int espaceVersionId, string userName, string uniqueId);

        ICompilerDeployResponse DeployEspaceChangeVdir(ICompilerContext context, string espaceName, bool forRedeployOnly, int espaceVersionId, string userName, bool partial, string uniqueId, bool fromSS);

        HEMessageArrayList CheckConsumerReferences(ICompilerContext context, int producerVersionId, string producerKey, string producerKind);

        ICompilerDeployStartApplicationResponse DeployEspaceStartApplication(ICompilerContext context, string eSpaceName, int eSpaceVersionId, string userName, string uniqueId);

        HEMessageArrayList DeployAbort(ICompilerContext context, string eSpaceName, string userName, string uniqueId);

        ICompilerIntOutput CreateTenant(ICompilerContext context, string espaceName, string tenantName, string username);

        HEMessageArrayList UpdateTenantViews(ICompilerContext context, int espaceId, int tenantId);

        HEMessageArrayList TenantInvalidateCache(ICompilerContext context, int tenantId);

        [Obsolete("Deprecated on 7.0.0.0 used for backward compatibility during upgrades")]
        HEMessageArrayList EspaceInvalidateCache(ICompilerContext context, int espaceId);
        HEMessageArrayList EspaceInvalidateCache(ICompilerContext context, int espaceId, int tenantId);

        HEMessageArrayList TouchWebConfig(ICompilerContext context, string eSpaceName);

        HEMessageArrayList InvalidatePhysNbrCache(ICompilerContext context, string physicalNbr);

        ICompilerByteArrayOutput GetDBUpgradeScript(ICompilerContext context, string espaceName, string userName, string uniqueId);
        ICompilerBoolOutput CheckMatchingTables(ICompilerContext context, string eSpaceName, int eSpaceVersion, string uniqueId, string username);
        HEMessageArrayList CheckMatchingTablesAsync(ICompilerContext context, string eSpaceName, int eSpaceVersion, string uniqueId, string username);
        HEMessageArrayList VerifyOmlInServiceStudioAsync(ICompilerContext context, string espaceName, int espaceVersionId, byte[] eSpaceOML, int userId, bool saveNewVersion, bool queueRequest, bool refreshReferences);
        HEMessageArrayList VerifyXifInIntegrationStudioAsync(ICompilerContext context, string extensionName, int extensionVersionId, byte[] extensionXIF, int developerId, bool saveNewVersion, bool queueRequest);

        ICompilerEspaceFilesOutput GetEspaceFiles(ICompilerContext context, string espaceName, DateTime timeStamp, string testAreaName, string uniqueId, bool fromCompilerService);

        HEMessageArrayList BroadcastDeployPartial(ICompilerContext context, object msgobject);

        HEMessageArrayList PushProducer(ICompilerContext context, string producerName, string consumerName, string testAreaName, string uniqueId);
        HEMessageArrayList CleanCodeCompileOml(ICompilerContext context, string espaceName, int espaceVersionId, ICompilerReference[] producers, string uniqueId, string username);
        HEMessageArrayList CleanCodePackOml(ICompilerContext context, string espaceName, string uniqueId, string username);
        ICompilerByteArrayOutput CleanCodeGetOmlPack(ICompilerContext context, string espaceName, string uniqueId);

        HEMessageArrayList BroadcastRefreshEspaceZone(ICompilerContext context, object msgobject);
        void BroadcastUndeployEspace(ICompilerContext context, object msgobject);

        UploadExtensionOutput UploadExtension(ICompilerContext context, byte[] xif, bool smashRunningVersion, int developerId, string commitMessage);

        PublishExtensionOutput PublishExtension(ICompilerContext context, int extensionVersionId, int developerId, bool switchPublishedVersion, bool fromSolutionPublish);

        PublishExtensionOutput PublishExtension_SwitchPublishedVersion(ICompilerContext context, int extensionVersionId, int developerId, bool fromSolutionPublish);

        EspaceFileListOutput GetEspaceFileList(ICompilerContext context, string espaceName, DateTime timeStamp, string testAreaName,
            string uniqueId, bool fromCompilerService);

        HEMessageArrayList RefreshISAPIState(ICompilerContext context, string command);

        bool SyncSandboxes();

        ICompilerTestQueryOutput TestQuery(ICompilerContext context, byte[] oml, int espaceId, string espaceName, int tenantId, string queryCompoundKey, int maxRecords);

        ICompilerTestActionOutput TestAction(ICompilerContext context, string eSpaceName, string ptaName, string action, string[] parameters);

        ICompilerCatalogTestOutput DBCatalogTestConnection(string CatalogName, string RuntimeUser, string CatalogAdminUser, string CatalogAdminPassword, string Tablespace);

        string CatalogCleanup(string CatalogName, string RuntimeUser, string tableName, int lastIndex, string CatalogAdminUser, string CatalogAdminPassword);
        ICompilerBoolOutput SwitchEspacePublishedVersion(ICompilerContext context, string espaceName, int eSpaceVersionId, string uniqueId, bool fromSolutionPublish);

        ICompilerVersionOutput GetIntegrationStudioVersion();
        ICompilerVersionOutput GetServiceStudioVersion();
        Version GetControllerBinariesVersion();

        CompilerPoolFilesOutput GetFilesFromPool(ICompilerContext context, PoolFile[] files);

        void SetEspacePendingVersion(ICompilerContext context, string eSpaceKey, int pendingVersionId, string pendingName);

        void ChangeEspaceName(ICompilerContext context, string eSpaceKey, string newName);

        int CreateNewESpace(ICompilerContext context, string name, bool isMultiTenant, string eSpaceKey, string runtimeKind);

        DeleteModuleOutput DeleteModule(ICompilerContext context, int moduleId, bool isEspace);

        string ProbeSecretKey(string cipheredNumber);

        IEnumerable<IntegrationPluginInfo> GetAvailableIntegrations();

        void DropInactiveEntitiesForeignKeys(ICompilerContext context, int espaceId);

        void DropEntityTable(ICompilerContext context, int entityId);

        void DropAttributeColumn(ICompilerContext context, int attributeId);

        ICompilerByteArrayOutput GetApplicationResourcesZip(ICompilerContext context, string applicationKey, string eSpaceKey);
        ICompilerByteArrayOutput GetApplicationInfoZip(ICompilerContext context, string applicationKey, string eSpaceKey);

        ICompilerByteArrayOutput GetEspaceResource(ICompilerContext context, int EspaceVersionId, string resourceName);

        HEMessageArrayList PublishOmlAsync(ICompilerContext context, byte[] oml, string publishId, int eSpaceId, int eSpaceVersionId, int catalogId, string eSpaceKey, string eSpaceName, string userProviderKey, bool inDebugMode, bool abortOnNewBrokenReferences, List<string> lastCheckedBrokenReferences, string fromUsername, string usernameWS, string encryptedPasswordWS, bool fromIDE, Dictionary<string, string> compilerSettingsOverride);

    }

    [Serializable()]
    public class PoolFile {
        public byte[] CompressedContents;
        public string Name;
        public Guid Version;
        public string RelativePath;
    }

    //ICompler output class to receive versions informationof IS and SS 
    [Serializable()]
    public class ICompilerVersionOutput {
        public string version;
        public string lastUpgradeVersion;
        public string error;
    }

    [Serializable()]
    public class ICompilerCatalogTestOutput {
        public string errorMessage;
        public string tableName;
        public int lastIndex;
    }

    // ICompiler output class to receive HEMessageArrayList and byte[]
    [Serializable()]
    public class ICompilerTestActionOutput {
        public string Return;
        public string OutResult;
        public string OutException;
    }

    [Serializable()]
    public class ICompilerTestQueryOutput {
        public string ResultCode;
        public string QueryResult;
        public string ErrorText;
        public string ExecutedSQL;
        public string AdvancedSQL;
    }

    // ICompiler output class to receive HEMessageArrayList and byte[]
    [Serializable()]
    public class ICompilerBoolOutput {
        public HEMessageArrayList HEMessage = new HEMessageArrayList();
        public bool BoolValue;
    }

    // ICompiler output class to receive HEMessageArrayList and byte[]
    [Serializable()]
    public class ICompilerByteArrayOutput {
        public HEMessageArrayList HEMessage = new HEMessageArrayList();
        public byte[] ByteArrayValue;
    }

    // ICompiler output class to receive HEMessageArrayList and int
    [Serializable()]
    public class ICompilerIntOutput {
        public HEMessageArrayList HEMessage = new HEMessageArrayList();
        public int IntValue;
    }

    // ICompiler output class to receive espace files output
    [Serializable()]
    public class ICompilerEspaceFilesOutput {
        public byte[] ZipContents;
        public DateTime ZipTimestamp;
        public PoolFile[] SharedFiles;
    }

    [Serializable()]
    public class ICompilerDeployResponse {
        public HEMessageArrayList HEMessage = new HEMessageArrayList();
        public bool FailedAllServers;
    }

    [Serializable()]
    public class ICompilerDeployStartApplicationResponse {
        public HEMessageArrayList HEMessage = new HEMessageArrayList();
        public bool FailedAllServers;
    }

    [Serializable()]
    public class ICompilerActivationResponse {
        public string Answer;
        public HEMessage Message;
        public string HMAC;
    }

    [Serializable()]
    public class ICompilerReference {
        public string Name;
        public ObjectKey Key;
        // "eSpace" or "Extension"
        public string Kind;
        public int VersionId;
        public int ComponentId;
    }

    [Serializable()]
    public class ICompilerResult {
        public string Key;
        public string Name;
        public int VersionId;
        public string HubServerVersion;
        public string LastUpgradeVersion;
        public long CompilerTimestamp;
        public string ThirdPartyLibsTimestamps;
    }

    [Serializable()]
    public class ICompilerContext {
        public bool SandboxMode;
        public string SandboxKey;

        public ICompilerContext() {
        }

        public ICompilerContext(bool sandboxMode, string sandboxKey) {
            SandboxMode = sandboxMode;
            SandboxKey = sandboxKey;
        }
    }

    [Serializable]
    public class UploadExtensionOutput {
        public bool Result { get; set; }
        public int ExtensionId { get; set; }
        public int ExtensionVersionId { get; set; }
        public HEMessage Message { get; set; }
    }

    [Serializable]
    public class PublishExtensionOutput {
        public bool Result { get; set; }
        public string ExtensionName { get; set; }
        public HEMessageArrayList Messages { get; set; }
    }

    [Serializable()]
    public class CompilerPoolFilesOutput {
        public HEMessageArrayList HEMessages = new HEMessageArrayList();
        public PoolFile[] Files;
    }

    [Serializable()]
    public class EspaceFileListOutput {
        public XCopyFileInfo FileInfo;
        public PoolFile[] SharedFiles;
    }

    [Serializable]
    public class DeleteModuleOutput {
        public string OriginalName { get; set; }
        public string OriginalKey { get; set; }
    }

    [Serializable]
    public class IntegrationPluginInfo {
        public string Name { get; set; }
        public string Key { get; set; }
        public bool IsExpose { get; set; }
    }
}
