/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using OutSystems.Extensibility;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform {
    public class ConfigurationsImpl : Configurations {

        private Transaction trans = null;

        public static readonly ConfigurationsImpl Instance = new ConfigurationsImpl();

        public void UseTransaction(Transaction trans) {
            this.trans = trans;   
        }

        public void RemoveTransaction() {
            this.trans = null;
        }

        private ConfigurationsImpl() {
        }

        protected override string RealGet(ConfigurationParameter setting) {
            // If decryption is required, it will be performed by Settings
            return Settings.Get(setting.GetUniqueName(), setting.IsNodeConfiguration(), setting.IsEncryptedConfiguration(), null, /*skipCache*/false);
        }

        protected override void RealPut(ConfigurationParameter setting, string value) {
            // If encryption is required, it will be performed by Settings
            if (trans == null) {
                Settings.SetPersistent(setting.GetUniqueName(), value, setting.IsNodeConfiguration(), setting.IsEncryptedConfiguration());
            } else {
                Settings.SetPersistent(trans, setting.GetUniqueName(), value, setting.IsNodeConfiguration(), setting.IsEncryptedConfiguration());
            }
        }
    }
}
