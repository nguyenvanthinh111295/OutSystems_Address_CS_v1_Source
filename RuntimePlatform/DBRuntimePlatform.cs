/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Linq;
using System.Runtime.CompilerServices;
using OutSystems.HubEdition.Extensibility.Data.DMLService;
using OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders;
using OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.SMS;
using OutSystems.Internal.RuntimePlatform;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.ObfuscationProperties;
using System.Collections.Generic;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime.Authentication;

namespace OutSystems.HubEdition.RuntimePlatform {

    [DoNotObfuscateType]
    public partial class DBRuntimePlatform : BaseQueryProvider<DBRuntimePlatform, DBRuntimePlatform.Qualifier>, IDBMobileLogin {

        public class Qualifier : IQueryProviderQualifier {
            public IDatabaseProvider DatabaseProvider {
                get { return DatabaseAccess.ForSystemDatabase.DatabaseServices.DatabaseConfiguration.DatabaseProvider; }
            }

            public Type[] ProviderSpecificTypes {
                get { return new[] { typeof(DBRuntimePlatformSqlServer), typeof(DBRuntimePlatformOracle), typeof(DBRuntimePlatformMySQL) }; }
            }
        }

        // NOTE: this works as an alias and is not required, but it makes access to the singleton much easier in Java
        public new static DBRuntimePlatform Instance {
            get { return BaseQueryProvider<DBRuntimePlatform, Qualifier>.Instance; }
        }

        #region Database related

        //Query MUST end with a Insert and not ";" terminated to use this method
        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Utility method already tested by other methods")]
        public virtual int ExecuteNonQueryGetIdentity(Command cmd, string idColumnName) {
            throw new NotImplementedException(GetNotImplementedMessage());
        }

        protected virtual string GetNoCountSQL(string sql, bool setOn) {
            return sql;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public DateTime GetDbDatetime(Transaction tran, bool skipLog) {
            Command cmd = tran.CreateCommand("SELECT GETDATE() FROM DUAL");
            return (DateTime)cmd.ExecuteScalar(skipLog);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public DateTime GetDbDatetime(Transaction tran) {
            return GetDbDatetime(tran, false);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        protected virtual string GetNextRunSql(IDMLService dmlService) {
            return "GETDATE()";
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public virtual void GetDatabaseProviderAndVersion(out string database, out string version) {
            throw new InvalidOperationException("This must be implemented in subclasses");
        }

        #endregion

        #region Users and Roles

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal void DeletePersistentLoginForUser(Transaction tran, int userId, string operationName) {
            Command cmd = tran.CreateCommand("DELETE FROM OSSYS_PERSISTENT_LOGIN WHERE USER_ID = @USER_ID");
            cmd.CreateParameter("@USER_ID", DbType.Int32, userId);
            cmd.ExecuteNonQuery(String.Format("{0} operation (invalidate persistency info for user)", operationName), true);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool MobileLoginIsValidAt(Transaction tran, string loginId, long currentDate) {

            using (var cmd = tran.CreateCommand("SELECT 1 FROM OSSYS_LOGIN WHERE EXPIRATION_DATE > @CURRENT_DATE AND LOGIN_ID = @LOGIN_ID")) {
                cmd.CreateParameter("@CURRENT_DATE", DbType.Int64, currentDate);
                cmd.CreateParameter("@LOGIN_ID", DbType.String, loginId);

                using (var reader = cmd.ExecuteReader()) {
                    if (!reader.Read()) {
                        return false;
                    }
                    return true;
                }
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void MobileLoginExtendExpirationDateUntil(Transaction trans, string loginId, long untilUnixTimestamp) {

            using (var cmd = trans.CreateCommand("UPDATE OSSYS_LOGIN SET EXPIRATION_DATE = @UNTIL WHERE LOGIN_ID = @LOGIN_ID")) {
                cmd.CreateParameter("@UNTIL", DbType.Int64, untilUnixTimestamp);
                cmd.CreateParameter("@LOGIN_ID", DbType.String, loginId);
                cmd.ExecuteNonQuery();
                trans.Commit();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader MobileLoginGet(Transaction trans, string loginId) {
            var cmd = trans.CreateCommand("SELECT USER_ID, TENANT_ID, EXPIRATION_DATE, IS_PERSISTENT FROM OSSYS_LOGIN WHERE LOGIN_ID = @LOGIN_ID");
            cmd.CreateParameter("@LOGIN_ID", DbType.String, loginId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, "1", "1", TestSyntaxValues.AUTO, TestSyntaxValues.AUTO })]
        public void MobileLoginInsert(Transaction trans, string loginId, int userId, int tenantId, long expirationDate, bool isPersistent) {
            using (var cmd = trans.CreateCommand("INSERT INTO OSSYS_LOGIN (LOGIN_ID, USER_ID, TENANT_ID, EXPIRATION_DATE, IS_PERSISTENT) VALUES (@LOGIN_ID, @USER_ID, @TENANT_ID, @UNTIL, @IS_PERSISTENT)")) {
                cmd.CreateParameter("@LOGIN_ID", DbType.String, loginId);
                cmd.CreateParameter("@USER_ID", DbType.Int32, userId);
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, tenantId);
                cmd.CreateParameter("@UNTIL", DbType.Int64, expirationDate);
                cmd.CreateParameter("@IS_PERSISTENT", DbType.Boolean, isPersistent);
                cmd.ExecuteNonQuery();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void MobileLoginDeleteByLoginId(Transaction trans, string loginId) {
            using (var cmd = trans.CreateCommand("DELETE FROM OSSYS_LOGIN WHERE LOGIN_ID = @LOGIN_ID")) {
                cmd.CreateParameter("@LOGIN_ID", DbType.String, loginId);
                cmd.ExecuteNonQuery("Logout operation", true);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void MobileLoginDeleteByUser(Transaction trans, int userId) {
            using (var cmd = trans.CreateCommand("DELETE FROM OSSYS_LOGIN WHERE USER_ID = @USER_ID")) {
                cmd.CreateParameter("@USER_ID", DbType.Int32, userId);
                cmd.ExecuteNonQuery("Logout operation", true);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal void DeletePersistentLoginEntry(Transaction tran, int persistentLoginId, string operationName) {
            Command sqlCmd = tran.CreateCommand("DELETE FROM OSSYS_PERSISTENT_LOGIN WHERE ID = @ID");
            sqlCmd.CreateParameter("@ID", DbType.Int32, persistentLoginId);
            sqlCmd.ExecuteNonQuery(String.Format("{0} operation (invalidate persistency info)", operationName), true);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "0", TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, "TestSyntax" },
                          Values2 = new[] { TestSyntaxValues.AUTO, "1", TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, "TestSyntax" })]
        internal void AddOrUpdatePersistentLoginEntry(Transaction tran, int persistentLoginId, int tenantId, int userId, string secret, DateTime expirationDateTime, string terminalType, string operationName) {

            Command sqlCmd;

            if (persistentLoginId == 0) {
                sqlCmd = tran.CreateCommand(
                    "INSERT INTO OSSYS_PERSISTENT_LOGIN " +
                        "(TENANT_ID, SECRET, EXPIRES, USER_ID, TERMINAL_TYPE) VALUES (@TENANT_ID, @SECRET, @EXPIRES, @USER_ID, @TERMINAL_TYPE)");

            } else { // Optimization to reuse the id when updating the secret and prevent updates from changing the tenant id, user id or terminal type
                sqlCmd = tran.CreateCommand(
                    "UPDATE OSSYS_PERSISTENT_LOGIN " +
                        "SET SECRET = @SECRET, EXPIRES = @EXPIRES " +
                        "WHERE ID=@ID AND TENANT_ID = @TENANT_ID AND USER_ID = @USER_ID AND TERMINAL_TYPE = @TERMINAL_TYPE");
                sqlCmd.CreateParameter("@ID", DbType.Int32, persistentLoginId);
            }

            sqlCmd.CreateParameter("@TENANT_ID", DbType.Int32, tenantId);
            sqlCmd.CreateParameter("@SECRET", DbType.String, secret);
            sqlCmd.CreateParameter("@USER_ID", userId);
            sqlCmd.CreateParameter("@EXPIRES", DbType.DateTime, expirationDateTime);
            sqlCmd.CreateParameter("@TERMINAL_TYPE", DbType.String, terminalType);

            sqlCmd.ExecuteNonQuery(String.Format("{0} operation (insert persistency info)", operationName), true);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal void GetPersistentLoginInfo(Transaction tran, int espaceId, string persistentLoginValue, string terminalType, out int userId, out int tenantId, out int existingPersistentLoginId, out DateTime expires, string operationName) {
            userId = 0;
            tenantId = 0;
            existingPersistentLoginId = 0;
            expires = default(DateTime);


            // TODO jmr This method should probably not join with OSSYS_ESPACE_TENANT to increase the performance, the "valid tenant" check could be done later in the GetUserInfoForLogin
            // To do this change it's necessary more research in the performance impact of it in environments with a high number of tenants and persistent login entries
            Command sqlCmd = tran.CreateCommand(
                "SELECT P.ID, P.EXPIRES, USER_ID, T.TENANT_ID FROM OSSYS_PERSISTENT_LOGIN P " +
                "JOIN OSSYS_ESPACE_TENANT T ON T.TENANT_ID=P.TENANT_ID " +
                "WHERE T.ESPACE_ID = @ESPACE_ID AND EXPIRES > GETDATE() AND TERMINAL_TYPE = @TERMINAL_TYPE AND SECRET = @SECRET");

            sqlCmd.CreateParameter("@ESPACE_ID", DbType.Int32, espaceId);
            sqlCmd.CreateParameter("@TERMINAL_TYPE", DbType.String, terminalType);
            sqlCmd.CreateParameter("@SECRET", DbType.String, persistentLoginValue);

            using (IDataReader reader = sqlCmd.ExecuteReader(String.Format("{0} operation (load user id)", operationName), true)) {
                if (reader.Read()) {
                    userId = reader.SafeGet<int>("USER_ID");
                    tenantId = reader.SafeGet<int>("TENANT_ID");
                    existingPersistentLoginId = reader.SafeGet<int>("ID");
                    expires = reader.SafeGet<DateTime>("EXPIRES");
                }
            }
        }


        [MethodImpl(MethodImplOptions.NoInlining)]
        public object GetNumUsersWithId(Transaction tran, int userId) {
            Command cmd = tran.CreateCommand("SELECT COUNT(*) FROM OSSYS_USER WHERE ID=@USERID");
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            return cmd.ExecuteScalar();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetAllUserRoles(Transaction tran, int userId, int tenantId) {
            Command cmd = tran.CreateCommand(
                "SELECT P.ID, P.SS_KEY, E.SS_KEY " +
                "FROM OSSYS_ROLE P JOIN OSSYS_USER_ROLE UP ON P.ID = UP.ROLE_ID " +
                "JOIN OSSYS_ESPACE E ON P.ESPACE_ID = E.ID " +
                "WHERE UP.USER_ID = @USERID " +
                "AND UP.TENANT_ID=@TENANTID " +
                "UNION " +
                "SELECT R.ID, R.SS_KEY, E.SS_KEY " +
                "FROM OSSYS_ROLE R JOIN OSSYS_GROUP_ROLE GP ON R.ID = GP.ROLE_ID " +
                "JOIN OSSYS_GROUP_USER GU ON GP.GROUP_ID = GU.GROUP_ID " +
                "JOIN OSSYS_USER U ON GU.USER_ID = U.ID " +
                "JOIN OSSYS_ESPACE E ON R.ESPACE_ID = E.ID " +
                "WHERE GU.USER_ID = @USERID AND GU.TENANT_ID = @TENANTID");
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool CheckRole(Transaction tran, int userId, int espaceId, ObjectKey roleSSKey, int tenantId) {
            Command cmd = tran.CreateCommand(string.Format(@"
                SELECT NULL 
                FROM OSSYS_USER_ROLE 
                    INNER JOIN OSSYS_USER ON OSSYS_USER_ROLE.USER_ID = OSSYS_USER.ID AND OSSYS_USER_ROLE.TENANT_ID = OSSYS_USER.TENANT_ID
                    INNER JOIN OSSYS_ROLE ON OSSYS_USER_ROLE.ROLE_ID = OSSYS_ROLE.ID
                WHERE USER_ID=@USERID AND OSSYS_USER.IS_ACTIVE=1 AND ESPACE_ID=@ESPACEID AND SS_KEY=@ROLESSKEY {0}
                UNION 
                SELECT NULL FROM OSSYS_GROUP_ROLE P 
                    INNER JOIN OSSYS_GROUP_USER U ON P.GROUP_ID=U.GROUP_ID AND P.TENANT_ID = U.TENANT_ID
                    INNER JOIN OSSYS_USER ON U.USER_ID = OSSYS_USER.ID AND U.TENANT_ID = OSSYS_USER.TENANT_ID
                    INNER JOIN OSSYS_ROLE ON P.ROLE_ID = OSSYS_ROLE.ID AND P.TENANT_ID = OSSYS_USER.TENANT_ID
                WHERE U.USER_ID=@USERID AND OSSYS_USER.IS_ACTIVE=1 AND ESPACE_ID=@ESPACEID AND SS_KEY=@ROLESSKEY {1}",
                tenantId == 0 ? string.Empty : " AND OSSYS_USER_ROLE.TENANT_ID = @TENANTID",
                tenantId == 0 ? string.Empty : " AND P.TENANT_ID = @TENANTID "));

            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            cmd.CreateParameter("@ROLESSKEY", DbType.String, roleSSKey);
            if (tenantId != 0) {
                cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            }
            using (var reader = cmd.ExecuteReader()) {
                return reader.Read();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "1", "1" }, Values2 = new[] { TestSyntaxValues.AUTO, "1", "1", "0" })]
        public bool CheckRole(Transaction tran, int userId, int roleId, int tenantId) {
            string sql = String.Format(@"
                SELECT NULL 
                FROM OSSYS_USER_ROLE INNER JOIN OSSYS_USER ON OSSYS_USER_ROLE.USER_ID = OSSYS_USER.ID AND OSSYS_USER_ROLE.TENANT_ID = OSSYS_USER.TENANT_ID
                WHERE USER_ID=@USERID AND OSSYS_USER.IS_ACTIVE=1 AND ROLE_ID=@ROLEID {0}
                UNION 
                SELECT NULL FROM OSSYS_GROUP_ROLE P 
                    INNER JOIN OSSYS_GROUP_USER U ON P.GROUP_ID=U.GROUP_ID AND P.TENANT_ID=U.TENANT_ID
                    INNER JOIN OSSYS_USER ON U.USER_ID = OSSYS_USER.ID AND U.TENANT_ID = OSSYS_USER.TENANT_ID
                WHERE U.USER_ID=@USERID AND OSSYS_USER.IS_ACTIVE=1 AND P.ROLE_ID=@ROLEID {1}",
                tenantId == 0 ? string.Empty : " AND OSSYS_USER_ROLE.TENANT_ID = @TENANTID",
                tenantId == 0 ? string.Empty : " AND U.TENANT_ID = @TENANTID ");

            Command cmd = tran.CreateCommand(sql);
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@ROLEID", DbType.Int32, roleId);
            if (tenantId != 0) {
                cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            }
            using (var reader = cmd.ExecuteReader()) {
                return reader.Read();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public object GetRoleId(Transaction tran, int espaceId, ObjectKey roleSSKey) {
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_ROLE WHERE ESPACE_ID=@ESPACEID AND SS_KEY=@ROLESSKEY");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            cmd.CreateParameter("@ROLESSKEY", DbType.String, roleSSKey);
            return cmd.ExecuteScalar();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "1", "1" })]
        public void CreateUserRole(Transaction tran, int userId, int tenantId, int roleId) {
            Command cmd = tran.CreateCommand("INSERT INTO OSSYS_USER_ROLE (USER_ID, TENANT_ID, ROLE_ID) VALUES (@USERID, @TENANTID, @ROLEID)");
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@ROLEID", DbType.Int32, roleId);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, "0" },
                          Values2 = new[] { TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, "1" })]
        public void DeleteUserRole(Transaction tran, int userId, int espaceId, ObjectKey roleSSKey, int tenantId) {
            Command cmd = tran.CreateCommand(
                "DELETE FROM OSSYS_USER_ROLE " +
                "WHERE USER_ID=@USERID AND ROLE_ID=" +
                "(SELECT ID FROM OSSYS_ROLE WHERE ESPACE_ID=@ESPACEID " +
                "AND SS_KEY=@ROLESSKEY)" + (tenantId == 0 ? "" : " AND TENANT_ID = @TENANTID"));
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            cmd.CreateParameter("@ROLESSKEY", DbType.String, roleSSKey);
            if (tenantId != 0)
                cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int? GetRoleId(Transaction tran, string roleKey, string ownerEspaceKey) {
            Command cmd = tran.CreateCommand(
                "SELECT PA.ID FROM OSSYS_ROLE PA, OSSYS_ESPACE E " +
                "WHERE PA.SS_KEY = @ROLEKEY AND E.SS_KEY = @EKEY " +
                "AND PA.ESPACE_ID = E.ID AND E.IS_ACTIVE=1 AND PA.IS_ACTIVE=1");
            cmd.CreateParameter("@ROLEKEY", DbType.String, roleKey);
            cmd.CreateParameter("@EKEY", DbType.String, ownerEspaceKey);
            var result = cmd.ExecuteScalar();
            if (result != null) {
                return Convert.ToInt32(result);
            }
            return null;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetRoleKeyIdTable(Transaction tran) {
            Command cmd = tran.CreateCommand(
                "SELECT DISTINCT P.SS_KEY, E.ID, P.ID FROM OSSYS_ROLE P JOIN OSSYS_ESPACE E ON P.ESPACE_ID=E.ID AND P.IS_ACTIVE=1 AND E.IS_ACTIVE=1");
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetUserId(Transaction tran, int tenantId, string username) {
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_USER WHERE TENANT_ID = @TENANTID AND UPPER(USERNAME)=@USERNAME");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@USERNAME", DbType.String, username.ToUpper());
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool GetUserInfoForLogin(Transaction tran, int tenantId, int userId, bool fetchDbHash, out string username, out string hashInDb, string operationName) {
            username = string.Empty;
            hashInDb = string.Empty;

            Command sqlCmd = tran.CreateCommand(
              "SELECT USERNAME" + (fetchDbHash ? ", PASSWORD" : "") + " FROM OSSYS_USER " +
              "WHERE ID = @USER_ID AND TENANT_ID = @TENANT_ID AND IS_ACTIVE = 1");
            sqlCmd.CreateParameter("@USER_ID", DbType.Int32, userId);
            sqlCmd.CreateParameter("@TENANT_ID", DbType.Int32, tenantId);

            using (var reader = sqlCmd.ExecuteReader(String.Format("{0} operation (get User)", operationName), true)) {
                if (reader.Read()) {
                    username = reader.SafeGet<string>("USERNAME", string.Empty);
                    if (fetchDbHash) {
                        hashInDb = reader.SafeGet<string>("PASSWORD");
                    }
                    return true;
                } else {
                    return false;
                }
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int CountEspaceEndUsers(Transaction tran, int eSpaceId) {
            Command cmd = tran.CreateCommand(
                "SELECT COUNT(OSSYS_USER.ID) " +
                "FROM OSSYS_TENANT " +
                "LEFT JOIN OSSYS_USER ON OSSYS_TENANT.ID = OSSYS_USER.TENANT_ID " +
                "WHERE OSSYS_TENANT.ESPACE_ID = @ESPACEID " +
                "AND (OSSYS_TENANT.IS_ACTIVE = 1 OR OSSYS_TENANT.IS_ACTIVE IS NULL) " +
                "AND (OSSYS_USER.IS_ACTIVE = 1 OR OSSYS_USER.IS_ACTIVE IS NULL)");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool IsUserActive(Transaction tran, int userId) {
            Command cmd = tran.CreateCommand("SELECT OSSYS_USER.IS_ACTIVE FROM OSSYS_USER WHERE OSSYS_USER.ID = @USERID");
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            object isActive = cmd.ExecuteScalar(/*skipLog*/true);
            if (isActive == null || isActive == DBNull.Value) {
                return false;
            } else {
                return Convert.ToBoolean(isActive);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool TryUpdateLastLoginAndPasswordIfNeeded(Transaction tran, int userId, int tenantId, bool upgradePassword, string newDbHash, string operationName) {
            // #1006905 - Try to get the lock to update the LastLogin, but if it is already locked
            // skip it since it is not that important and it could delay the request.
            if (SelectLastLoginForUpdateNoWait(tran, userId, tenantId)) {
                var cmd = tran.CreateCommand(
                    "UPDATE OSSYS_USER SET LAST_LOGIN = @LAST_LOGIN " +
                    (upgradePassword ? ", PASSWORD = @PASSWORD " : "") +
                    "WHERE TENANT_ID = @TENANT_ID AND ID = @USER_ID");
                cmd.CreateParameter("@LAST_LOGIN", DbType.DateTime, DateTime.Now);
                if (upgradePassword) {
                    cmd.CreateParameter("@PASSWORD", DbType.String, newDbHash);
                }
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, tenantId);
                cmd.CreateParameter("@USER_ID", DbType.Int32, userId);
                cmd.ExecuteNonQuery("{0} operation (update last login date)".F(operationName), /*isApplication*/true);
                return true;
            }
            OSTrace.Debug("Skipped update of the last login date for user {0} due to database lock.".F(userId));
            return false;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public virtual bool SelectLastLoginForUpdateNoWait(Transaction tran, int userID, int tenantID) {
            throw new NotImplementedException(GetNotImplementedMessage());
        }
        #endregion

        #region Debugger
        [MethodImpl(MethodImplOptions.NoInlining)]
        public void ResetArea(Transaction tran, int areaId) {
            // clean Assembly, Area_Entry_Points and Assembly_Dependency
            Command cmd = tran.CreateCommand("DELETE FROM OSSYS_ASSEMBLY WHERE AREA_ID = @AREAID");
            cmd.CreateParameter("@AREAID", areaId);
            cmd.ExecuteNonQuery();
            cmd = tran.CreateCommand("DELETE FROM OSSYS_AREA_ENTRY_POINT WHERE AREA_ID = @AREAID");
            cmd.CreateParameter("@AREAID", areaId);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "1" })]
        public int GetOrCreateArea(Transaction tran, int espaceId, int userId) {
            // check if there is already an entry
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_AREA WHERE ESPACE_ID = @ESPACEID AND USER_ID " + (userId == 0 ? "IS NULL" : "= @USERID"));
            cmd.CreateParameter("@ESPACEID", espaceId);
            if (userId != 0) {
                cmd.CreateParameter("@USERID", userId);
            }
            object areaId = cmd.ExecuteScalar();
            if (areaId != null) {
                return Convert.ToInt32(areaId);
            }

            // create new entry
            cmd = tran.CreateCommand("INSERT INTO OSSYS_AREA (ESPACE_ID, USER_ID) VALUES(@ESPACEID, @USERID)");

            cmd.CreateParameter("@ESPACEID", espaceId);
            if (userId != 0) {
                cmd.CreateParameter("@USERID", userId);
            } else {
                cmd.CreateParameter("@USERID", DBNull.Value);
            }

            return ExecuteNonQueryGetIdentity(cmd, "ID");
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetAreaId(Transaction tran, int espaceId, int userId) {
            Command cmd = tran.CreateCommand(
                "SELECT ID FROM OSSYS_AREA WHERE ESPACE_ID = @ESPACEID AND USER_ID " + (userId == 0 ? "IS NULL" : " = @USERID"));
            cmd.CreateParameter("@ESPACEID", espaceId);
            if (userId != 0) {
                cmd.CreateParameter("@USERID", userId);
            }
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "1" })]
        public void CreateAssembly(Transaction tran, int areaId, int espaceId, string hash, string signature, bool inDebugMode, string debuggerVersion) {
            Command cmd = tran.CreateCommand(
                "INSERT INTO OSSYS_ASSEMBLY (AREA_ID, ESPACE_ID, HASH, SIGNATURE, IN_DEBUG, DEBUGGER_VERSION) " +
                "VALUES(@AREAID, @ESPACEID, @HASH, @SIGNATURE, @INDEBUG, @DEBUGGERVERSION)");
            cmd.CreateParameter("@AREAID", areaId);
            cmd.CreateParameter("@ESPACEID", espaceId);
            cmd.CreateParameter("@HASH", hash);
            cmd.CreateParameter("@SIGNATURE", signature);
            cmd.CreateParameter("@INDEBUG", DbType.Boolean, inDebugMode);
            cmd.CreateParameter("@DEBUGGERVERSION", debuggerVersion);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void SetCompiledButNotDeployedHash(Transaction tran, int areaId, int espaceId, string hash) {
            Command cmd = tran.CreateCommand(
                "UPDATE OSSYS_ASSEMBLY SET COMPILEDBUTNOTDEPLOYEDHASH = @HASH " +
                "WHERE ESPACE_ID = @ESPACEID AND AREA_ID = @AREAID");
            cmd.CreateParameter("@AREAID", areaId);
            cmd.CreateParameter("@ESPACEID", espaceId);
            cmd.CreateParameter("@HASH", hash);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetAssemblySignature(Transaction tran, int areaId, int espaceId) {
            Command cmd = tran.CreateCommand(
                "SELECT SIGNATURE FROM OSSYS_ASSEMBLY WHERE AREA_ID = @AREAID AND ESPACE_ID = @ESPACEID");
            cmd.CreateParameter("@AREAID", areaId);
            cmd.CreateParameter("@ESPACEID", espaceId);
            return Convert.ToString(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Foreign key constraints - assemblyId")]
        public void CreateAssemblyDependency(Transaction tran, int assemblyId, int espaceId, string signatureInUse) {
            Command cmd = tran.CreateCommand(
                "INSERT INTO OSSYS_ASSEMBLY_DEPENDENCY (ASSEMBLY_ID, ESPACE_ID, SIGNATURE_IN_USE) " +
                "VALUES(@ASSEMBLYID, @ESPACEID, @SIGNATUREINUSE)");
            cmd.CreateParameter("@ASSEMBLYID", DbType.Int32, assemblyId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            cmd.CreateParameter("@SIGNATUREINUSE", signatureInUse);
            cmd.ExecuteNonQuery();
        }

        // gets all uses of producer espace in the given area
        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetAssemblyUse(Transaction tran, int areaId, int producerEspaceId) {
            Command cmd = tran.CreateCommand(
                "SELECT SIGNATURE_IN_USE, OSSYS_ESPACE.NAME FROM OSSYS_ASSEMBLY " +
                "INNER JOIN OSSYS_ASSEMBLY_DEPENDENCY ON  OSSYS_ASSEMBLY.ID = OSSYS_ASSEMBLY_DEPENDENCY.ASSEMBLY_ID " +
                "INNER JOIN OSSYS_ESPACE ON OSSYS_ASSEMBLY.ESPACE_ID = OSSYS_ESPACE.ID " +
                "WHERE OSSYS_ASSEMBLY.AREA_ID = @AREAID " +
                "AND OSSYS_ASSEMBLY_DEPENDENCY.ESPACE_ID = @PRODUCERESPACEID");
            cmd.CreateParameter("@AREAID", DbType.Int32, areaId);
            cmd.CreateParameter("@PRODUCERESPACEID", DbType.Int32, producerEspaceId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1" })]
        public void CreateEntryPoint(Transaction tran, int areaId, string name, bool isDefault) {
            Command cmd = tran.CreateCommand("INSERT INTO OSSYS_AREA_ENTRY_POINT (AREA_ID, NAME, IS_DEFAULT) VALUES (@AREAID, @NAME, @ISDEFAULT)");
            cmd.CreateParameter("@AREAID", areaId);
            cmd.CreateParameter("@NAME", name);
            cmd.CreateParameter("@ISDEFAULT", DbType.Boolean, isDefault);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetAssemblyId(Transaction tran, int areaId, int espaceId) {
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_ASSEMBLY WHERE AREA_ID = @AREAID AND ESPACE_ID = @ESPACEID");
            cmd.CreateParameter("@AREAID", DbType.Int32, areaId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "1" })]
        public void CreateOrUpdateDebugSessionData(Transaction tran, int espaceId, int userId, byte[] data) {
            // check if there is already an entry
            string cmdText = "SELECT ID FROM OSSYS_DEBUG_SESSION_DATA WHERE ESPACE_ID=@ESPACEID AND " +
                             (userId > 0 ? "USER_ID=@USERID" : "USER_ID IS NULL");
            Command cmd = tran.CreateCommand(cmdText);
            cmd.CreateParameter("@ESPACEID", espaceId);
            if (userId > 0) {
                cmd.CreateParameter("@USERID", userId);
            }

            object sessionId = cmd.ExecuteScalar();
            cmdText = sessionId == null
                ? "INSERT INTO OSSYS_DEBUG_SESSION_DATA(ESPACE_ID, USER_ID, DATA) VALUES(@ESPACEID, @USERID, @DATA)"
                : "UPDATE OSSYS_DEBUG_SESSION_DATA SET DATA = @DATA WHERE ID = @ID";

            cmd = tran.CreateCommand(cmdText);

            cmd.CreateParameter("@DATA", DbType.Binary, data);
            if (sessionId == null) {
                cmd.CreateParameter("@ESPACEID", espaceId);
                if (userId > 0) {
                    cmd.CreateParameter("@USERID", userId);
                } else {
                    cmd.CreateParameter("@USERID", null);
                }
            } else {
                cmd.CreateParameter("@ID", Convert.ToInt32(sessionId));
            }

            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public byte[] GetDebugSessionData(Transaction tran, int espaceId, int userId) {
            // check if there is already an entry
            string cmdText = "SELECT DATA FROM OSSYS_DEBUG_SESSION_DATA WHERE ESPACE_ID=@ESPACEID AND " + (userId > 0 ? "USER_ID=@USERID" : "USER_ID IS NULL");

            Command cmd = tran.CreateCommand(cmdText);
            cmd.CreateParameter("@ESPACEID", espaceId);
            if (userId > 0) {
                cmd.CreateParameter("@USERID", userId);
            }

            var result = cmd.ExecuteScalar();
            if (Convert.IsDBNull(result)) {
                return null;
            } else {
                return (byte[])result;
            }
        }

        #endregion

        #region External DB Connections
        /// <summary>
        /// <para>Returns the serialized database configuration for a specified connection.</para>
        /// </summary>
        /// <param name="trans">Transaction used to retrive the database configuration.</param>
        /// <param name="connectionName">The connection name for the database configuration.</param>
        /// <returns>
        /// <para>The serialized database configuration for the connection with name <paramref name="connectionName"/>.</para>
        /// <para>Or <c>null</c> if the database connection doesn't exist.</para></returns>
        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetDatabaseConfiguration(Transaction trans, string connectionName) {
            var cmd = trans.CreateCommand(
                "SELECT DATABASE_CONFIGURATION DATABASECONFIGURATION " +
                "FROM OSSYS_DBCONNECTION DBCONNECTION " +
                "WHERE UPPER(DBCONNECTION.NAME) = UPPER(@CONNECTIONNAME)");
            cmd.CreateParameter("@CONNECTIONNAME", connectionName);
            using (IDataReader reader = cmd.ExecuteReader()) {
                return reader.Read() ? Convert.ToString(reader["DATABASECONFIGURATION"]) : null;
            }
        }
        #endregion

        #region MDC
        protected virtual void GetDbSpecificCatalogConfigurationParameters(Dictionary<string, object> parameters, IDataReader reader,
                string databaseName) {

            throw new NotImplementedException(GetNotImplementedMessage());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal Dictionary<string, object> GetCatalogDetailsByName(Transaction trans, string databaseName, DatabaseSettingsSerialization.User user) {

            var fields = "DATATABLESPACE, INDEXTABLESPACE";
            switch (user) {
                case DatabaseSettingsSerialization.User.Admin: fields += ", OWNERUSERNAME, OWNERPASSWORD "; break;
                case DatabaseSettingsSerialization.User.Runtime: fields += ", USERNAME, PASSWORD "; break;
                default: throw new InvalidOperationException(user + "is not valid. User Admin or Runtime");
            }
            var sql = "SELECT " + fields + "FROM OSSYS_DBCATALOG WHERE NAME = @CATALOGNAME";

            using (var cmd = trans.CreateCommand(sql)) {
                cmd.CreateParameter("@CATALOGNAME", DbType.String, databaseName);
                using (var reader = cmd.ExecuteReader()) {
                    if (!reader.Read()) {
                        return null;
                    }
                    var parameters = new Dictionary<string, object>();
                    GetDbSpecificCatalogConfigurationParameters(parameters, reader, databaseName);

                    if (user == DatabaseSettingsSerialization.User.Admin) {
                        parameters.Add("Username", DataReaderUtils.SafeGet<string>(reader["OWNERUSERNAME"], string.Empty).Trim());
                        parameters.Add("Password", Settings.DecryptString(DataReaderUtils.SafeGet<string>(reader["OWNERPASSWORD"], string.Empty).Trim()));
                    } else if (user == DatabaseSettingsSerialization.User.Runtime) {
                        parameters.Add("Username", DataReaderUtils.SafeGet<string>(reader["USERNAME"], string.Empty).Trim());
                        parameters.Add("Password", Settings.DecryptString(DataReaderUtils.SafeGet<string>(reader["PASSWORD"], string.Empty).Trim()));
                    }

                    if (parameters["Username"].ToString().IsEmpty()) {
                        parameters.Remove("Username");
                        parameters.Remove("Password");
                    }

                    return parameters;
                }
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal Dictionary<string, object> GetCatalogDetailsByESpaceId(Transaction trans, int eSpaceId) {
            string sql = "SELECT OSSYS_DBCATALOG.NAME, OSSYS_DBCATALOG.USERNAME, OSSYS_DBCATALOG.PASSWORD, " +
                         "       OSSYS_DBCATALOG.OWNERUSERNAME, OSSYS_DBCATALOG.OWNERPASSWORD," +
                         "       OSSYS_DBCATALOG.DATATABLESPACE, OSSYS_DBCATALOG.INDEXTABLESPACE" +
                         " FROM OSSYS_ESPACE " +
                         "LEFT JOIN OSSYS_ESPACE_VERSION ON OSSYS_ESPACE_VERSION.ID = OSSYS_ESPACE.VERSION_ID " +
                         "INNER JOIN OSSYS_DBCATALOG ON OSSYS_DBCATALOG.ID =" +
                         " COALESCE(OSSYS_ESPACE_VERSION.DBCATALOG_ID, OSSYS_ESPACE.DBCATALOG_ID) " +
                         "WHERE OSSYS_ESPACE.ID = @ESPACEID AND OSSYS_DBCATALOG.NAME <> '" + Constants.SystemDatabaseLogicalName + "'";
            using (var cmd = trans.CreateCommand(sql)) {
                cmd.CreateParameter("@ESPACEID", eSpaceId);
                using (var reader = cmd.ExecuteReader()) {
                    if (!reader.Read()) {
                        return null;
                    }
                    var parameters = new Dictionary<string, object>();
                    GetDbSpecificCatalogConfigurationParameters(parameters, reader, null);

                    parameters.Add("Username", DataReaderUtils.SafeGet<string>(reader["USERNAME"], string.Empty).Trim());
                    parameters.Add("Password", Settings.DecryptString(DataReaderUtils.SafeGet<string>(reader["PASSWORD"], string.Empty).Trim()));

                    // Overriding the value in the database considering the new unified transactional model
                    if (parameters["Username"].ToString().IsEmpty()) {
                        parameters.Remove("Username");
                        parameters.Remove("Password");
                    }

                    return parameters;
                }
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetCatalogName(Transaction tran, int eSpaceId) {
            Command cmd = tran.CreateCommand(
                         "SELECT OSSYS_DBCATALOG.NAME " +
                         "FROM OSSYS_ESPACE " +
                         "LEFT JOIN OSSYS_ESPACE_VERSION ON OSSYS_ESPACE_VERSION.ID = OSSYS_ESPACE.VERSION_ID " +
                         "INNER JOIN OSSYS_DBCATALOG ON OSSYS_DBCATALOG.ID = " +
                         "COALESCE(OSSYS_ESPACE_VERSION.DBCATALOG_ID, OSSYS_ESPACE.DBCATALOG_ID) " +
                         "WHERE OSSYS_ESPACE.ID = @ESPACEID AND OSSYS_DBCATALOG.NAME <> '" + Constants.SystemDatabaseLogicalName + "'");

            cmd.CreateParameter("@ESPACEID", eSpaceId);
            return DataReaderUtils.SafeGet<string>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool AttributeIsActive(Transaction trans, string attributeName, int eSpaceId, string physicalTableName) {
            var cmd = trans.CreateCommand("SELECT COUNT(OSSYS_ENTITY_ATTR.ID) "
                                          + "FROM OSSYS_ENTITY "
                                          + "INNER JOIN OSSYS_ESPACE ON OSSYS_ENTITY.ESPACE_ID = OSSYS_ESPACE.ID "
                                          + "INNER JOIN OSSYS_ENTITY_ATTR ON OSSYS_ENTITY_ATTR.ENTITY_ID = OSSYS_ENTITY.ID "
                                          + "WHERE OSSYS_ENTITY.IS_SYSTEM = 0 "
                                          + "AND OSSYS_ENTITY.IS_EXTERNAL = 0 "
                                          + "AND OSSYS_ENTITY.IS_ACTIVE = 1 "
                                          + "AND OSSYS_ENTITY_ATTR.IS_ACTIVE = 1 "
                                          + "AND OSSYS_ESPACE.ID = @ESPACE_ID "
                                          + "AND OSSYS_ENTITY_ATTR.NAME = @ATTRIBUTE_NAME "
                                          + "AND OSSYS_ENTITY.PHYSICAL_TABLE_NAME = @ENTITY_PHYSICAL_NAME");

            cmd.CreateParameter("@ESPACE_ID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@ATTRIBUTE_NAME", DbType.String, attributeName);
            cmd.CreateParameter("@ENTITY_PHYSICAL_NAME", DbType.String, physicalTableName);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar()) != 0;
        }
        #endregion

        #region eSpace and User Provider
        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetEspaceId(Transaction tran, string espaceName) {
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_ESPACE WHERE UPPER(NAME)=@ESPACENAME");
            cmd.CreateParameter("@ESPACENAME", DbType.String, espaceName.ToUpper());
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetEspaceName(Transaction tran, ObjectKey espaceKey) {
            Command cmd = tran.CreateCommand("SELECT NAME FROM OSSYS_ESPACE WHERE SS_KEY=@ESPACEKEY");
            cmd.CreateParameter("@ESPACEKEY", DbType.String, espaceKey);
            object res = cmd.ExecuteScalar(/*skipLog*/true);
            if (res == null) {
                return null;
            }
            return Convert.ToString(res);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetEspaceName(Transaction tran, int espaceId) {
            Command cmd = tran.CreateCommand("SELECT NAME FROM OSSYS_ESPACE WHERE ID=@ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            object res = cmd.ExecuteScalar();
            if (res == null) {
                return null;
            }
            return Convert.ToString(res);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public virtual string GetEspaceUserProvider(Transaction tran, ObjectKey espaceKey) {
            Command cmd = tran.CreateCommand("SELECT USER_PROVIDER_KEY FROM OSSYS_ESPACE WHERE SS_KEY=@ESPACEKEY");
            cmd.CreateParameter("@ESPACEKEY", DbType.String, espaceKey);
            object res = cmd.ExecuteScalar();
            if (res == null) {
                return null;
            }
            return Convert.ToString(res);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetEspaceNames(Transaction tran) {
            Command cmd = tran.CreateCommand("SELECT NAME FROM OSSYS_ESPACE WHERE IS_ACTIVE=1");
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetESpaceIdbyKey(Transaction tran, ObjectKey eSpaceKey) {
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_ESPACE WHERE UPPER(SS_KEY)=UPPER(@SS_KEY)");
            cmd.CreateParameter("@SS_KEY", DbType.String, eSpaceKey);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetUserProviderKey(Transaction tran, ObjectKey espaceKey) {
            Command cmd = tran.CreateCommand("SELECT USER_PROVIDER_KEY FROM OSSYS_ESPACE WHERE SS_KEY=@ESPACEKEY");
            cmd.CreateParameter("@ESPACEKEY", DbType.String, espaceKey);
            object res = cmd.ExecuteScalar(/*skipLog*/true);
            if (res == null) {
                return null;
            }
            return Convert.ToString(res);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetEspaceConfigInfo(Transaction tran, int espaceId) {
            Command cmd = tran.CreateCommand("SELECT NAME, VAL FROM OSSYS_ESPACE_CONFIGURATION WHERE ESPACE_ID=@ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            return cmd.ExecuteReader(/*skipLog*/true);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public Dictionary<string, string> GetParametersConfiguration(Transaction tran, string configPrefix) {
            var result = new Dictionary<string, string>();
            using (Command cmd = tran.CreateCommand(
                        @"SELECT NAME, VAL FROM OSSYS_PARAMETER
                          WHERE NAME LIKE @PREFIX")) {

                cmd.CreateParameter("@PREFIX", DbType.String, configPrefix + "%");

                using (var reader = cmd.ExecuteReader(/*skipLog*/true)) {
                    while (reader.Read()) {
                        string name = reader.SafeGet<string>("NAME");
                        string val = reader.SafeGet<string>("VAL");
                        if (val != null) {
                            result[name] = val;
                        }
                    }
                }
            }
            return result;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public Dictionary<string, string> GetModuleConfigInfoAndParametersConfigurationFallback(Transaction tran, ObjectKey eSpaceKey, string configPrefix) {
            var result = GetParametersConfiguration(tran, configPrefix);

            // Now override with the specific configurations
            using (Command cmd = tran.CreateCommand(
                        @"SELECT OSSYS_ESPACE_CONFIGURATION.NAME, OSSYS_ESPACE_CONFIGURATION.VAL
                          FROM OSSYS_ESPACE_CONFIGURATION
                          INNER JOIN OSSYS_ESPACE ON OSSYS_ESPACE.ID = OSSYS_ESPACE_CONFIGURATION.ESPACE_ID
                          WHERE OSSYS_ESPACE.SS_KEY = @ESPACEKEY AND OSSYS_ESPACE_CONFIGURATION.NAME LIKE @PREFIX")) {

                cmd.CreateParameter("@ESPACEKEY", DbType.String, eSpaceKey);
                cmd.CreateParameter("@PREFIX", DbType.String, configPrefix + "%");

                using (var reader = cmd.ExecuteReader(/*skipLog*/true)) {
                    while (reader.Read()) {
                        string name = reader.SafeGet<string>("NAME");
                        string val = reader.SafeGet<string>("VAL");
                        if (val != null) {
                            result[name] = val;
                        }
                    }
                }
            }

            return result;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetEspaceInfo(Transaction tran, string espaceName) {
            Command cmd = tran.CreateCommand("SELECT ID, SS_KEY, IS_MULTITENANT, IS_USER_PROVIDER, VERSION_ID FROM OSSYS_ESPACE WHERE UPPER(NAME)=@ESPACENAME");
            cmd.CreateParameter("@ESPACENAME", DbType.String, espaceName.ToUpper());
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetEspaceInfoByVersionId(Transaction tran, int versionId) {
            Command cmd = tran.CreateCommand(
                "SELECT ESPACE.ID, ESPACE.SS_KEY, ESPACE.IS_MULTITENANT, ESPACE.IS_USER_PROVIDER, ESPACE.VERSION_ID, ESPACEVERSION.VERSION VERSIONNUMBER " +
                "FROM OSSYS_ESPACE ESPACE, OSSYS_ESPACE_VERSION ESPACEVERSION " +
                "WHERE ESPACEVERSION.ESPACE_ID = ESPACE.ID AND ESPACEVERSION.ID=@VERSIONID");
            cmd.CreateParameter("@VERSIONID", DbType.String, versionId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetEspaceInfoByVersionIds(Transaction tran, IEnumerable<int> versionIds) {
            string keyList = versionIds == null ? "-1" : string.Join(",", versionIds.ToArray());
            Command cmd = tran.CreateCommand(
                "SELECT DISTINCT E.ID, E.SS_KEY, E.NAME " +
                "FROM OSSYS_ESPACE E " +
                "INNER JOIN OSSYS_ESPACE_VERSION EV ON E.ID = EV.ESPACE_ID " +
                "WHERE EV.ID IN (" + keyList + ")");
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetDistinctEspaceReferences(Transaction trans, int espaceVersionId) {
            Command cmd = trans.CreateCommand(@"SELECT DISTINCT PRODUCER_SS_KEY, PRODUCER_KIND, PUBLISHED_PROD_VERSION_ID
                                                FROM OSSYS_ESPACE_REFERENCE
                                                WHERE CONSUMER_VERSION_ID=@ESPACEVERSIONID AND PRODUCER_KIND='eSpace'");
            cmd.CreateParameter("@ESPACEVERSIONID", DbType.Int32, espaceVersionId);

            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool GetApplicationEnabledForEspace(Transaction tran, int espaceId) {
            // Read it from ossys_espace_runtime "cache" for performance reasons
            Command cmd = tran.CreateCommand("SELECT DISABLED FROM OSSYS_ESPACE_RUNTIME WHERE ESPACE_ID = @ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.String, espaceId);
            return !DataReaderUtils.SafeGet<bool>(cmd.ExecuteScalar(true), false);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetApplicationEspaceNames(Transaction tran, int applicationId) {
            Command cmd = tran.CreateCommand(
                "SELECT OSSYS_ESPACE.NAME " +
                "FROM OSSYS_ESPACE " +
                "INNER JOIN OSSYS_MODULE ON OSSYS_MODULE.ESPACE_ID = OSSYS_ESPACE.ID " +
                "LEFT JOIN OSSYS_APP_DEFINITION_MODULE ON OSSYS_APP_DEFINITION_MODULE.MODULE_ID = OSSYS_MODULE.ID " +
                "WHERE OSSYS_APP_DEFINITION_MODULE.APPLICATION_ID=@APPID");
            cmd.CreateParameter("@APPID", DbType.Int32, applicationId);
            return cmd.ExecuteReader(true);
        }

        // rbg: The query in this method appears to access tables OSSYS_ESPACE_RUNTIME and OSSYS_ESPACE_VERSION unnecessarily.
        // Its usages should be revised and replaced by method GetApplicationIdentityOfEspace.
        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetApplicationOfEspace(Transaction tran, int espaceId) {
            string keyColumn = tran.DatabaseServices.DMLService.Identifiers.EscapeIdentifier("KEY");
            Command cmd = tran.CreateCommand(
                "SELECT OSSYS_APPLICATION.ID APPLICATIONID, OSSYS_APPLICATION." + keyColumn + " APPLICATIONKEY, OSSYS_APPLICATION.NAME APPLICATIONNAME " +
                "FROM OSSYS_ESPACE " +
                "INNER JOIN OSSYS_ESPACE_VERSION ON OSSYS_ESPACE.VERSION_ID = OSSYS_ESPACE_VERSION.ID " +
                "LEFT JOIN OSSYS_ESPACE_RUNTIME ON OSSYS_ESPACE_RUNTIME.ESPACE_ID = OSSYS_ESPACE.ID " +
                "LEFT JOIN OSSYS_MODULE ON OSSYS_MODULE.ESPACE_ID = OSSYS_ESPACE.ID " +
                "LEFT JOIN OSSYS_APP_DEFINITION_MODULE ON OSSYS_APP_DEFINITION_MODULE.MODULE_ID = OSSYS_MODULE.ID " +
                "LEFT JOIN OSSYS_APPLICATION ON OSSYS_APP_DEFINITION_MODULE.APPLICATION_ID = OSSYS_APPLICATION.ID " +
                "WHERE OSSYS_ESPACE.ID=@ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            return cmd.ExecuteReader(true);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetApplicationIdentityOfEspace(Transaction tran, int espaceId) {
            string keyColumn = tran.DatabaseServices.DMLService.Identifiers.EscapeIdentifier("KEY");
            Command cmd = tran.CreateCommand(
                "SELECT OSSYS_APPLICATION.ID APPLICATIONID, OSSYS_APPLICATION." + keyColumn + " APPLICATIONKEY, OSSYS_APPLICATION.NAME APPLICATIONNAME " +
                "FROM OSSYS_ESPACE " +
                "LEFT JOIN OSSYS_MODULE ON OSSYS_MODULE.ESPACE_ID = OSSYS_ESPACE.ID " +
                "LEFT JOIN OSSYS_APP_DEFINITION_MODULE ON OSSYS_APP_DEFINITION_MODULE.MODULE_ID = OSSYS_MODULE.ID " +
                "LEFT JOIN OSSYS_APPLICATION ON OSSYS_APP_DEFINITION_MODULE.APPLICATION_ID = OSSYS_APPLICATION.ID " +
                "WHERE OSSYS_ESPACE.ID=@ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            return cmd.ExecuteReader(true);
        }

        //#551568 - To avoid problems with espace renames, we should get espaceinfo by running espaceId
        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetPublishedEspaceInfo(Transaction tran, int espaceId) {
            string keyColumn = tran.DatabaseServices.DMLService.Identifiers.EscapeIdentifier("KEY");
            Command cmd = tran.CreateCommand(
                "SELECT OSSYS_ESPACE.ID, OSSYS_ESPACE.SS_KEY, OSSYS_ESPACE.IS_MULTITENANT, OSSYS_ESPACE.IS_USER_PROVIDER, OSSYS_ESPACE.VERSION_ID, OSSYS_ESPACE.ESPACEKIND, " +
                "       OSSYS_ESPACE_VERSION.VERSION, OSSYS_ESPACE_VERSION.PUBLISHING_ID, OSSYS_ESPACE.IS_ACTIVE, OSSYS_ESPACE_VERSION.OMLHASH, " +
                "       OSSYS_ESPACE_VERSION.JQUERYVERSION JQUERYVERSION, OSSYS_ESPACE.PENDING_VERSION_ID, OSSYS_ESPACE_RUNTIME.DISABLED, OSSYS_ESPACE.HMAC ESPACEHMAC, " +
                "       OSSYS_APPLICATION.ID APPLICATIONID, OSSYS_APPLICATION." + keyColumn + " APPLICATIONKEY, OSSYS_APPLICATION.NAME APPLICATIONNAME " +
                "FROM OSSYS_ESPACE " +
                "INNER JOIN OSSYS_ESPACE_VERSION ON OSSYS_ESPACE.VERSION_ID = OSSYS_ESPACE_VERSION.ID " +
                "LEFT JOIN OSSYS_ESPACE_RUNTIME ON OSSYS_ESPACE_RUNTIME.ESPACE_ID = OSSYS_ESPACE.ID " +
                "LEFT JOIN OSSYS_MODULE ON OSSYS_MODULE.ESPACE_ID = OSSYS_ESPACE.ID " +
                "LEFT JOIN OSSYS_APP_DEFINITION_MODULE ON OSSYS_APP_DEFINITION_MODULE.MODULE_ID = OSSYS_MODULE.ID " +
                "LEFT JOIN OSSYS_APPLICATION ON OSSYS_APP_DEFINITION_MODULE.APPLICATION_ID = OSSYS_APPLICATION.ID " +
                "WHERE OSSYS_ESPACE.ID=@ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            return cmd.ExecuteReader(/*skipLog*/true); // Must skip log here because this is used when theres still no AppInfo
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public object GetVersionIdFromEspaceId(Transaction tran, int eSpaceId) {
            Command cmd = tran.CreateCommand("SELECT VERSION_ID FROM OSSYS_ESPACE WHERE ID=@ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            return cmd.ExecuteScalar();
        }
        #endregion

        #region Site Properties
        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetSitePropertyId(Transaction tran, ObjectKey siteSSKey, int espaceId, out bool isShared) {
            isShared = true;
            Command cmd = tran.CreateCommand(
                "SELECT ID, IS_SHARED FROM OSSYS_SITE_PROPERTY_DEFINITION WHERE " +
                "SS_KEY=@SITESSKEY AND ESPACE_ID=@ESPACEID");
            cmd.CreateParameter("@SITESSKEY", DbType.String, siteSSKey);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            using (IDataReader reader = cmd.ExecuteReader()) {
                if (reader.Read()) {
                    isShared = reader.SafeGet<bool>("IS_SHARED");
                    return reader.SafeGet<int>("ID");
                }
            }
            return 0;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public object GetSitePropertyByName(Transaction tran, string propertyName, string eSpaceName, string tenantName) {
            Command cmd = tran.CreateCommand(
              @"SELECT COALESCE(SPSHARED.PROPERTY_VALUE, SP.PROPERTY_VALUE)
                FROM OSSYS_SITE_PROPERTY_DEFINITION SPD
                INNER JOIN OSSYS_ESPACE ESPACE ON ESPACE.ID = SPD.ESPACE_ID AND ESPACE.NAME=@ESPACENAME AND ESPACE.IS_ACTIVE = 1
                INNER JOIN OSSYS_ESPACE_TENANT ESPACETENANT ON ESPACETENANT.ESPACE_ID = ESPACE.ID AND ESPACETENANT.TENANT_NAME = @TENANTNAME AND ESPACETENANT.IS_ACTIVE = 1
                LEFT JOIN OSSYS_SITE_PROPERTY_SHARED SPSHARED ON SPSHARED.SITE_PROPERTY_DEFINITION_ID = SPD.ID AND SPD.IS_SHARED = 1
                LEFT JOIN OSSYS_SITE_PROPERTY SP ON SP.SITE_PROPERTY_DEFINITION_ID = SPD.ID AND SP.TENANT_ID = ESPACETENANT.TENANT_ID AND SPD.IS_SHARED = 0
                WHERE SPD.NAME=@PROPNAME");
            cmd.CreateParameter("@PROPNAME", DbType.String, propertyName);
            cmd.CreateParameter("@ESPACENAME", DbType.String, eSpaceName);
            cmd.CreateParameter("@TENANTNAME", DbType.String, tenantName);
            return cmd.ExecuteScalar();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public object GetSitePropertyByName(Transaction tran, string propertyName, int eSpaceId, int tenantId) {
            Command cmd = tran.CreateCommand(
              @"SELECT COALESCE(SPSHARED.PROPERTY_VALUE, SP.PROPERTY_VALUE)
                FROM OSSYS_SITE_PROPERTY_DEFINITION SPD
                INNER JOIN OSSYS_ESPACE ESPACE ON ESPACE.ID = SPD.ESPACE_ID AND ESPACE.ID=@ESPACEID AND ESPACE.IS_ACTIVE = 1
                INNER JOIN OSSYS_ESPACE_TENANT ESPACETENANT ON ESPACETENANT.ESPACE_ID = ESPACE.ID AND ESPACETENANT.TENANT_ID = @TENANTID AND ESPACETENANT.IS_ACTIVE = 1
                LEFT JOIN OSSYS_SITE_PROPERTY_SHARED SPSHARED ON SPSHARED.SITE_PROPERTY_DEFINITION_ID = SPD.ID AND SPD.IS_SHARED = 1
                LEFT JOIN OSSYS_SITE_PROPERTY SP ON SP.SITE_PROPERTY_DEFINITION_ID = SPD.ID AND SP.TENANT_ID = ESPACETENANT.TENANT_ID AND SPD.IS_SHARED = 0
                WHERE SPD.NAME=@PROPNAME");
            cmd.CreateParameter("@PROPNAME", DbType.String, propertyName);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            return cmd.ExecuteScalar();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "true" }, Values2 = new[] { TestSyntaxValues.AUTO, "1", "false" })]
        public void UpdateSiteProperty(Transaction tran, int sitePropId, bool isShared, int tenantId, string sitePropValue) {
            Command cmd = tran.CreateCommand(
               isShared ? "UPDATE OSSYS_SITE_PROPERTY_SHARED SET PROPERTY_VALUE=@SITEPROPVALUE, USER_MODIFIED=1 WHERE SITE_PROPERTY_DEFINITION_ID=@SITEPROPID"
                        : "UPDATE OSSYS_SITE_PROPERTY SET PROPERTY_VALUE=@SITEPROPVALUE, USER_MODIFIED=1 WHERE SITE_PROPERTY_DEFINITION_ID=@SITEPROPID AND TENANT_ID=@TENANTID");
            cmd.CreateParameter("@SITEPROPID", DbType.Int32, sitePropId);
            cmd.CreateParameter("@SITEPROPVALUE", DbType.String, sitePropValue);
            if (!isShared) {
                cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            }
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetSitePropertiesInfo(Transaction tran, int espaceId, int tenantId) {
            Command cmd = tran.CreateCommand(
              @"SELECT SPD.ID DEF_ID, SPD.SS_KEY, SPD.NAME, SPD.DATA_TYPE, COALESCE(SPSHARED.PROPERTY_VALUE, COALESCE(SP.PROPERTY_VALUE, SPD.DEFAULT_VALUE)) VALUE, IS_SHARED 
                FROM OSSYS_SITE_PROPERTY_DEFINITION SPD 
                LEFT JOIN OSSYS_SITE_PROPERTY_SHARED SPSHARED ON SPSHARED.SITE_PROPERTY_DEFINITION_ID = SPD.ID AND SPD.IS_SHARED = 1
                LEFT JOIN OSSYS_SITE_PROPERTY SP ON SP.SITE_PROPERTY_DEFINITION_ID = SPD.ID AND SP.TENANT_ID = @TENANTID AND SPD.IS_SHARED = 0
                WHERE SPD.IS_ACTIVE=1 AND SPD.ESPACE_ID=@ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            return cmd.ExecuteReader();
        }
        #endregion

        #region Cyclic Jobs

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetNumberOfTries(Transaction tran, int cyclicJobId, bool isShared) {
            Command cmd = tran.CreateCommand(isShared
                ? "SELECT NUMBER_OF_TRIES FROM OSSYS_CYCLIC_JOB_SHARED WHERE META_CYCLIC_JOB_ID =@CYCLICJOBID"
                : "SELECT NUMBER_OF_TRIES FROM OSSYS_CYCLIC_JOB WHERE ID =@CYCLICJOBID");
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            return Convert.ToInt32(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void IncrementNumberOfTries(Transaction tran, int cyclicJobId, bool isShared) {
            Command cmd = tran.CreateCommand(isShared
                ? "UPDATE OSSYS_CYCLIC_JOB_SHARED SET NUMBER_OF_TRIES = NUMBER_OF_TRIES + 1 WHERE META_CYCLIC_JOB_ID = @CYCLICJOBID"
                : "UPDATE OSSYS_CYCLIC_JOB SET NUMBER_OF_TRIES = NUMBER_OF_TRIES + 1 WHERE ID = @CYCLICJOBID");
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void ResetNumberOfTries(Transaction tran, int cyclicJobId, bool isShared) {
            Command cmd = tran.CreateCommand(isShared
                ? "UPDATE OSSYS_CYCLIC_JOB_SHARED SET NUMBER_OF_TRIES = 0 WHERE META_CYCLIC_JOB_ID = @CYCLICJOBID"
                : "UPDATE OSSYS_CYCLIC_JOB SET NUMBER_OF_TRIES = 0 WHERE ID = @CYCLICJOBID");
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "1", "2dca3a5d-7121-fe04-54d0-67f043e6bfe6" })]
        public DateTime GetTimerLastRun(Transaction tran, int eSpaceId, int tenantId, ObjectKey timerKey) {
            Command cmd = tran.CreateCommand(
      @"SELECT COALESCE(OSSYS_CYCLIC_JOB.LAST_RUN, OSSYS_CYCLIC_JOB_SHARED.LAST_RUN) LAST_RUN
        FROM OSSYS_META_CYCLIC_JOB 
        LEFT JOIN OSSYS_CYCLIC_JOB ON OSSYS_CYCLIC_JOB.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 0 AND TENANT_ID = @TENANTID
        LEFT JOIN OSSYS_CYCLIC_JOB_SHARED ON OSSYS_CYCLIC_JOB_SHARED.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 1
        WHERE ESPACE_ID = @ESPACEID
          AND SS_KEY = @TIMERKEY");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@TIMERKEY", DbType.String, timerKey);

            using (IDataReader reader = cmd.ExecuteReader()) {
                if (!reader.Read()) {
                    throw new DataBaseException("Unable to find cyclic job");
                }
                return DataReaderUtils.SafeGet<DateTime>(reader[0], BuiltInFunction.NullDate());
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public DateTime GetTimerNextRun(Transaction tran, int eSpaceId, int tenantId, ObjectKey timerKey) {
            Command cmd = tran.CreateCommand(
      @"SELECT COALESCE(OSSYS_CYCLIC_JOB.NEXT_RUN, OSSYS_CYCLIC_JOB_SHARED.NEXT_RUN) NEXT_RUN
        FROM OSSYS_META_CYCLIC_JOB 
        LEFT JOIN OSSYS_CYCLIC_JOB ON OSSYS_CYCLIC_JOB.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 0 AND TENANT_ID = @TENANTID
        LEFT JOIN OSSYS_CYCLIC_JOB_SHARED ON OSSYS_CYCLIC_JOB_SHARED.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 1
        WHERE ESPACE_ID = @ESPACEID AND SS_KEY = @TIMERKEY");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@TIMERKEY", DbType.String, timerKey);
            object obj = cmd.ExecuteScalar();
            return (obj is DateTime ? (DateTime)obj : BuiltInFunction.NullDate());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public DateTime GetTimerRunningSince(Transaction tran, int cyclicJobId, bool isShared) {
            Command cmd = tran.CreateCommand(isShared
                ? "SELECT IS_RUNNING_SINCE FROM OSSYS_CYCLIC_JOB_SHARED WHERE META_CYCLIC_JOB_ID = @CYCLICJOBID "
                : "SELECT IS_RUNNING_SINCE FROM OSSYS_CYCLIC_JOB WHERE ID = @CYCLICJOBID ");
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            cmd.ExecuteScalar();
            return DataReaderUtils.SafeGet<DateTime>(cmd.ExecuteScalar(), BuiltInFunction.NullDate());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "0", "true" }, Values2 = new[] { TestSyntaxValues.AUTO, "0", "false" })]
        public bool GetCyclicJobForUpdate(Transaction tran, int cyclicJobId, bool isShared, out DateTime isRunnSince,
                                          out string schedule, out DateTime lastRun, out DateTime nextRun, out string isRunnBy) {
            isRunnSince = BuiltInFunction.NullDate();
            schedule = "";
            lastRun = BuiltInFunction.NullDate();
            nextRun = BuiltInFunction.NullDate();
            isRunnBy = "";
            string tableName = isShared ? "OSSYS_CYCLIC_JOB_SHARED" : "OSSYS_CYCLIC_JOB";
            string idColumnName = isShared ? "META_CYCLIC_JOB_ID" : "ID";
            var tableSource = DatabaseAccess.ForSystemDatabase.DatabaseServices.ObjectFactory.CreateLocalTableSourceInfo(tableName);
            var placeholders = tran.DatabaseServices.DMLService.GetEntityActions(tableSource).SQLPlaceholderValuesForGetForUpdate();
            string sql = placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeStatement) +
                         " SELECT " + placeholders.GetPlaceholderValue(SelectPlaceholder.AfterSelectKeyword) +
                         " IS_RUNNING_SINCE, SCHEDULE, LAST_RUN, NEXT_RUN, IS_RUNNING_BY " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeFromKeyword) + " FROM " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.AfterFromKeyword, true, false) + tableName +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeWhereKeyword, false, true) + " WHERE " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.AfterWhereKeyword) +
                         " " + idColumnName + " = @CYCLICJOBID " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.AfterStatement);
            Command cmd = tran.CreateCommand(sql);

            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            using (IDataReader reader = cmd.ExecuteReader()) {
                if (!reader.Read()) {
                    return false;
                }

                if (reader[0] != DBNull.Value) {
                    isRunnSince = reader.GetDateTime(0);
                }
                if (reader[1] != DBNull.Value) {
                    schedule = reader.GetString(1);
                }
                if (reader[2] != DBNull.Value) {
                    lastRun = reader.GetDateTime(2);
                }
                if (reader[3] != DBNull.Value) {
                    nextRun = reader.GetDateTime(3);
                }
                if (reader[4] != DBNull.Value) {
                    isRunnBy = reader.GetString(4);
                }
            }

            return true;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetCyclicJobId(Transaction tran, int eSpaceId, int tenantId, ObjectKey timerKey, out bool isShared) {
            isShared = false;

            Command cmd = tran.CreateCommand(
                @"SELECT COALESCE(OSSYS_CYCLIC_JOB.ID, OSSYS_CYCLIC_JOB_SHARED.META_CYCLIC_JOB_ID) ID, IS_SHARED
        FROM OSSYS_META_CYCLIC_JOB 
        LEFT JOIN OSSYS_CYCLIC_JOB ON OSSYS_CYCLIC_JOB.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 0 AND TENANT_ID = @TENANTID
        LEFT JOIN OSSYS_CYCLIC_JOB_SHARED ON OSSYS_CYCLIC_JOB_SHARED.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 1
        WHERE ESPACE_ID = @ESPACEID AND SS_KEY = @TIMERKEY");
            cmd.CreateParameter("@tenantid", DbType.Int32, tenantId);
            cmd.CreateParameter("@espaceid", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@timerkey", DbType.String, timerKey);

            using (IDataReader reader = cmd.ExecuteReader()) {
                if (reader.Read()) {
                    isShared = reader.SafeGet<bool>("Is_Shared");
                    return reader.SafeGet<int>("Id");
                }
            }
            return 0;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetTimerSchedule(Transaction tran, int eSpaceId, int tenantId, ObjectKey timerKey) {
            Command cmd = tran.CreateCommand(
      @"SELECT COALESCE(OSSYS_CYCLIC_JOB.SCHEDULE, OSSYS_CYCLIC_JOB_SHARED.SCHEDULE) SCHEDULE
        FROM OSSYS_META_CYCLIC_JOB 
        LEFT JOIN OSSYS_CYCLIC_JOB ON OSSYS_CYCLIC_JOB.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 0 AND TENANT_ID = @TENANTID
        LEFT JOIN OSSYS_CYCLIC_JOB_SHARED ON OSSYS_CYCLIC_JOB_SHARED.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 1
        WHERE ESPACE_ID = @ESPACEID AND SS_KEY = @TIMERKEY");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@TIMERKEY", DbType.String, timerKey);
            return DataReaderUtils.SafeGet<string>(cmd.ExecuteScalar(), "").TrimEnd();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "true" })]
        public void GetTimerScheduleNextRunAndDbDate(Transaction tran, int cyclicJobId, bool isShared, out string schedule,
                                                            out DateTime dbDate, out DateTime nextRun, out DateTime isRunningSince) {
            Command cmd = tran.CreateCommand(
                "SELECT SCHEDULE, GETDATE(), NEXT_RUN, IS_RUNNING_SINCE " + (isShared
                    ? "FROM OSSYS_CYCLIC_JOB_SHARED WHERE META_CYCLIC_JOB_ID = @CYCLICJOBID"
                    : "FROM OSSYS_CYCLIC_JOB WHERE ID = @CYCLICJOBID"));
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            using (IDataReader reader = cmd.ExecuteReader()) {
                if (!reader.Read()) {
                    reader.Close();
                    throw new DataBaseException("Unable to find cyclic job with id " + cyclicJobId);
                }
                schedule = reader.SafeGet<string>(0, "");
                dbDate = reader.GetDateTime(1);
                nextRun = reader.SafeGet<DateTime>(2, BuiltInFunction.NullDate());
                isRunningSince = reader.SafeGet<DateTime>(3, BuiltInFunction.NullDate());
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void SetTimerSchedule(Transaction tran, int eSpaceId, int tenantId, ObjectKey timerKey, string schedule) {
            Command cmd = tran.CreateCommand(
                "UPDATE OSSYS_CYCLIC_JOB SET SCHEDULE = @SCHEDULE " +
                "WHERE TENANT_ID = @TENANTID " +
                "AND META_CYCLIC_JOB_ID = (SELECT ID FROM OSSYS_META_CYCLIC_JOB WHERE ESPACE_ID = @ESPACEID AND SS_KEY = @TIMERKEY AND IS_SHARED = 0)");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@TIMERKEY", DbType.String, timerKey);
            cmd.CreateParameter("@SCHEDULE", DbType.String, schedule);
            cmd.ExecuteNonQuery();

            cmd = tran.CreateCommand(
                "UPDATE OSSYS_CYCLIC_JOB_SHARED SET SCHEDULE = @SCHEDULE " +
                "WHERE META_CYCLIC_JOB_ID = (SELECT ID FROM OSSYS_META_CYCLIC_JOB WHERE ESPACE_ID = @ESPACEID AND SS_KEY = @TIMERKEY AND IS_SHARED = 1)");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@TIMERKEY", DbType.String, timerKey);
            cmd.CreateParameter("@SCHEDULE", DbType.String, schedule);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "1", "2dca3a5d-7121-fe04-54d0-67f043e6bfe6" })]
        public void SetTimerNextRun(Transaction tran, int eSpaceId, int tenantId, ObjectKey timerKey, DateTime nextRun) {
            bool isShared;
            int cyclicJobId = GetCyclicJobId(tran, eSpaceId, tenantId, timerKey, out isShared);
            SetTimerNextRun(tran, cyclicJobId, isShared, nextRun);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "true" })]
        public void SetTimerNextRun(Transaction tran, int cyclicJobId, bool isShared, DateTime nextRun) {
            Command cmd = tran.CreateCommand(isShared
                ? "UPDATE OSSYS_CYCLIC_JOB_SHARED SET NEXT_RUN = @NEXTRUN, NUMBER_OF_TRIES = 0 WHERE META_CYCLIC_JOB_ID = @CYCLICJOBID"
                : "UPDATE OSSYS_CYCLIC_JOB SET NEXT_RUN = @NEXTRUN, NUMBER_OF_TRIES = 0 WHERE ID = @CYCLICJOBID");
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            cmd.CreateParameter("@NEXTRUN", DbType.DateTime, nextRun);
            if (cmd.ExecuteNonQuery() == 0) {
                throw new DataBaseException("Unable to find cyclic job with id " + cyclicJobId);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "true" })]
        public void SetTimerLastRun(Transaction tran, int cyclicJobId, bool isShared, DateTime lastRun, int duration) {
            Command cmd = tran.CreateCommand(isShared
                ? "UPDATE OSSYS_CYCLIC_JOB_SHARED SET LAST_RUN = @LASTRUN, LAST_DURATION = @DURATION, IS_RUNNING_SINCE = NULL, IS_RUNNING_BY = ' ' WHERE META_CYCLIC_JOB_ID = @CYCLICJOBID"
                : "UPDATE OSSYS_CYCLIC_JOB SET LAST_RUN = @LASTRUN, LAST_DURATION = @DURATION, IS_RUNNING_SINCE = NULL, IS_RUNNING_BY = ' ' WHERE ID = @CYCLICJOBID");
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            cmd.CreateParameter("@LASTRUN", DbType.DateTime, lastRun);
            cmd.CreateParameter("@DURATION", DbType.Int32, duration);
            if (cmd.ExecuteNonQuery() == 0) {
                throw new DataBaseException("Unable to find cyclic job with id " + cyclicJobId);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "true" })]
        public void SetTimerRunningBy(Transaction tran, int timerId, bool isShared, string isRunningBy, out DateTime newIsRunningSince) {
            Command cmd = tran.CreateCommand(isShared
                ? "UPDATE OSSYS_CYCLIC_JOB_SHARED SET IS_RUNNING_SINCE=GETDATE(), IS_RUNNING_BY = @ISRUNNINGBY WHERE META_CYCLIC_JOB_ID = @CYCLICJOBID"
                : "UPDATE OSSYS_CYCLIC_JOB SET IS_RUNNING_SINCE=GETDATE(), IS_RUNNING_BY = @ISRUNNINGBY WHERE ID=@CYCLICJOBID");
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, timerId);
            cmd.CreateParameter("@ISRUNNINGBY", DbType.String, isRunningBy);
            object ret = UpdateTimerAndGetIsRunningSinceValue(cmd, isShared);
            if (ret == null || ret == DBNull.Value) {
                throw new DataBaseException("Unable to update timer. No rows affected");
            }
            newIsRunningSince = Convert.ToDateTime(ret);
        }

        protected virtual object UpdateTimerAndGetIsRunningSinceValue(Command updateCommand, bool isShared) {
            updateCommand.CommandText += (isShared
                ? "; SELECT IS_RUNNING_SINCE FROM OSSYS_CYCLIC_JOB_SHARED WHERE META_CYCLIC_JOB_ID=@CYCLICJOBID"
                : "; SELECT IS_RUNNING_SINCE FROM OSSYS_CYCLIC_JOB WHERE ID=@CYCLICJOBID");
            return updateCommand.ExecuteScalar();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "true" })]
        public void ClearTimerRunningBy(Transaction tran, int timerId, bool isShared) {
            Command cmd = tran.CreateCommand(isShared
                ? "UPDATE OSSYS_CYCLIC_JOB_SHARED SET IS_RUNNING_SINCE=@NULLDATE, IS_RUNNING_BY = @ISRUNNINGBY WHERE META_CYCLIC_JOB_ID=@TIMERID"
                : "UPDATE OSSYS_CYCLIC_JOB SET IS_RUNNING_SINCE=@NULLDATE, IS_RUNNING_BY = @ISRUNNINGBY WHERE ID=@TIMERID");
            cmd.CreateParameter("@TIMERID", DbType.Int32, timerId);
            cmd.CreateParameter("@ISRUNNINGBY", DbType.String, "");
            cmd.CreateParameter("@NULLDATE", DbType.DateTime, BuiltInFunction.NullDate());
            if (cmd.ExecuteNonQuery() == 0) {
                throw new DataBaseException("Unable to update timer. No rows affected");
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "true" })]
        public void UpdateCyclicJob(Transaction tran, int cyclicJobId, bool isShared) {
            Command cmd = tran.CreateCommand(isShared
                ? "UPDATE OSSYS_CYCLIC_JOB_SHARED SET NEXT_RUN=GETDATE() WHERE META_CYCLIC_JOB_ID=@TIMERID"
                : "UPDATE OSSYS_CYCLIC_JOB SET NEXT_RUN=GETDATE() WHERE ID=@TIMERID");
            cmd.CreateParameter("@TIMERID", DbType.Int32, cyclicJobId);
            if (cmd.ExecuteNonQuery() == 0) {
                throw new DataBaseException("Unable to update timer. No rows affected");
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void RunSystemComponentsBootstrapCyclicJob(Transaction tran) {
        }

        #endregion

        #region Tenants

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetTenantIdByEspaceId(Transaction tran, int espaceId) {
            Command cmd = tran.CreateCommand(tran.DatabaseServices.DMLService.Queries.GetMaxRecordsSQL(1, "ID", "OSSYS_TENANT", "ESPACE_ID=@ESPACEID"));
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetTenantIdByEspaceName(Transaction tran, string eSpaceName) {
            Command cmd = tran.CreateCommand(tran.DatabaseServices.DMLService.Queries.GetMaxRecordsSQL(1, "ID", "OSSYS_TENANT", "NAME=@ESPACENAME"));
            cmd.CreateParameter("@ESPACENAME", DbType.String, eSpaceName);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetTenantIdByEspaceKey(Transaction tran, ObjectKey eSpaceKey) {
            Command cmd = tran.CreateCommand(tran.DatabaseServices.DMLService.Queries.GetMaxRecordsSQL(1,
                "OSSYS_TENANT.ID",
                "OSSYS_TENANT INNER JOIN OSSYS_ESPACE ON OSSYS_TENANT.ESPACE_ID = OSSYS_ESPACE.ID",
                "OSSYS_ESPACE.SS_KEY=@ESPACEKEY"));
            cmd.CreateParameter("@ESPACEKEY", DbType.String, eSpaceKey);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar(/*skipLog*/true));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetDefaultTenantIdByUserProviderEspaceKey(Transaction tran, ObjectKey UserProviderEspaceKey, string reservedTenantName) {
            Command cmd = tran.CreateCommand(
                "SELECT MIN(OSSYS_TENANT.ID) " +
                "FROM OSSYS_TENANT INNER JOIN OSSYS_ESPACE USER_PROVIDER ON OSSYS_TENANT.ESPACE_ID = USER_PROVIDER.ID " +
                "WHERE USER_PROVIDER.SS_KEY=@ESPACEKEY AND (OSSYS_TENANT.NAME=@TNAME OR OSSYS_TENANT.NAME=USER_PROVIDER.NAME)");
            cmd.CreateParameter("@ESPACEKEY", DbType.String, UserProviderEspaceKey);
            cmd.CreateParameter("@TNAME", DbType.String, reservedTenantName);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar(true));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool IsValidTenantIdForUserProvider(Transaction tran, ObjectKey UserProviderEspaceKey, int tenantId) {
            Command cmd = tran.CreateCommand(
                "SELECT 1 FROM OSSYS_TENANT " +
                "INNER JOIN OSSYS_ESPACE USER_PROVIDER ON OSSYS_TENANT.ESPACE_ID = USER_PROVIDER.ID " +
                "WHERE USER_PROVIDER.SS_KEY=@ESPACEKEY AND OSSYS_TENANT.ID = @TENANTID AND OSSYS_TENANT.IS_ACTIVE = 1");
            cmd.CreateParameter("@ESPACEKEY", DbType.String, UserProviderEspaceKey);
            cmd.CreateParameter("@TENANTID", DbType.String, tenantId);
            return DataReaderUtils.SafeGet<bool>(cmd.ExecuteScalar(true));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetUserProviderEspaceIdByEspaceId(Transaction tran, int eSpaceId) {
            Command cmd = tran.CreateCommand(
                "SELECT COALESCE(U.ID, E.ID) " +
                "FROM OSSYS_ESPACE E LEFT JOIN OSSYS_ESPACE U ON E.USER_PROVIDER_KEY = U.SS_KEY " +
                "WHERE E.ID = @ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.String, eSpaceId);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetTenantIdByName(Transaction tran, string eSpaceName, string tenantName) {
            Command cmd = tran.CreateCommand(
                "SELECT TENANT.ID FROM OSSYS_TENANT TENANT, OSSYS_ESPACE ESPACE WHERE " +
                "ESPACE.NAME=@ESPACENAME AND TENANT.ESPACE_ID = ESPACE.ID AND TENANT.NAME=@TENANTNAME");
            cmd.CreateParameter("@ESPACENAME", DbType.String, eSpaceName);
            cmd.CreateParameter("@TENANTNAME", DbType.String, tenantName);
            return Convert.ToInt32(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetTenantInfo(Transaction tran, int tenantId) {
            Command cmd = tran.CreateCommand("SELECT ID, IS_ACTIVE, NAME FROM OSSYS_TENANT WHERE ID=@TENANTID");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            return cmd.ExecuteReader(/*skipLog*/true);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool GetTenantActive(Transaction tran, int tenantId) {
            Command cmd = tran.CreateCommand("SELECT IS_ACTIVE FROM OSSYS_TENANT WHERE ID=@TENANTID");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            return DataReaderUtils.SafeGet<bool>(cmd.ExecuteScalar());
        }

        [DoNotObfuscate]
        internal int GetObsoleteTenantId(Transaction trans, int espaceId) {
            var cmd = trans.CreateCommand(
                "SELECT T.ID FROM OSSYS_TENANT T JOIN OSSYS_ESPACE E ON T.ESPACE_ID = E.ID WHERE E.IS_MULTITENANT = 0 AND E.ID = @ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }
        #endregion

        #region SMS

        /// <summary>
        /// Given a the current tenant, return the
        /// ApplicationPhone nodes in the eSpace that are associated with the phone number
        /// for that tenant
        /// </summary>
        /// <param name="tenantId">the tenant to search for</param>
        /// <param name="tran">a valid transaction</param>
        /// <param name="espaceId">the espace to search for</param>
        /// <returns>reader with properties <strong>ss_Key</strong>
        /// and <strong>tenantId</strong></returns>
        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetSMSEntryNodes(Transaction tran, int tenantId, int espaceId) {
            Command cmd = tran.CreateCommand(
                @"SELECT OSSYS_SMS_ENTRY.SS_KEY SS_KEY, OSSYS_PHYSICAL_NUMBER.PHONE_NUMBER PHONE_NUMBER
                FROM OSSYS_SMS_ENTRY
                    INNER JOIN OSSYS_VIRTUAL_NUMBER ON OSSYS_SMS_ENTRY.ID = OSSYS_VIRTUAL_NUMBER.SMSENTRY_ID
                    INNER JOIN OSSYS_PHYSICAL_NUMBER ON OSSYS_PHYSICAL_NUMBER.ID = OSSYS_VIRTUAL_NUMBER.PHYSICAL_NUMBER_ID
                WHERE
                    OSSYS_SMS_ENTRY.IS_ACTIVE = 1 AND
                    OSSYS_VIRTUAL_NUMBER.IS_ACTIVE = 1 AND
                    OSSYS_PHYSICAL_NUMBER.IS_ACTIVE = 1 AND
                    OSSYS_VIRTUAL_NUMBER.TENANT_ID = @TENANTID AND 
                    OSSYS_SMS_ENTRY.ESPACE_ID = @ESPACEID
                ORDER BY OSSYS_VIRTUAL_NUMBER.ORDER_PRIORITY ASC");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            return cmd.ExecuteReader();
        }

        /// <summary>
        /// Given the key of an Application Phone Node, return it's name
        /// </summary>
        /// <param name="tran">a valid transaction</param>
        /// <param name="numberKey">the Application Phone's key</param>
        /// <returns>name of the Application Phone</returns>
        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetSMSEntryNodeName(Transaction tran, ObjectKey numberKey) {
            Command cmd = tran.CreateCommand(
                @"SELECT OSSYS_SMS_ENTRY.NAME NAME
                FROM OSSYS_SMS_ENTRY
                WHERE
                    OSSYS_SMS_ENTRY.SS_KEY = @Key");
            cmd.CreateParameter("@Key", DbType.String, numberKey.AsGuid.ToString());
            return DataReaderUtils.SafeGet<string>(cmd.ExecuteScalar());
        }

        #endregion

        #region Parameters
        [MethodImpl(MethodImplOptions.NoInlining)]
        public virtual object GetParameterValue(Transaction tran, string parmName, bool isNodeSetting) {
            string sql = "SELECT VAL FROM OSSYS_PARAMETER PARAMETER WHERE UPPER(NAME)=@PARMNAME";
            if (isNodeSetting) {
                sql += " AND UPPER(HOST_SERIAL) = @HOSTSERIAL";
            }
            using (Command cmd = tran.CreateCommand(sql)) {
                cmd.CreateParameter("@PARMNAME", DbType.String, parmName.ToUpper());
                if (isNodeSetting) {
                    cmd.CreateParameter("@HOSTSERIAL", DbType.String, SettingsInternal.MachineSerial.ToUpper());
                }
                return cmd.ExecuteScalar(true);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "name1", "val1", "true" }, Values2 = new[] { TestSyntaxValues.AUTO, "name1", "val1", "false" })]
        public void CreateParameter(Transaction tran, string name, string val, bool isNodeSetting) {
            string sql = "INSERT INTO OSSYS_PARAMETER (NAME, VAL) VALUES (@NAME, @VAL)";
            if (isNodeSetting) {
                sql = "INSERT INTO OSSYS_PARAMETER (NAME, VAL, HOST, HOST_SERIAL) VALUES (@NAME, @VAL, @HOST, @HOSTSERIAL)";
            }
            using (Command cmd = tran.CreateCommand(sql)) {
                cmd.CreateParameter("@NAME", DbType.String, name);
                cmd.CreateParameter("@VAL", DbType.String, val);
                if (isNodeSetting) {
                    cmd.CreateParameter("@HOSTSERIAL", DbType.String, SettingsInternal.MachineSerial);
                    cmd.CreateParameter("@HOST", DbType.String, Settings.MachineName);
                }
                cmd.ExecuteNonQuery();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "name1", "val1", "true" }, Values2 = new[] { TestSyntaxValues.AUTO, "name1", "val1", "false" })]
        public bool UpdateParameter(Transaction tran, string name, string val, bool isNodeSetting) {
            string sql = "UPDATE OSSYS_PARAMETER SET VAL=@VAL WHERE UPPER(NAME)=@NAME";
            if (isNodeSetting) {
                sql += " AND UPPER(HOST_SERIAL) = @HOSTSERIAL";
            }
            using (Command cmd = tran.CreateCommand(sql)) {
                cmd.CreateParameter("@NAME", DbType.String, name.ToUpper());
                cmd.CreateParameter("@VAL", DbType.String, val);
                if (isNodeSetting) {
                    cmd.CreateParameter("@HOSTSERIAL", DbType.String, SettingsInternal.MachineSerial.ToUpper());
                }
                return cmd.ExecuteNonQuery() > 0;
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "name1", "true" }, Values2 = new[] { TestSyntaxValues.AUTO, "name1", "false" })]
        public void DeleteParameter(Transaction tran, string name, bool isNodeSetting) {
            string sql = "DELETE FROM OSSYS_PARAMETER WHERE UPPER(NAME)=@NAME";
            if (isNodeSetting) {
                sql += " AND UPPER(HOST_SERIAL) = @HOSTSERIAL";
            }
            using (Command cmd = tran.CreateCommand(sql)) {
                cmd.CreateParameter("@NAME", DbType.String, name.ToUpper());
                if (isNodeSetting) {
                    cmd.CreateParameter("@HOSTSERIAL", DbType.String, SettingsInternal.MachineSerial.ToUpper());
                }
                cmd.ExecuteNonQuery();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "name1", "1" })]
        public static object GetAppParameterValue(Transaction tran, string parmName, int applicationid) {
            string sql = "SELECT VAL FROM OSSYS_APP_PARAMETER PARAMETER WHERE UPPER(NAME)=@PARMNAME AND APPLICATIONID=@APPID";

            using (Command cmd = tran.CreateCommand(sql)) {
                cmd.CreateParameter("@PARMNAME", DbType.String, parmName.ToUpper());
                cmd.CreateParameter("@APPID", DbType.Int32, applicationid);
                return cmd.ExecuteScalar(true);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "name1", "1" })]
        public static byte[] GetAppParameterBinary(Transaction tran, string paramName, int applicationId) {
            string sql =
                "SELECT APB.BINARY " +
                "FROM OSSYS_APP_PARAMETER AP INNER JOIN OSSYS_APP_PARAM_BINARY APB ON AP.ID = APB.ID " +
                "WHERE UPPER(AP.NAME) = @PARAMNAME AND AP.APPLICATIONID = @APPID";

            using (Command cmd = tran.CreateCommand(sql)) {
                cmd.CreateParameter("@PARAMNAME", DbType.String, paramName.ToUpper());
                cmd.CreateParameter("@APPID", DbType.Int32, applicationId);
                return DataReaderUtils.SafeGet<byte[]>(cmd.ExecuteScalar(true));
            }
        }

        #endregion

        #region Server and Environment info
        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetCurrentServerName(Transaction tran) {
            Command cmd = tran.CreateCommand("SELECT OSSYS_SERVER.NAME FROM OSSYS_SERVER WHERE OSSYS_SERVER.HOST_SERIAL = @HOSTSERIAL");
            cmd.CreateParameter("@HOSTSERIAL", DbType.String, SettingsInternal.MachineSerial);
            object res = cmd.ExecuteScalar();
            if (res == null) {
                return null;
            }
            return Convert.ToString(res);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetServerVersion(Transaction tran) {
            return Convert.ToString(GetParameterValue(tran, "version", false));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetEnvironmentKey(Transaction tran) {
            return Convert.ToString(Instance.GetSitePropertyByName(tran, "ServiceCenterUID", Constants.ServiceCenterName, Constants.ServiceCenterName));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetEnvironmentName(Transaction tran) {
            return Convert.ToString(Instance.GetSitePropertyByName(tran, "HubServerName", Constants.ServiceCenterName, Constants.ServiceCenterName));
        }
        #endregion

        #region Synchronous Logging
        [MethodImpl(MethodImplOptions.NoInlining)]
        public int CreateErrorLog(DatabaseConnection conn, ErrorLog log, int cycleSize) {
            int cycle = RuntimeLogger.CalculateIndex(log.Instant, cycleSize);
            string[] sql;
            bool isBigStack = log.Stack.Length > ErrorLog.MAX_STACK_SMALL_STORAGE_SIZE;

            // If the stack trace information's size is higher than 2000 chars, then it is necessary to create a row in error detail table with fullstack information
            if (isBigStack == true) {
                sql = new string[] {
                        string.Format(
                            "INSERT INTO OSLOG_ERROR_{0} (ID, INSTANT, SESSION_ID, USER_ID, ESPACE_ID, TENANT_ID, MESSAGE, STACK, MODULE_NAME, SERVER, CYCLE, ENVIRONMENTINFORMATION, ENTRYPOINT_NAME, ACTION_NAME, REQUEST_KEY) " +
                            "VALUES (@ID,@INSTANT,@SESSION_ID,@USER_ID,@ESPACE_ID,@TENANT_ID,@MESSAGE,NULL,@MODULE_NAME,@SERVER,@CYCLE, @ENVIRONMENTINFORMATION, @ENTRYPOINT_NAME, @ACTION_NAME, @REQUEST_KEY)", cycle),
                        string.Format("INSERT INTO OSLOG_ERROR_DETAIL_{0} (ID, FULLSTACKTRACE) VALUES " + @"(@ID, @STACK) ", cycle),
                    };
            } else {
                sql = new string[] {
                        string.Format(
                            "INSERT INTO OSLOG_ERROR_{0} (ID, INSTANT, SESSION_ID, USER_ID, ESPACE_ID, TENANT_ID, MESSAGE, STACK, MODULE_NAME, SERVER, CYCLE, ENVIRONMENTINFORMATION, ENTRYPOINT_NAME, ACTION_NAME, REQUEST_KEY) " +
                            "VALUES (@ID,@INSTANT,@SESSION_ID,@USER_ID,@ESPACE_ID,@TENANT_ID,@MESSAGE,@STACK,@MODULE_NAME,@SERVER,@CYCLE,@ENVIRONMENTINFORMATION, @ENTRYPOINT_NAME, @ACTION_NAME, @REQUEST_KEY)", cycle)
                    };
            }

            int rowsAffected = 0;
            for (int index = 0; index < sql.Length; index++) {
                using (var cmd = conn.CreateCommand(sql[index])) {
                    CreateErrorLogParameters(cmd, log, cycle, isBigStack, index);
                    rowsAffected += cmd.ExecuteNonQuery(true);
                }
            }

            return rowsAffected;
        }


        private static Command CreateErrorLogParameters(Command cmd, ErrorLog log, int cycle, bool isBigStack, int index) {
            if (isBigStack == true) {
                // isBigStack = true: create only the required parameters, depending on the statement
                if (index == 0) {
                    // index = 0: first statement has all parameters except the @Stack one
                    cmd.CreateParameter("@ID", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Id), ErrorLog.MAX_ID_SIZE));
                    cmd.CreateParameter("@INSTANT", DbType.DateTime, log.Instant);
                    cmd.CreateParameter("@SESSION_ID", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.SessionId), ErrorLog.MAX_SESSION_ID_SIZE));
                    cmd.CreateParameter("@USER_ID", DbType.Int32, log.UserId);
                    cmd.CreateParameter("@ESPACE_ID", DbType.Int32, log.EspaceId);
                    cmd.CreateParameter("@TENANT_ID", DbType.Int32, log.TenantId);
                    cmd.CreateParameter("@MESSAGE", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Message, ErrorLog.MAX_MESSAGE_SIZE));
                    cmd.CreateParameter("@MODULE_NAME", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ModuleName, ErrorLog.MAX_MODULE_NAME_SIZE));
                    cmd.CreateParameter("@SERVER", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Server, ErrorLog.MAX_SERVER_SIZE));
                    cmd.CreateParameter("@CYCLE", DbType.Int32, cycle);
                    cmd.CreateParameter("@ENVIRONMENTINFORMATION", DbType.String, RuntimePlatformUtils.TruncNoNull(log.EnvironmentInformation, ErrorLog.MAX_ENVIRONMENT_INFORMATION_SIZE));
                    cmd.CreateParameter("@ENTRYPOINT_NAME", DbType.String, RuntimePlatformUtils.TruncNoNull(log.EntrypointName, ErrorLog.MAX_ACTION_NAME));
                    cmd.CreateParameter("@ACTION_NAME", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ActionName, ErrorLog.MAX_ACTION_NAME));
                    cmd.CreateParameter("@REQUEST_KEY", DbType.String, RuntimePlatformUtils.NoNull(log.RequestKey));
                } else {
                    // index = 1: second statement has only @Stack and @Id parameters
                    cmd.CreateParameter("@ID", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Id, ErrorLog.MAX_ID_SIZE));
                    cmd.CreateParameter("@STACK", RuntimePlatformUtils.TruncNoNull(log.Stack, ErrorLog.MAX_STACK_LARGE_STORAGE_SIZE));
                }
            } else {
                // isBigStack = false: create all parameters for the query
                cmd.CreateParameter("@ID", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Id), ErrorLog.MAX_ID_SIZE));
                cmd.CreateParameter("@INSTANT", DbType.DateTime, log.Instant);
                cmd.CreateParameter("@SESSION_ID", DbType.String, RuntimePlatformUtils.TruncNoNull(log.SessionId, ErrorLog.MAX_SESSION_ID_SIZE));
                cmd.CreateParameter("@USER_ID", DbType.Int32, log.UserId);
                cmd.CreateParameter("@ESPACE_ID", DbType.Int32, log.EspaceId);
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, log.TenantId);
                cmd.CreateParameter("@MESSAGE", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Message, ErrorLog.MAX_MESSAGE_SIZE));
                cmd.CreateParameter("@STACK", RuntimePlatformUtils.TruncNoNull(log.Stack, ErrorLog.MAX_STACK_SMALL_STORAGE_SIZE));
                cmd.CreateParameter("@MODULE_NAME", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ModuleName, ErrorLog.MAX_MODULE_NAME_SIZE));
                cmd.CreateParameter("@SERVER", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Server, ErrorLog.MAX_SERVER_SIZE));
                cmd.CreateParameter("@CYCLE", DbType.Int32, cycle);
                cmd.CreateParameter("@ENVIRONMENTINFORMATION", DbType.String, RuntimePlatformUtils.TruncNoNull(log.EnvironmentInformation, ErrorLog.MAX_ENVIRONMENT_INFORMATION_SIZE));
                cmd.CreateParameter("@ENTRYPOINT_NAME", DbType.String, RuntimePlatformUtils.TruncNoNull(log.EntrypointName, ErrorLog.MAX_ACTION_NAME));
                cmd.CreateParameter("@ACTION_NAME", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ActionName, ErrorLog.MAX_ACTION_NAME));
                cmd.CreateParameter("@REQUEST_KEY", DbType.String, RuntimePlatformUtils.NoNull(log.RequestKey));
            }

            return cmd;
        }


        [MethodImpl(MethodImplOptions.NoInlining)]
        public int CreateGeneralLog(DatabaseConnection conn, GeneralLog log, int cycleSize) {
            int cycle = RuntimeLogger.CalculateIndex(log.Instant, cycleSize);
            using (var cmd = conn.CreateCommand(string.Format(
                "INSERT INTO OSLOG_GENERAL_{0} (INSTANT, SESSION_ID, USER_ID, ESPACE_ID, TENANT_ID, MESSAGE, MESSAGE_TYPE, MODULE_NAME, ERROR_ID, CYCLE, REQUEST_KEY, ENTRYPOINT_NAME, ACTION_NAME, CLIENT_IP) " +
                "VALUES (@INSTANT,@SESSION_ID,@USER_ID,@ESPACE_ID,@TENANT_ID,@MESSAGE,@MESSAGE_TYPE,@MODULE_NAME,@ERROR_ID,@CYCLE,@REQUEST_KEY, @ENTRYPOINT_NAME, @ACTION_NAME, @CLIENT_IP)", cycle))) {
                cmd.CreateParameter("@INSTANT", DbType.DateTime, log.Instant);
                cmd.CreateParameter("@SESSION_ID", DbType.String, RuntimePlatformUtils.TruncNoNull(log.SessionId, GeneralLog.MAX_SESSION_ID_SIZE));
                cmd.CreateParameter("@USER_ID", DbType.Int32, log.UserId);
                cmd.CreateParameter("@ESPACE_ID", DbType.Int32, log.EspaceId);
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, log.TenantId);
                cmd.CreateParameter("@MESSAGE", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Message, GeneralLog.MAX_MESSAGE_SIZE));
                cmd.CreateParameter("@MESSAGE_TYPE", DbType.String, RuntimePlatformUtils.TruncNoNull(log.MessageType, GeneralLog.MAX_MESSAGE_TYPE_SIZE));
                cmd.CreateParameter("@MODULE_NAME", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ModuleName, GeneralLog.MAX_MODULE_NAME_SIZE));
                cmd.CreateParameter("@ERROR_ID", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ErrorId, GeneralLog.MAX_ERROR_ID_SIZE));
                cmd.CreateParameter("@CYCLE", DbType.Int32, cycle);
                cmd.CreateParameter("@REQUEST_KEY", DbType.String, RuntimePlatformUtils.NoNull(log.RequestKey));
                cmd.CreateParameter("@ENTRYPOINT_NAME", DbType.String, RuntimePlatformUtils.TruncNoNull(log.EntrypointName, GeneralLog.MAX_ACTION_NAME));
                cmd.CreateParameter("@ACTION_NAME", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ActionName, GeneralLog.MAX_ACTION_NAME));
                cmd.CreateParameter("@CLIENT_IP", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ClientIP, GeneralLog.MAX_CLIENT_IP_SIZE));
                return cmd.ExecuteNonQueryWithoutSlowSqlLog();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int CreateScreenLog(DatabaseConnection conn, ScreenLog log, int cycleSize) {
            int cycle = RuntimeLogger.CalculateIndex(log.Instant, cycleSize);
            using (var cmd = conn.CreateCommand(string.Format(
                "INSERT INTO OSLOG_SCREEN_{0} (INSTANT, SESSION_ID, USER_ID, ESPACE_ID, TENANT_ID, SCREEN, DURATION, MSISDN, SCREEN_TYPE, ACCESS_MODE, EXECUTED_BY, CYCLE, SESSION_BYTES, SESSION_REQUESTS, VIEWSTATE_BYTES, REQUEST_KEY, ACTION_NAME, CLIENT_IP) " +
                "VALUES (@INSTANT,@SESSION_ID,@USER_ID,@ESPACE_ID,@TENANT_ID,@SCREEN,@DURATION,@MSISDN,@SCREEN_TYPE,@ACCESS_MODE,@EXECUTED_BY,@CYCLE,@SESSION_BYTES,@SESSION_REQUESTS,@VIEWSTATE_BYTES,@REQUEST_KEY,@ACTION_NAME,@CLIENT_IP)", cycle))) {
                cmd.CreateParameter("@INSTANT", DbType.DateTime, log.Instant);
                cmd.CreateParameter("@SESSION_ID", DbType.String, RuntimePlatformUtils.TruncNoNull(log.SessionId, ScreenLog.MAX_SESSION_ID_SIZE));
                cmd.CreateParameter("@USER_ID", DbType.Int32, log.UserId);
                cmd.CreateParameter("@ESPACE_ID", DbType.Int32, log.EspaceId);
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, log.TenantId);
                cmd.CreateParameter("@SCREEN", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Screen, ScreenLog.MAX_SCREEN_SIZE));
                cmd.CreateParameter("@DURATION", DbType.Int32, log.Duration);
                cmd.CreateParameter("@MSISDN", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Msisdn, ScreenLog.MAX_MSISDN_SIZE));
                cmd.CreateParameter("@SCREEN_TYPE", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ScreenType, ScreenLog.MAX_SCREEN_TYPE_SIZE));
                cmd.CreateParameter("@ACCESS_MODE", DbType.String, RuntimePlatformUtils.TruncNoNull(log.AccessMode, ScreenLog.MAX_ACCESS_MODE_SIZE));
                cmd.CreateParameter("@EXECUTED_BY", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ExecutedBy, ScreenLog.MAX_EXECUTED_BY_SIZE));
                cmd.CreateParameter("@CYCLE", DbType.Int32, cycle);
                cmd.CreateParameter("@SESSION_BYTES", DbType.Int32, log.SessionBytes);
                cmd.CreateParameter("@SESSION_REQUESTS", DbType.Int32, log.SessionRequests);
                cmd.CreateParameter("@VIEWSTATE_BYTES", DbType.Int32, log.ViewstateBytes);
                cmd.CreateParameter("@REQUEST_KEY", DbType.String, RuntimePlatformUtils.NoNull(log.RequestKey));
                cmd.CreateParameter("@ACTION_NAME", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ActionName, ScreenLog.MAX_ACTION_NAME));
                cmd.CreateParameter("@CLIENT_IP", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ClientIP, GeneralLog.MAX_CLIENT_IP_SIZE));
                return cmd.ExecuteNonQuery();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int CreateExtensionLog(DatabaseConnection conn, ExtensionLog log, int cycleSize) {
            int cycle = RuntimeLogger.CalculateIndex(log.Instant, cycleSize);
            using (var cmd = conn.CreateCommand(string.Format(
                "INSERT INTO OSLOG_EXTENSION_{0} (INSTANT, ACTION_NAME, SESSION_ID, USER_ID, ESPACE_ID, TENANT_ID, EXTENSION_ID, DURATION, EXECUTED_BY, ERROR_ID, CYCLE, REQUEST_KEY) " +
                "VALUES (@INSTANT,@ACTION_NAME,@SESSION_ID,@USER_ID,@ESPACE_ID,@TENANT_ID,@EXTENSION_ID,@DURATION,@EXECUTED_BY,@ERROR_ID,@CYCLE,@REQUEST_KEY)", cycle))) {
                cmd.CreateParameter("@INSTANT", DbType.DateTime, log.Instant);
                cmd.CreateParameter("@SESSION_ID", DbType.String, RuntimePlatformUtils.TruncNoNull(log.SessionId, ExtensionLog.MAX_SESSION_ID_SIZE));
                cmd.CreateParameter("@USER_ID", DbType.Int32, log.UserId);
                cmd.CreateParameter("@ESPACE_ID", DbType.Int32, log.EspaceId);
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, log.TenantId);
                cmd.CreateParameter("@EXTENSION_ID", DbType.Int32, log.Extension_Id);
                cmd.CreateParameter("@ACTION_NAME", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Action_Name, ExtensionLog.MAX_ACTION_NAME_SIZE));
                cmd.CreateParameter("@DURATION", DbType.Int32, log.Duration);
                cmd.CreateParameter("@EXECUTED_BY", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ExecutedBy, ExtensionLog.MAX_EXECUTED_BY_SIZE));
                cmd.CreateParameter("@ERROR_ID", DbType.String, log.ErrorId);
                cmd.CreateParameter("@CYCLE", DbType.Int32, cycle);
                cmd.CreateParameter("@REQUEST_KEY", DbType.String, log.RequestKey);
                return cmd.ExecuteNonQuery();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int CreateCyclicJobLog(DatabaseConnection conn, CyclicJobLog log, int cycleSize) {
            int cycle = RuntimeLogger.CalculateIndex(log.Instant, cycleSize);
            using (var cmd = conn.CreateCommand(string.Format(
                "INSERT INTO OSLOG_CYCLIC_JOB_{0} (INSTANT, ESPACE_ID, TENANT_ID, DURATION, EXECUTED_BY, CYCLIC_JOB_KEY, ERROR_ID, SHOULD_HAVE_RUN_AT, NEXT_RUN, CYCLE, REQUEST_KEY) " +
                "VALUES (@INSTANT,@ESPACE_ID,@TENANT_ID,@DURATION,@EXECUTED_BY,@CYCLIC_JOB_KEY,@ERROR_ID,@SHOULD_HAVE_RUN_AT,@NEXT_RUN,@CYCLE,@REQUEST_KEY)", cycle))) {
                cmd.CreateParameter("@INSTANT", DbType.DateTime, log.Instant);
                cmd.CreateParameter("@ESPACE_ID", DbType.Int32, log.EspaceId);
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, log.TenantId);
                cmd.CreateParameter("@DURATION", DbType.Int32, log.Duration);
                cmd.CreateParameter("@EXECUTED_BY", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ExecutedBy, CyclicJobLog.MAX_EXECUTED_BY_SIZE));
                cmd.CreateParameter("@CYCLIC_JOB_KEY", DbType.String, log.CyclicJobKey);
                cmd.CreateParameter("@ERROR_ID", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ErrorId, CyclicJobLog.MAX_ERROR_ID_SIZE));
                cmd.CreateParameter("@SHOULD_HAVE_RUN_AT", DbType.DateTime, log.ShouldHaveRunAt);
                cmd.CreateParameter("@NEXT_RUN", DbType.DateTime, log.NextRun);
                cmd.CreateParameter("@CYCLE", DbType.Int32, cycle);
                cmd.CreateParameter("@REQUEST_KEY", DbType.String, RuntimePlatformUtils.NoNull(log.RequestKey));
                return cmd.ExecuteNonQuery();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int CreateSmsLog(DatabaseConnection conn, SmsLog log, int cycleSize) {
            MobileMessage message = log.Message;
            int cycle = RuntimeLogger.CalculateIndex(log.Instant, cycleSize);
            string typeColumn = conn.DatabaseServices.DMLService.Identifiers.EscapeIdentifier("TYPE");
            using (var cmd = conn.CreateCommand(string.Format(
                "INSERT INTO OSLOG_SMS_{0} (INSTANT, ESPACE_ID, TENANT_ID, ERROR_ID, USER_ID, TENANT_PATH, SCREEN_NAME, DLR_STATUS, LARGE_ACCOUNT, MESSAGE, MESSAGE_ID, CONNECTION, CUSTOM_1, CUSTOM_2, CUSTOM_3, {1}, CUSTOM_ID, ORIGINAL_MESSAGE_ID, BILLING_DESCRIPTION, BILLING_CODE, OPERATOR_CODE, CYCLE, MSISDN) " +
                "VALUES (@INSTANT,@ESPACE_ID,@TENANT_ID,@ERROR_ID,@USER_ID,@TENANT_PATH,@SCREEN_NAME,@DLR_STATUS,@LARGE_ACCOUNT,@MESSAGE,@MESSAGE_ID,@CONNECTION,@CUSTOM_1,@CUSTOM_2,@CUSTOM_3,@MSGTYPE,@CUSTOM_ID,@ORIGINAL_MESSAGE_ID,@BILLING_DESCRIPTION,@BILLING_CODE,@OPERATOR_CODE,@CYCLE,@MSISDN)",
                    cycle, typeColumn))) {
                cmd.CreateParameter("@INSTANT", DbType.DateTime, log.Instant);
                cmd.CreateParameter("@ESPACE_ID", DbType.Int32, log.EspaceId);
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, log.TenantId);
                cmd.CreateParameter("@ERROR_ID", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Error_Id), 50));
                cmd.CreateParameter("@USER_ID", DbType.Int32, log.UserId);
                cmd.CreateParameter("@TENANT_PATH", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Tenant_Path), 56));
                cmd.CreateParameter("@SCREEN_NAME", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Screen_Name), 50));
                cmd.CreateParameter("@DLR_STATUS", DbType.Int32, log.DLR_Status);
                cmd.CreateParameter("@LARGE_ACCOUNT", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Message.LargeAccount), 50));
                cmd.CreateParameter("@MESSAGE", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Message.Message), 480));
                cmd.CreateParameter("@MESSAGE_ID", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Message.MessageId), 50));
                cmd.CreateParameter("@CONNECTION", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Message.Connection), 50));
                cmd.CreateParameter("@CUSTOM_1", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Message.Custom1), 50));
                cmd.CreateParameter("@CUSTOM_2", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Message.Custom2), 50));
                cmd.CreateParameter("@CUSTOM_3", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Message.Custom3), 50));
                if (message is MobileOriginatedMessage) {
                    MobileOriginatedMessage moMessage = (MobileOriginatedMessage)message;
                    cmd.CreateParameter("@MSGTYPE", DbType.String, "MO");
                    cmd.CreateParameter("@CUSTOM_ID", DbType.Int32, 0);
                    cmd.CreateParameter("@ORIGINAL_MESSAGE_ID", DbType.String, "");
                    cmd.CreateParameter("@BILLING_DESCRIPTION", DbType.String, "");
                    cmd.CreateParameter("@BILLING_CODE", DbType.String, "");
                    cmd.CreateParameter("@OPERATOR_CODE", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(moMessage.OperatorCode), 20));
                } else if (message is MobileTerminatedMessage) {
                    MobileTerminatedMessage mtMessage = (MobileTerminatedMessage)message;
                    cmd.CreateParameter("@MSGTYPE", DbType.String, "MT");
                    cmd.CreateParameter("@CUSTOM_ID", DbType.Int32, mtMessage.CustomId);
                    cmd.CreateParameter("@ORIGINAL_MESSAGE_ID", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(mtMessage.OriginalMessageId), 50));
                    cmd.CreateParameter("@BILLING_DESCRIPTION", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(mtMessage.BillingDescription), 80));
                    cmd.CreateParameter("@BILLING_CODE", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(mtMessage.BillingCode), 20));
                    cmd.CreateParameter("@OPERATOR_CODE", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(mtMessage.OperatorCode), 20));
                }
                cmd.CreateParameter("@CYCLE", DbType.Int32, cycle);
                DataParameter msisdnParameter = cmd.CreateParameter("@MSISDN", DbType.String, "");
                int rows = 0;
                string[] numbers = message.MSISDN.Trim().Split(new[] { ' ' });
                foreach (string singleNumber in numbers) {
                    if (singleNumber.Length == 0) {
                        msisdnParameter.Value = " ";
                    } else {
                        msisdnParameter.Value = RuntimePlatformUtils.Trunc(singleNumber, 50);
                    }
                    rows += cmd.ExecuteNonQuery();
                }
                return rows;
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int CreateWebServiceLog(DatabaseConnection conn, WebServiceLog log, int cycleSize) {
            int cycle = RuntimeLogger.CalculateIndex(log.Instant, cycleSize);
            using (var cmd = conn.CreateCommand(string.Format(
                "INSERT INTO OSLOG_WEB_SERVICE_{0} (INSTANT, DURATION, NAME, METHOD, ESPACE_ID, TENANT_ID, CLIENT_IP, EXECUTED_BY, ERROR_ID, CYCLE) " +
                "VALUES (@INSTANT,@DURATION,@NAME,@METHOD,@ESPACE_ID,@TENANT_ID,@CLIENT_IP,@EXECUTED_BY,@ERROR_ID,@CYCLE)", cycle))) {
                cmd.CreateParameter("@INSTANT", DbType.DateTime, log.Instant);
                cmd.CreateParameter("@ESPACE_ID", DbType.Int32, log.EspaceId);
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, log.TenantId);
                cmd.CreateParameter("@DURATION", DbType.Int32, log.Duration);
                cmd.CreateParameter("@EXECUTED_BY", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.ExecutedBy), 50));
                cmd.CreateParameter("@ERROR_ID", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.ErrorId), 50));
                cmd.CreateParameter("@NAME", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Name), 100));
                cmd.CreateParameter("@METHOD", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Method), 100));
                cmd.CreateParameter("@CLIENT_IP", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Client_IP), 15));
                cmd.CreateParameter("@CYCLE", DbType.Int32, cycle);
                return cmd.ExecuteNonQuery();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int CreateWebReferenceLog(DatabaseConnection conn, WebReferenceLog log, int cycleSize) {
            int cycle = RuntimeLogger.CalculateIndex(log.Instant, cycleSize);
            using (var cmd = conn.CreateCommand(string.Format(
                "INSERT INTO OSLOG_WEB_REFERENCE_{0} (INSTANT, ESPACE_ID, TENANT_ID, DURATION, EXECUTED_BY, URL, ERROR_ID, METHOD, INTEGRATIONLOG_ID, CYCLE) " +
                "VALUES (@INSTANT,@ESPACE_ID,@TENANT_ID,@DURATION,@EXECUTED_BY,@URL,@ERROR_ID,@METHOD,@INTEGRATIONLOG_ID,@CYCLE)", cycle))) {
                cmd.CreateParameter("@INSTANT", DbType.DateTime, log.Instant);
                cmd.CreateParameter("@ESPACE_ID", DbType.Int32, log.EspaceId);
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, log.TenantId);
                cmd.CreateParameter("@DURATION", DbType.Int32, log.Duration);
                cmd.CreateParameter("@EXECUTED_BY", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Executed_By), 50));
                cmd.CreateParameter("@URL", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.URL), 1000));
                cmd.CreateParameter("@ERROR_ID", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.ErrorId), 50));
                cmd.CreateParameter("@METHOD", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Method), 100));
                cmd.CreateParameter("@CYCLE", DbType.Int32, cycle);
                cmd.CreateParameter("@INTEGRATIONLOG_ID", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.IntegrationLogId), 50));
                return cmd.ExecuteNonQuery();
            }
        }


        [MethodImpl(MethodImplOptions.NoInlining)]
        public static int CreateIntegrationLog(DatabaseConnection conn, IntegrationLog log, int cycleSize) {
            int cycle = RuntimeLogger.CalculateIndex(log.Instant, cycleSize);
            using (var cmd = conn.CreateCommand(string.Format(
                "INSERT INTO OSLOG_INTEGRATION_{0} (ID, INSTANT, DURATION, SOURCE, ENDPOINT, ACTION, TYPE, ESPACE_ID, TENANT_ID, ERROR_ID, EXECUTED_BY, IS_EXPOSE, CYCLE, REQUEST_KEY) " +
                "VALUES (@ID, @INSTANT, @DURATION, @SOURCE, @ENDPOINT, @ACTION, @TYPE, @ESPACE_ID, @TENANT_ID, @ERROR_ID, @EXECUTED_BY, @IS_EXPOSE, @CYCLE, @REQUEST_KEY)", cycle))) {
                cmd.CreateParameter("@ID", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Id, IntegrationLog.MAX_ID_SIZE));
                cmd.CreateParameter("@INSTANT", DbType.DateTime, log.Instant);
                cmd.CreateParameter("@DURATION", DbType.Int32, log.Duration);
                cmd.CreateParameter("@SOURCE", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Source, IntegrationLog.MAX_SOURCE_SIZE));
                cmd.CreateParameter("@ENDPOINT", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Endpoint, IntegrationLog.MAX_ENDPOINT_SIZE));
                cmd.CreateParameter("@ACTION", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Action, IntegrationLog.MAX_ACTION_SIZE));
                cmd.CreateParameter("@TYPE", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Type, IntegrationLog.MAX_TYPE_SIZE));
                cmd.CreateParameter("@ESPACE_ID", DbType.Int32, log.EspaceId);
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, log.TenantId);
                cmd.CreateParameter("@ERROR_ID", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ErrorId, IntegrationLog.MAX_ERROR_ID_SIZE));
                cmd.CreateParameter("@EXECUTED_BY", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ExecutedBy, 10));
                cmd.CreateParameter("@IS_EXPOSE", DbType.Boolean, log.IsExpose);
                cmd.CreateParameter("@CYCLE", DbType.Int32, cycle);
                cmd.CreateParameter("@REQUEST_KEY", DbType.String, log.RequestKey);
                return cmd.ExecuteNonQuery();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public static int CreateIntDetailLog(DatabaseConnection conn, IntDetailLog log, int cycleSize) {
            int cycle = RuntimeLogger.CalculateIndex(log.Instant, cycleSize);
            using (var cmd = conn.CreateCommand(string.Format(
                "INSERT INTO OSLOG_INT_DETAIL_{0} (ID, TENANT_ID, MESSAGE, DETAIL, DETAILLABEL, CYCLE) " +
                "VALUES (@ID,@TENANT_ID,@MESSAGE,@DETAIL,@DETAILLABEL,@CYCLE)", cycle))) {
                cmd.CreateParameter("@ID", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Id), IntDetailLog.MAX_ID_SIZE));
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, log.TenantId);
                cmd.CreateParameter("@MESSAGE", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Message), IntDetailLog.MAX_MESSAGE_SIZE));
                cmd.CreateParameter("@DETAIL", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Detail), IntDetailLog.MAX_DETAIL_SIZE));
                cmd.CreateParameter("@DETAILLABEL", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.DetailLabel), IntDetailLog.MAX_DETAIL_LABEL_SIZE));
                cmd.CreateParameter("@CYCLE", DbType.Int32, cycle);
                return cmd.ExecuteNonQuery();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public static int CreateMobileRequestLog(DatabaseConnection conn, MobileRequestLog log, int cycleSize) {
            int cycle = RuntimeLogger.CalculateIndex(log.Instant, cycleSize);
            using (var cmd = conn.CreateCommand(string.Format(
                "INSERT INTO OSLOG_MOBILE_REQUEST_{0} (ID, INSTANT, ESPACE_ID, TENANT_ID, SCREEN, ENDPOINT, SOURCE, DURATION, EXECUTED_BY, ERROR_ID, CYCLE, REQUEST_KEY, LOGIN_ID, USER_ID) " +
                "VALUES (@ID, @INSTANT, @ESPACE_ID, @TENANT_ID, @SCREEN, @ENDPOINT, @SOURCE, @DURATION, @EXECUTED_BY, @ERROR_ID, @CYCLE, @REQUEST_KEY, @LOGIN_ID, @USER_ID)", cycle))) {
                cmd.CreateParameter("@ID", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Id, MobileRequestLog.MAX_ID_SIZE));
                cmd.CreateParameter("@INSTANT", DbType.DateTime, log.Instant);
                cmd.CreateParameter("@DURATION", DbType.Int32, log.Duration);
                cmd.CreateParameter("@SCREEN", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Screen, MobileRequestLog.MAX_SCREEN_SIZE));
                cmd.CreateParameter("@SOURCE", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Source, MobileRequestLog.MAX_SOURCE_SIZE));
                cmd.CreateParameter("@ENDPOINT", DbType.String, RuntimePlatformUtils.TruncNoNull(log.Endpoint, MobileRequestLog.MAX_ENDPOINT_SIZE));
                cmd.CreateParameter("@ESPACE_ID", DbType.Int32, log.EspaceId);
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, log.TenantId);
                cmd.CreateParameter("@ERROR_ID", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ErrorId, MobileRequestLog.MAX_ERROR_ID_SIZE));
                cmd.CreateParameter("@EXECUTED_BY", DbType.String, RuntimePlatformUtils.TruncNoNull(log.ExecutedBy, 10));
                cmd.CreateParameter("@CYCLE", DbType.Int32, cycle);
                cmd.CreateParameter("@REQUEST_KEY", DbType.String, log.RequestKey);
                cmd.CreateParameter("@LOGIN_ID", DbType.String, RuntimePlatformUtils.TruncNoNull(log.LoginId, MobileRequestLog.MAX_LOGINID_SIZE));
                cmd.CreateParameter("@USER_ID", DbType.Int32, log.UserId);
                return cmd.ExecuteNonQuery();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public static int CreateMRDetailLog(DatabaseConnection conn, MRDetailLog log, int cycleSize) {
            int cycle = RuntimeLogger.CalculateIndex(log.Instant, cycleSize);
            using (var cmd = conn.CreateCommand(string.Format(
                "INSERT INTO OSLOG_MR_DETAIL_{0} (ID, TENANT_ID, MESSAGE, DETAIL, DETAILLABEL, CYCLE) " +
                "VALUES (@ID,@TENANT_ID,@MESSAGE,@DETAIL,@DETAILLABEL,@CYCLE)", cycle))) {
                cmd.CreateParameter("@ID", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Id), MRDetailLog.MAX_ID_SIZE));
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, log.TenantId);
                cmd.CreateParameter("@MESSAGE", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Message), MRDetailLog.MAX_MESSAGE_SIZE));
                cmd.CreateParameter("@DETAIL", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.Detail), MRDetailLog.MAX_DETAIL_SIZE));
                cmd.CreateParameter("@DETAILLABEL", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull(log.DetailLabel), MRDetailLog.MAX_DETAIL_LABEL_SIZE));
                cmd.CreateParameter("@CYCLE", DbType.Int32, cycle);
                return cmd.ExecuteNonQuery();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int CreateVisitLog(DatabaseConnection conn, CustomLog log) {
            using (var cmd = conn.CreateCommand("INSERT INTO OSSYS_VISIT (VISITORUID, VISITUID, INSTANT) VALUES (@VISITORUID, @VISITUID, @INSTANT)")) {
                cmd.CreateParameter("@VISITORUID", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull((string)log.Fields["VISITORUID"]), 50));
                cmd.CreateParameter("@VISITUID", DbType.String, RuntimePlatformUtils.Trunc(RuntimePlatformUtils.NoNull((string)log.Fields["VISITUID"]), 50));
                cmd.CreateParameter("@INSTANT", DbType.DateTime, (DateTime)log.Fields["INSTANT"]);
                return cmd.ExecuteNonQuery();
            }
        }
        #endregion

        #region Activation
        #endregion


        #region Static Records
        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetStaticRecordsByEntity(Transaction tran, ObjectKey entityKey, int eSpaceId) {
            Command cmd = tran.CreateCommand(
                "SELECT DATA_ID, NAME, SS_KEY " +
                "FROM OSSYS_ENTITY_RECORD " +
                "WHERE ENTITY_SS_KEY = @ENTITYKEY AND ESPACE_ID = @ESPACEID AND IS_ACTIVE = 1");
            cmd.CreateParameter("@ENTITYKEY", DbType.String, entityKey);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            return cmd.ExecuteReader();
        }


        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetStaticRecordBykey(Transaction tran, ObjectKey key, ObjectKey entityKey, int eSpaceId) {
            Command cmd = tran.CreateCommand(
                "SELECT DATA_ID, NAME, SS_KEY " +
                "FROM OSSYS_ENTITY_RECORD " +
                "WHERE SS_KEY = @ENTRYKEY AND ENTITY_SS_KEY = @ENTITYKEY AND ESPACE_ID = @ESPACEID");
            cmd.CreateParameter("@ENTRYKEY", DbType.String, key);
            cmd.CreateParameter("@ENTITYKEY", DbType.String, entityKey);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetStaticRecordByName(Transaction tran, string name, ObjectKey entityKey, int eSpaceId) {
            Command cmd = tran.CreateCommand(
                "SELECT DATA_ID, NAME, SS_KEY " +
                "FROM OSSYS_ENTITY_RECORD " +
                "WHERE NAME = @NAME AND ENTITY_SS_KEY = @ENTITYKEY AND ESPACE_ID = @ESPACEID");
            cmd.CreateParameter("@NAME", DbType.String, name);
            cmd.CreateParameter("@ENTITYKEY", DbType.String, entityKey);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetStaticRecordsByEspaceId(Transaction tran, int eSpaceId) {
            string staticEntityFilter = Constants.EntityDataKind.StaticEntity;

            Command cmd = tran.CreateCommand(
                "SELECT ER.DATA_ID, ER.NAME, ER.SS_KEY, ER.ENTITY_SS_KEY " +
                "FROM OSSYS_ENTITY_RECORD ER " +
                "INNER JOIN OSSYS_ENTITY E ON ER.Entity_SS_Key = E.SS_KEY AND ER.Espace_Id = E.ESPACE_ID " +
                "WHERE ER.ESPACE_ID = @ESPACEID AND ER.IS_ACTIVE = 1 AND E.Data_Kind = @SEFILTER");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@SEFILTER", DbType.String, staticEntityFilter);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetReferencedESpacesStaticRecords(Transaction tran, int eSpaceId) {
            string staticEntityFilter = Constants.EntityDataKind.StaticEntity;

            Command cmd = tran.CreateCommand(
                "SELECT DISTINCT ERR.NAME AS NAME, ERR.SS_KEY AS SS_KEY, ERR.ID AS ID " +
                "FROM OSSYS_ENTITY E " +
                "INNER JOIN OSSYS_ESPACE ERR ON E.ESPACE_ID = ERR.ID " +
                "INNER JOIN OSSYS_ESPACE_ENTITY EE ON E.id = EE.ENTITY_ID " +
                "INNER JOIN OSSYS_ESPACE ES ON ES.ID = EE.ESPACE_ID " +
                "WHERE EE.ESPACE_ID = @ESPACEID AND Data_Kind = @SEFILTER AND E.IS_ACTIVE = 1");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@SEFILTER", DbType.String, staticEntityFilter);
            return cmd.ExecuteReader();
        }

        #endregion

        #region Path rules
        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetESpacePathRuleTranslations(Transaction tran) {
            Command cmd = tran.CreateCommand(
                "SELECT TRANSLATION FROM OSSYS_PATHRULE WHERE (KIND = " + (int)PathRuleKind.PassThroughESpace +
                " OR KIND = " + (int)PathRuleKind.ESpacePrettyName + ")");
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetEspacePrettyNames(Transaction tran) {
            Command cmd = tran.CreateCommand("SELECT INCOMING, TRANSLATION FROM OSSYS_PATHRULE WHERE KIND = " + (int)PathRuleKind.ESpacePrettyName);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetPageRules(Transaction tran, int eSpaceId) {
            Command cmd = tran.CreateCommand(
                "SELECT LOWER(TARGETPAGE) AS TARGETPAGE, INCOMING " +
                "FROM OSSYS_PAGEMETARULE " +
                "WHERE (EXCLUSIVETOESPACE = @ESPACEID OR EXCLUSIVETOESPACE IS NULL) " +
                "AND IS_ACTIVE = 1 ORDER BY RULEORDER");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void CreatePathRule(Transaction tran, int order, string incoming, string translation, bool redirect,
                bool useregexp, bool stopprocessing, object exclusivetositerule, PathRuleKind kind) {
            Command cmd;

            if (exclusivetositerule != null) {
                cmd = tran.CreateCommand(
                    "INSERT INTO OSSYS_PATHRULE (RULEORDER, INCOMING, TRANSLATION, REDIRECT, USEREGEXP, STOPPROCESSING, EXCLUSIVETOSITERULE, KIND) " +
                    "VALUES (@ORDER, @INCOMING, @TRANSLATION, @REDIRECT, @USEREGEXP, @STOPPROCESSING, @EXCLUSIVETOSITERULE, @KIND)");
                cmd.CreateParameter("@exclusivetositerule", DbType.Int32, (int)exclusivetositerule);
            } else {
                cmd = tran.CreateCommand(
                    "INSERT INTO OSSYS_PATHRULE (RULEORDER, INCOMING, TRANSLATION, REDIRECT, USEREGEXP, STOPPROCESSING, KIND) " +
                    "VALUES (@RULEORDER, @INCOMING, @TRANSLATION, @REDIRECT, @USEREGEXP, @STOPPROCESSING, @KIND)");
            }
            cmd.CreateParameter("@RULEORDER", DbType.Int32, order);
            cmd.CreateParameter("@INCOMING", DbType.String, incoming);
            cmd.CreateParameter("@TRANSLATION", DbType.String, translation);
            cmd.CreateParameter("@REDIRECT", DbType.Boolean, redirect);
            cmd.CreateParameter("@USEREGEXP", DbType.Boolean, useregexp);
            cmd.CreateParameter("@STOPPROCESSING", DbType.Boolean, stopprocessing);
            cmd.CreateParameter("@KIND", DbType.Int32, (int)kind);
            cmd.ExecuteNonQuery();
        }
        #endregion

        #region Misc metamodel stuff

        [MethodImpl(MethodImplOptions.NoInlining)]
        public virtual void UpdateSerialNumber(Transaction tran, string previousSerial, string newSerial) {
            string sql = "UPDATE p1 set p1.host_serial = @currentSerial FROM ossys_parameter p1 where upper(p1.host_serial) = @previousSerial AND NOT EXISTS (SELECT 1 FROM ossys_parameter p2 WHERE p1.name=p2.name AND  upper(p2.host_serial) = upper(@currentSerial))";
            using (var cmd = tran.CreateCommand(sql)) {
                cmd.CreateParameter("@previousSerial", DbType.String, previousSerial.ToUpper());
                cmd.CreateParameter("@currentSerial", DbType.String, newSerial);
                cmd.ExecuteNonQuery();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetEntitiesAndComplexityPerExtension(Transaction tran) {
            // -1 is invalid as complexity, is used to signal that the record does not exist
            Command cmd = tran.CreateCommand(
                "SELECT SSKEY, NAME, VERSIONID, ENTITIES, (CASE WHEN COMPLEXITY IS NULL THEN -1 ELSE COMPLEXITY END) COMPLEXITY, HMAC FROM " +
                    "(SELECT EX.SS_KEY SSKEY, EX.NAME NAME, EX.VERSION_ID VERSIONID, COUNT(1) ENTITIES FROM OSSYS_EXTENSION EX " +
                        "INNER JOIN OSSYS_ENTITY EN ON EX.ID = EN.EXTENSION_ID AND EN.IS_ACTIVE=1 AND EX.IS_ACTIVE=1 " +
                        "GROUP BY EX.SS_KEY, EX.NAME, EX.VERSION_ID) EXT " +
                    "LEFT JOIN " +
                        "(SELECT EXTENSION_VERSION_ID, COMPLEXITY, HMAC FROM OSSYS_EXTENSION_COMPLEXITY) COMP " +
                        "ON COMP.EXTENSION_VERSION_ID = EXT.VERSIONID");
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetActionAndBlockReferencesInfo(Transaction tran, int eSpaceVersionId) {
            Command cmd = tran.CreateCommand(
                "SELECT DISTINCT OSSYS_ESPACE.ID, VERSION_ID FROM OSSYS_ESPACE " +
                "INNER JOIN OSSYS_ESPACE_REFERENCE " +
                "ON VERSION_ID = PUBLISHED_PROD_VERSION_ID " +
                "WHERE CONSUMER_VERSION_ID = " + eSpaceVersionId + " " +
                "AND (KIND = 'Action' OR KIND = 'WebBlock') " +
                "AND PRODUCER_KIND = 'eSpace'");
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetExtensionConfiguration(Transaction tran, int extensionId, string param) {
            Command cmd = tran.CreateCommand("SELECT VAL FROM OSSYS_EXTENSION_CONFIGURATION WHERE EXTENSION_ID = @EXTENSIONID AND NAME = @PARAM");
            cmd.CreateParameter("@EXTENSIONID", DbType.Int32, extensionId);
            cmd.CreateParameter("@PARAM", DbType.String, param);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetTextResources(Transaction tran, int eSpaceId, string locale) {
            Command cmd = tran.CreateCommand(
                "SELECT TRANSLATION, RESOURCEKEY " +
                "FROM OSSYS_TRANSLATIONOVERRIDE " +
                "WHERE LOCALE = @LOCALE AND ESPACE_ID = @ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@LOCALE", DbType.String, locale);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool HasEntitiesToUpdate(Transaction tran, int espaceId, int tenantId) {
            var cmd = tran.CreateCommand(
                "SELECT 1 FROM OSSYS_ENTITY ENT " +
                "JOIN OSSYS_ESPACE ESP ON ESP.ID = ENT.ESPACE_ID " +
                "LEFT JOIN OSSYS_TENANT_VIEW TVIEWS ON ENT.SS_KEY = TVIEWS.ENTITY_KEY AND ESP.ID = TVIEWS.ESPACE_ID AND TVIEWS.TENANT_ID = @TENANT_ID " +
                "WHERE ESP.IS_ACTIVE = 1 AND ENT.IS_ACTIVE = 1 AND ENT.MULTITENANT = 1 AND TVIEWS.TENANT_ID IS NULL");
            cmd.CreateParameter("@TENANT_ID", tenantId);
            return DataReaderUtils.SafeGet<bool>(cmd.ExecuteScalar(/*skipLog*/true));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetWebReferenceURLs(Transaction tran, string webrefSSKey, int espaceId) {
            Command cmd = tran.CreateCommand("SELECT URL, EFFECTIVE_URL FROM OSSYS_WEB_REFERENCE WHERE ESPACE_ID = @ESPACEID AND SS_KEY = @WEBREFSSKEY");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            cmd.CreateParameter("@WEBREFSSKEY", DbType.String, webrefSSKey);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetWebReferenceLoggingConfiguration(Transaction tran, string webrefSSKey, int espaceId) {
            Command cmd = tran.CreateCommand("SELECT TRACEALL, TRACEERRORS FROM OSSYS_WEB_REFERENCE, OSSYS_WEB_REFERENCE_EXTENSION WHERE ESPACE_ID = @ESPACEID AND SS_KEY = @WEBREFSSKEY AND OSSYS_WEB_REFERENCE.ID = OSSYS_WEB_REFERENCE_EXTENSION.ID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            cmd.CreateParameter("@WEBREFSSKEY", DbType.String, webrefSSKey);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool IsCallbackProviderWithHideSetting(Transaction tran, string espaceName) {
            Command cmd = tran.CreateCommand("SELECT COUNT(1) FROM OSSYS_CALLBACK WHERE PROVIDERNAME=@PROVIDER AND HIDE_IN_PROVIDER = 1");
            cmd.CreateParameter("@PROVIDER", DbType.String, espaceName);
            return Convert.ToInt32(cmd.ExecuteScalar()) > 0;
        }
        #endregion

        #region AndroidDownloads

        public static void InsertTemporaryAndroidDownload(Transaction tran, string guid, string mimeType, DateTime timestamp, byte[] fileContent, string hash, string filename, string disposition) {
            bool exists = false;
            int fileId = 0;
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_TEMP_ANDROID_FILE WHERE HASH = @filehash");
            cmd.CreateParameter("@filehash", DbType.String, hash);

            fileId = Convert.ToInt32(cmd.ExecuteScalar());
            exists = fileId > 0;

            if (!exists) {
                cmd = tran.CreateCommand("INSERT INTO OSSYS_TEMP_ANDROID_FILE (HASH, CONTENT) VALUES (@filehash, @filecontent)");
                cmd.CreateParameter("@filehash", DbType.String, hash);
                cmd.CreateParameter("@filecontent", DbType.Binary, fileContent);
                fileId = DBRuntimePlatform.Instance.ExecuteNonQueryGetIdentity(cmd, "ID");
            }

            cmd = tran.CreateCommand(
                "INSERT INTO OSSYS_TEMP_ANDROID_DOWNLOAD (GUID, MIMETYPE, EXPIRES, FILENAME, DISPOSITION, FILE_CONTENT_ID) " +
                "VALUES (@guid, @mimetype, @timestamp, @filename, @disposition, @idfilecontent)");
            cmd.CreateParameter("@guid", DbType.String, guid);
            cmd.CreateParameter("@mimetype", DbType.String, mimeType);
            cmd.CreateParameter("@timestamp", DbType.DateTime, timestamp);
            cmd.CreateParameter("@filename", DbType.String, filename);
            cmd.CreateParameter("@disposition", DbType.String, disposition);
            cmd.CreateParameter("@idfilecontent", DbType.Int32, fileId);
            cmd.ExecuteNonQuery();
        }

        public static IDataReader GetTemporaryAndroidDownload(Transaction tran, string guid) {
            Command cmd = tran.CreateCommand(
                "SELECT MIMETYPE, EXPIRES, CONTENT, FILENAME, DISPOSITION FROM OSSYS_TEMP_ANDROID_DOWNLOAD " +
                "INNER JOIN OSSYS_TEMP_ANDROID_FILE ON OSSYS_TEMP_ANDROID_DOWNLOAD.FILE_CONTENT_ID = OSSYS_TEMP_ANDROID_FILE.ID " +
                "WHERE GUID = @guid");
            cmd.CreateParameter("@guid", DbType.String, guid);
            return cmd.ExecuteReader();
        }

        #endregion

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetApplicationSecurity(Transaction tran, int applicationId) {
            Command cmd = tran.CreateCommand(
                "SELECT FORCESCREENSECURITY, FORCEINTEGRATIONSECURITY, FORCECONTENTSECURITYPOLICY " +
                "FROM OSSYS_APP_SECURITY " +
                "WHERE APPLICATIONID = @appId");
            cmd.CreateParameter("@appId", DbType.String, applicationId);

            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetApplicationContentSecurityPolicy(Transaction tran, int applicationId) {
            Command cmd = tran.CreateCommand(
                "SELECT APPLICATIONID, DIRECTIVENAME, DIRECTIVEVALUE " +
                "FROM OSSYS_APP_CSP " +
                "WHERE APPLICATIONID = @appId");
            cmd.CreateParameter("@appId", DbType.String, applicationId);

            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal MobileLoginConfiguration GetMobileLoginConfiguration(Transaction tran, ObjectKey userProviderEspaceKey) {
            try {

                int defaultTenant = GetDefaultTenantIdByUserProviderEspaceKey(tran, userProviderEspaceKey, "-");

                Command cmd = tran.CreateCommand(
                    string.Format(@"SELECT
                            (SELECT VAL FROM OSSYS_PARAMETER WHERE NAME LIKE '{0}') EncryptKey,
                            (SELECT VAL FROM OSSYS_PARAMETER WHERE NAME LIKE '{1}') HMACKey,
                            (SELECT VAL FROM OSSYS_PARAMETER WHERE NAME LIKE '{2}') CacheTime,
                            (SELECT VAL FROM OSSYS_PARAMETER WHERE NAME LIKE '{3}') Persistent_IdleTime,
                            (SELECT VAL FROM OSSYS_PARAMETER WHERE NAME LIKE '{4}') Persistent_CookieExpiration,
                            (SELECT VAL FROM OSSYS_PARAMETER WHERE NAME LIKE '{5}') Session_IdleTime
                        FROM DUAL",
                        Settings.Configs.AuthenticationEncryptKey,
                        Settings.Configs.AuthenticationHMACKey,
                        Settings.Configs.MobileLogin_CacheTimeInMinutes,
                        Settings.Configs.MobileLogin_Persistent_MaxIdleTimeInDays,
                        Settings.Configs.MobileLogin_Persistent_CookieExpirationInDays,
                        Settings.Configs.MobileLogin_Session_MaxIdleTimeInMinutes
                    )
                );

                using (var reader = cmd.ExecuteReader()) {
                    if (reader.Read()) {

                        string encryptKey = reader.SafeGet<string>("EncryptKey");
                        if (string.IsNullOrEmpty(encryptKey)) {
                            throw new InvalidOperationException("Unable to retrive mobile application's encrypt key");
                        }
                        encryptKey = Settings.DecryptString(encryptKey);

                        string hmacKey = reader.SafeGet<string>("HMACKey");
                        if (string.IsNullOrEmpty(hmacKey)) {
                            throw new InvalidOperationException("Unable to retrive mobile application's authentication key");
                        }
                        hmacKey = Settings.DecryptString(hmacKey);

                        int cacheTimeInMinutes = reader.SafeGet<int>("CacheTime",
                            int.Parse(Settings.GetDefaultValue(Settings.Configs.MobileLogin_CacheTimeInMinutes)));
                        int persistentLoginIdleTimeInDays = reader.SafeGet<int>("Persistent_IdleTime",
                            int.Parse(Settings.GetDefaultValue(Settings.Configs.MobileLogin_Persistent_MaxIdleTimeInDays)));
                        int persistentCookieExpirationInDays = reader.SafeGet<int>("Persistent_CookieExpiration",
                            int.Parse(Settings.GetDefaultValue(Settings.Configs.MobileLogin_Persistent_CookieExpirationInDays)));
                        int sessionLoginIdleTimeInMinutes = reader.SafeGet<int>("Session_IdleTime",
                            int.Parse(Settings.GetDefaultValue(Settings.Configs.MobileLogin_Session_MaxIdleTimeInMinutes)));
                        return new MobileLoginConfiguration(
                            encryptKey,
                            hmacKey,
                            TimeSpan.FromMinutes(cacheTimeInMinutes),
                            TimeSpan.FromDays(persistentLoginIdleTimeInDays),
                            TimeSpan.FromDays(persistentCookieExpirationInDays),
                            TimeSpan.FromMinutes(sessionLoginIdleTimeInMinutes),
                            defaultTenant);
                    }
                    throw new InvalidOperationException("Unable to retrive mobile application's authentication configurations");
                }
            } catch (Exception e) {
                throw new InvalidOperationException("Unable to retrive mobile application's authentication configurations", e);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetEnvironmentContentSecurityPolicy(Transaction tran) {
            Command cmd = tran.CreateCommand(
                "SELECT DIRECTIVENAME, DIRECTIVEVALUE " +
                "FROM OSSYS_ENV_CSP");

            return cmd.ExecuteReader();
        }

        [DoNotTestSyntax("Method has too many parameters. Auto name is too large.")]
        [MethodImpl(MethodImplOptions.NoInlining)]
        
        public void GetEspaceSecurity(Transaction tran, int eSpaceId, out bool ForceScreenSecurity, out bool ForceIntegrationsSecurity, out bool ForceContentSecurityPolicy, out bool ContentSecurityPolicy_ByApp, out bool ContentSecurityPolicy_ByEnv) {
            int applicationid = -1;
            bool ForceScreenSecurity_App = false;
            bool ForceIntegrationsSecurity_App = false;
            bool ForceContentSecurityPolicy_App = false;

            bool ForceScreenSecurity_Env = false;
            bool ForceIntegrationsSecurity_Env = false;
            bool ForceContentSecurityPolicy_Env = false;

            ForceScreenSecurity = false;
            ForceIntegrationsSecurity = false;
            ForceContentSecurityPolicy = false;

            using (IDataReader reader = DBRuntimePlatform.Instance.GetApplicationOfEspace(tran, eSpaceId)) {
                try {
                    if (reader.Read()) {
                        applicationid = reader.SafeGet<int>("ApplicationId");
                    }
                } catch {
                    // mdp: Added the following debug message in case this happens. 
                    // However, this should be reviewed since it might break something further down the line, and is very hard to understand that this was the cause.
                    OSTrace.Debug("Unable to get ApplicationId to eSpace id {0}. Using id 0 instead.".F(eSpaceId));
                }
            }

            using (IDataReader reader = DBRuntimePlatform.Instance.GetApplicationSecurity(tran, applicationid)) {
                try {
                    if (reader.Read()) {
                        ForceScreenSecurity_App = reader.SafeGet<bool>("FORCESCREENSECURITY");
                        ForceIntegrationsSecurity_App = reader.SafeGet<bool>("FORCEINTEGRATIONSECURITY");
                        ForceContentSecurityPolicy_App = reader.SafeGet<bool>("FORCECONTENTSECURITYPOLICY");
                    }
                } catch {
                    // mdp: Added the following debug message in case this happens. 
                    // However, this should be reviewed since it might break something further down the line, and is very hard to understand that this was the cause.
                    OSTrace.Debug("Unable to get application security setting of application id {0}.".F(applicationid));
                }
            }

            ForceScreenSecurity_Env = Convert.ToBoolean(DBRuntimePlatform.Instance.GetParameterValue(tran, Settings.Configs.ForceScreensSecurity, false))
                                || Convert.ToBoolean(DBRuntimePlatform.Instance.GetParameterValue(tran, Settings.Configs.EnableHSTS, false));
            ForceIntegrationsSecurity_Env = Convert.ToBoolean(DBRuntimePlatform.Instance.GetParameterValue(tran, Settings.Configs.ForceIntegrationSecurity, false));
            ForceContentSecurityPolicy_Env = Convert.ToBoolean(DBRuntimePlatform.Instance.GetParameterValue(tran, Settings.Configs.EnableContentSecurityPolicy, false));

            ForceScreenSecurity = ForceScreenSecurity_App || ForceScreenSecurity_Env;
            ForceIntegrationsSecurity = ForceIntegrationsSecurity_App || ForceIntegrationsSecurity_Env;
            ForceContentSecurityPolicy = ForceContentSecurityPolicy_App || ForceContentSecurityPolicy_Env;
            ContentSecurityPolicy_ByApp = ForceContentSecurityPolicy_App;
            ContentSecurityPolicy_ByEnv = ForceContentSecurityPolicy_Env;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetFailedLoginAttemptsCountFromUser(Transaction tran, string username, DateTime datetimeInitial, string IPAddress) {
            Command cmd = tran.CreateCommand(@"SELECT USERNAMEFAILURECOUNT, INSTANT 
                                            FROM OSSYS_LOGIN_ATTEMPT 
                                            WHERE UPPER(USERNAME)=@USERNAME AND 
                                            INSTANT>=@DATETIME AND 
                                            IPADDRESS=@IPADDRESS AND
                                            SUCCESS=@SUCCESS
                                            ORDER BY INSTANT DESC, ID DESC");
            cmd.CreateParameter("@USERNAME", DbType.String, username.ToUpper());
            cmd.CreateParameter("@DATETIME", DbType.DateTime, datetimeInitial);
            cmd.CreateParameter("@IPADDRESS", DbType.String, IPAddress);
            cmd.CreateParameter("@SUCCESS", DbType.Boolean, false);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetLastLoginAttemptsFromIPAddress(Transaction tran, string originAddress, DateTime datetimeInitial) {
            Command cmd = tran.CreateCommand(@"SELECT USERID, USERNAME, IPADDRESSFAILURECOUNT, INSTANT 
                                            FROM OSSYS_LOGIN_ATTEMPT 
                                            WHERE IPADDRESS=@IPADDRESS AND INSTANT>=@DATETIME AND SUCCESS=@SUCCESS
                                            ORDER BY INSTANT DESC, ID DESC");
            cmd.CreateParameter("@IPADDRESS", DbType.String, originAddress);
            cmd.CreateParameter("@DATETIME", DbType.DateTime, datetimeInitial);
            cmd.CreateParameter("@SUCCESS", DbType.Boolean, false);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void CreateLoginAttemptRecord(Transaction tran, int userId, string username, bool success, DateTime instant, string IPAddress, int usernameFailureCount,
                    int IPAddressFailureCount, string userAgent, string visitor, string requestKey, string result) {
            Command cmd = tran.CreateCommand(
            @"INSERT INTO OSSYS_LOGIN_ATTEMPT (USERID, USERNAME, SUCCESS, INSTANT, IPADDRESS, USERNAMEFAILURECOUNT, IPADDRESSFAILURECOUNT, 
            USERAGENT, VISITOR, REQUESTKEY, RESULT) 
            VALUES(@USERID, @USERNAME, @SUCCESS, @INSTANT, @IPADDRESS, @USERNAMEFAILURECOUNT, @IPADDRESSFAILURECOUNT, 
            @USERAGENT, @VISITOR, @REQUESTKEY, @RESULT)");
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@USERNAME", DbType.String, username);
            cmd.CreateParameter("@SUCCESS", DbType.Boolean, success);
            cmd.CreateParameter("@INSTANT", DbType.DateTime, instant);
            cmd.CreateParameter("@IPADDRESS", DbType.String, IPAddress);
            cmd.CreateParameter("@USERNAMEFAILURECOUNT", DbType.Int32, usernameFailureCount);
            cmd.CreateParameter("@IPADDRESSFAILURECOUNT", DbType.Int32, IPAddressFailureCount);
            cmd.CreateParameter("@USERAGENT", DbType.String, userAgent);
            cmd.CreateParameter("@VISITOR", DbType.String, visitor);
            cmd.CreateParameter("@REQUESTKEY", DbType.String, requestKey);
            cmd.CreateParameter("@RESULT", DbType.String, result);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetLastFailedLoginAttemptsFromUserOrIp(Transaction tran, int userId, string username, string IPAddress, DateTime since) {
            // **DUPLICATED CODE**
            // If you fix a bug in this query, please review User_GetLastFailedLoginAttempts from Users.oml
            // as code is duplicated in both sides. Thanks.

            Command cmd = tran.CreateCommand(@"SELECT ID, USERID, USERNAME, SUCCESS, INSTANT, IPADDRESS, USERNAMEFAILURECOUNT, IPADDRESSFAILURECOUNT,
                                            USERAGENT, VISITOR, REQUESTKEY, RESULT 
                                            FROM OSSYS_LOGIN_ATTEMPT
                                            WHERE " +
                                               (userId == 0 ? "" : @"USERID=@USERID AND ") +
                                               (StringUtils.IsEmpty(username) ? "" : @"USERNAME=@USERNAME AND ") +
                                               (StringUtils.IsEmpty(IPAddress) ? "" : @"IPADDRESS=@IPADDRESS AND ") +
                                            @"INSTANT>=@DATETIME AND 
                                            SUCCESS=@SUCCESS
                                            ORDER BY INSTANT DESC, ID DESC"); // Order by INSTANT and ID because the instants may be equal and IDs can't.
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@USERNAME", DbType.String, username);
            cmd.CreateParameter("@IPADDRESS", DbType.String, IPAddress);
            cmd.CreateParameter("@DATETIME", DbType.DateTime, since);
            cmd.CreateParameter("@SUCCESS", DbType.Boolean, false);

            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetUserLocks(Transaction tran, int userId, DateTime since) {
            // **DUPLICATED CODE**
            // If you fix a bug in this query, please review GetFailedAttemptsForUser advanced query in User_Show preparation from Users.oml
            // as code is duplicated in both sides. Thanks.

            Command cmd = tran.CreateCommand(@"SELECT ID, USERID, USERNAME, SUCCESS, INSTANT, IPADDRESS, USERNAMEFAILURECOUNT, IPADDRESSFAILURECOUNT,
                                            USERAGENT, VISITOR, REQUESTKEY, RESULT 
                                            FROM OSSYS_LOGIN_ATTEMPT
                                            WHERE ID IN
                                                (SELECT MAX(OSSYS_LOGIN_ATTEMPT.ID) FROM OSSYS_LOGIN_ATTEMPT
                                                WHERE OSSYS_LOGIN_ATTEMPT.SUCCESS = 0
                                                AND OSSYS_LOGIN_ATTEMPT.INSTANT >= @DATETIME
                                                AND (OSSYS_LOGIN_ATTEMPT.RESULT = 'BlockedUser' OR OSSYS_LOGIN_ATTEMPT.RESULT = 'BlockedIP' OR OSSYS_LOGIN_ATTEMPT.RESULT = 'Unblocked')
                                                AND OSSYS_LOGIN_ATTEMPT.USERID = @USERID
                                                GROUP BY OSSYS_LOGIN_ATTEMPT.USERNAME, OSSYS_LOGIN_ATTEMPT.IPADDRESS)
                                            AND OSSYS_LOGIN_ATTEMPT.RESULT <> 'Unblocked'");

            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@DATETIME", DbType.DateTime, since);

            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetIPLocks(Transaction tran, string IPAddress, DateTime since) {
            // **DUPLICATED CODE**
            // If you fix a bug in this query, please review GetFailedAttemptsForUser advanced query in BlockedIPAddresses preparation from Users.oml
            // as code is duplicated in both sides. Thanks.

            Command cmd = tran.CreateCommand(@"SELECT ID, USERID, USERNAME, SUCCESS, INSTANT, IPADDRESS, USERNAMEFAILURECOUNT, IPADDRESSFAILURECOUNT,
                                            USERAGENT, VISITOR, REQUESTKEY, RESULT 
                                            FROM OSSYS_LOGIN_ATTEMPT
                                            WHERE ID IN
                                                (SELECT MAX(OSSYS_LOGIN_ATTEMPT.ID) FROM OSSYS_LOGIN_ATTEMPT
                                                WHERE OSSYS_LOGIN_ATTEMPT.SUCCESS = 0
                                                AND OSSYS_LOGIN_ATTEMPT.INSTANT >= @DATETIME
                                                AND (OSSYS_LOGIN_ATTEMPT.RESULT = 'BlockedIP' OR OSSYS_LOGIN_ATTEMPT.RESULT = 'Unblocked') " +
                                               (StringUtils.IsEmpty(IPAddress) ? "" : @"AND OSSYS_LOGIN_ATTEMPT.IPADDRESS = @IPADDRESS ") +
                                                @"GROUP BY OSSYS_LOGIN_ATTEMPT.IPADDRESS)
                                            AND OSSYS_LOGIN_ATTEMPT.RESULT <> 'Unblocked'");

            //WHY DO WE HAVE ='Unblocked' AND THEN <>'Unblocked'?
            //We want to get the last record associated with the IP address that will tell us if the address is blocked or not. 
            //Then, if that last record represents an 'unblock' that means the IP has no associated lock and it will
            //return an empty result

            cmd.CreateParameter("@IPADDRESS", DbType.String, IPAddress);
            cmd.CreateParameter("@DATETIME", DbType.DateTime, since);

            return cmd.ExecuteReader();
        }
    }
}
