/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Data;
using OutSystems.HubEdition.Extensibility.Data.DMLService;
using OutSystems.Internal.Db;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Cryptography;
using System.Net;
using System.Web;
using System.Collections.Generic;

namespace OutSystems.HubEdition.RuntimePlatform.NewRuntime {

    public class BinaryContentUtils {


        private static readonly string PRIVATE_SALT = "aG5OOTNKM0dYaENoeVFxdGdFSVo0b3U0cWpjcHpHMFVYZFhub0ljdkplck00bkhJSTFEWGJEZXlmMVVKQTRyM09wMUs0ZUFxVUR4UGlRcTl0Qm9ORE5oZlY5UWFsVVZ1eGJQeUViZkJZbWZvc3cwbEdLRmt2VEt2VjlXSU1Fb2Zzd2w2eVE2UlN4NERpQTNQZHFkOGJVcXlRZm81a1czUm1UVkRhT2Exa2xnTmNvY3dxVUhKenBGWk94b2o0d3ltMkJ6aVRnZHBDWUU0UnIzOENvT1VvbDFUM25Xc3FDaWptcWNVZ1RWRHFPSERuSFM5MlFMQ1dZalRoUHh5bmhJMQ==";
        internal static readonly string IMAGES_URL_PWD = "SDcKccsghcUksj9PMTNJMJTSXMuee59YgNgoOxt4naKbbwSKaVuk0f";
        private static string _databaseBinaryEnvironmentPassword;

        internal static string DatabaseBinaryEnvironmentPassword {
            get {
                if (_databaseBinaryEnvironmentPassword == null) {
                    string environmentKey;
                    try {
                        // Check if we can read the key from the file
                        environmentKey = SecureConfidentialInformationEncryption.ReadKeyFromFile(Settings.Get(Settings.Configs.SettingsKeyPath));
                    } catch {
                        environmentKey = IMAGES_URL_PWD;
                    }
                    _databaseBinaryEnvironmentPassword = GuidHelper.GenerateToBase64(PRIVATE_SALT + environmentKey);
                }
                return _databaseBinaryEnvironmentPassword;
            }
        }

        public static string GetDatabaseBinaryRestPath(string consumerEspaceName, string entityGlobalKey, string attributeName, string idValue, int userIdLogged, byte[] binaryData) {
            string entityDetails = SymmCryptHelper.EncryptWithAES256FixedIV(DatabaseBinaryEnvironmentPassword, entityGlobalKey + "/" + attributeName + "/" + idValue + "/" + userIdLogged + "/" + GetBinaryContentHash(binaryData), Convert.FromBase64String(PRIVATE_SALT));
            entityDetails = entityDetails.Replace("+", "-").Replace("/", "_");    /* Replace invalid URL chars */
            return "screenservices/" + consumerEspaceName + "/_BinaryContent/" + entityDetails;
        }

        public static string GetDatabaseBinaryPath(string eSpaceName, string entityName, string attributeName, string idValue, string fileName) {
            string entityDetails = SymmCryptHelper.EncryptWithAES256FixedIV(DatabaseBinaryEnvironmentPassword, entityName + "/" + attributeName + "/" + idValue, Convert.FromBase64String(PRIVATE_SALT));
            entityDetails = entityDetails.Replace("+", "-").Replace("/", "_");    /* Replace invalid URL chars */
            return "/" + eSpaceName + "/_binaryContent" + RuntimePlatformUtils.WebPageExtension + "/" + entityDetails + "/" + fileName;
        }

        public struct DbBinaryConfig {
            public string DBConnection;
            public Func<int?, string, string> EntityGetter;
            public string Attribute;
            public string Id;
            public bool IsAlphaId;
            public DbBinaryConfig(Func<int?, string, string> entityGetter, string attribute, string id, bool isAlphaId)
                    : this(null, entityGetter, attribute, id, isAlphaId) { }

            public DbBinaryConfig(string dbConnection, Func<int?, string, string> entityGetter, string attribute, string id, bool isAlphaId) {
                DBConnection = dbConnection;
                EntityGetter = entityGetter;
                Attribute = attribute;
                Id = id;
                IsAlphaId = isAlphaId;
            }
        }

        public static int GetBinaryContent(Dictionary<string, BinaryContentUtils.DbBinaryConfig> htDbBinaryConfig, string input, int userIdLogged, out byte[] content) {
            string parametersString = input.TrimEnd('/').TrimStart('/').Replace("-", "+").Replace("_", "/");
            parametersString = SymmCryptHelper.DecryptWithAES256FixedIV(BinaryContentUtils.DatabaseBinaryEnvironmentPassword, parametersString, Convert.FromBase64String(PRIVATE_SALT));
            content = null;

            /*
             * 0 => Entity's global object key
             * 1 => Name of the binary data attribute
             * 2 => ID of the record that has the binary data
             * 3 => User ID for which the URL was generated
             * 4 => An hash of the binary data (forces the URL to change when the binary data changes)
             */
            var parameters = parametersString.Split('/');
            if (parameters.Length < 4) {
                return (int)HttpStatusCode.BadRequest;
            }

            var entityGlobalKey = parameters[0].ToLower();
            var attribute = parameters[1].ToLower();
            var id = parameters[2];
            var userId = 0;

            if (int.TryParse(parameters[3], out userId) && userId != userIdLogged) {
                return (int)HttpStatusCode.Unauthorized;
            }

            object objt = htDbBinaryConfig[entityGlobalKey + "/" + attribute];
            if (objt == null) {
                return (int)HttpStatusCode.NotFound;
            }

            DbBinaryConfig dbBinaryConfig;
            dbBinaryConfig = (DbBinaryConfig)objt;

            byte[] buffer = GetDatabaseBinaryAttribute(id, dbBinaryConfig);
            if (buffer == null) {
                return (int)HttpStatusCode.NotFound;
            } else {
                content = buffer;
                return (int)HttpStatusCode.OK;
            }
        }

        /**
         * It should be ok to truncate the hash to a shorter length since we are not worried about collisions here,
         * just trying to force different hashes when the content is updated.
         * 
         * FIPS 180-4 (http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf) specifies that:
         * "Some application may require a hash function with a message digest length different than those provided
         * by the hash functions in this Standard. In such cases, a truncated message digest may be used, whereby a
         * hash function with a larger message digest length is applied to the data to be hashed, and the resulting
         * message digest is truncated by selecting an appropriate number of the leftmost bits".
         **/
        private static string GetBinaryContentHash(byte[] content) {
            return SecureHashHelper.Hash(content).Substring(0, 20);
        }

        public static void DownloadBinary(Hashtable htDbBinaryConfig) {
            HttpRequest request = HttpContext.Current.Request;
            HttpResponse response = HttpContext.Current.Response;

            if ((request.HttpMethod.ToUpper() != "GET") && (request.HttpMethod.ToUpper() != "HEAD")) {
                response.AppendHeader("Allow", "GET, HEAD");
                ResponseError(response, 405, "Method Not Allowed"); 
                return;
            }
            string parametersString = GetParameters(request).TrimEnd('/').TrimStart('/').Replace("-", "+").Replace("_", "/");    /* Replace invalid URL chars */
            parametersString = SymmCryptHelper.DecryptWithAES256FixedIV(BinaryContentUtils.DatabaseBinaryEnvironmentPassword, parametersString, Convert.FromBase64String(PRIVATE_SALT));

            var parameters = parametersString.Split('/');
            if (parameters.Length < 3) {
                ResponseError(response, 400, "Bad Request");
                return;
            }

            var entity = parameters[0].ToLower();
            var attribute = parameters[1].ToLower();
            var id = parameters[2];

            object objt = htDbBinaryConfig[entity + "/" + attribute];
            if (objt == null) {
                ResponseError(response, 404, "Not Found"); 
                return;
            }

            DbBinaryConfig dbBinaryConfig;
            dbBinaryConfig = (DbBinaryConfig)objt;

            byte[] buffer = GetDatabaseBinaryAttribute(id, dbBinaryConfig);
            if (buffer == null) {
                ResponseError(response, 404, "Not Found");
            } else {
                string md5Hash = SecureHashHelper.Hash(buffer);
                response.Clear();
                response.StatusCode = 200; //OK
                response.ContentType = RuntimePlatformUtils.GetMIMEType(buffer);
                response.AppendHeader("ETag", "\"" + md5Hash + "\"");
                response.AppendHeader("Accept-Ranges", "none");
                if (request.HttpMethod.ToUpper() == "GET") {
                    BinaryWrite(response, buffer);
                }
                End(response);
            }
        }

        private static byte[] GetDatabaseBinaryAttribute(string id, DbBinaryConfig dbBinaryConfig) {
            IDMLIdentifiers identifiers = null;
            IDatabaseAccessProvider dbAccessProvider;

            if (string.IsNullOrEmpty(dbBinaryConfig.DBConnection)) {
                dbAccessProvider = DatabaseAccess.ForCurrentDatabase;
                identifiers = DatabaseAccess.ForCurrentDatabase.DatabaseServices.DMLService.Identifiers;
            } else {
                dbAccessProvider = DatabaseAccess.ForDBConnection(dbBinaryConfig.DBConnection);
                identifiers = DatabaseAccess.ForDBConnection(dbBinaryConfig.DBConnection).DatabaseServices.DMLService.Identifiers;
            }

            string selectSQL = "SELECT " + identifiers.EscapeIdentifier(dbBinaryConfig.Attribute.ToUpper()) + " FROM " +
                dbBinaryConfig.EntityGetter(null, BuiltInFunction.GetCurrentLocale()) +
                " WHERE " + identifiers.EscapeIdentifier(dbBinaryConfig.Id.ToUpper()) + " = ";
            if (dbBinaryConfig.IsAlphaId) {
                selectSQL += "'" + BuiltInFunction.EncodeSql(id) + "'";
            } else {
                selectSQL += BuiltInFunction.EncodeSql(id);
            }

            return GetBinaryFromDb(selectSQL, dbBinaryConfig.Attribute, dbAccessProvider);
        }

        private static byte[] GetBinaryFromDb(string sql, string attributeName, IDatabaseAccessProvider dbAccessProvider) {
            using (Transaction trans = dbAccessProvider.GetReadOnlyTransaction()) {
                try {
                    Command cmd = trans.CreateCommand(sql);
                    using (IDataReader reader = cmd.ExecuteReader()) {
                        if ((reader.IsClosed) || (!reader.Read())) {
                            return null;
                        }
                        return ReadBytes(reader, attributeName);
                    }
                } catch (Exception) {
                    return null;
                }
            }
        }


        private static byte[] ReadBytes(IDataReader reader, string attributeName) {
            long size = reader.GetBytes(0, 0, null, 0, 0);
            var buffer = new byte[size];
            reader.GetBytes(0, 0, buffer, 0, buffer.Length);
            return buffer;
        }


        private static string GetParameters(HttpRequest request) {
            return request.PathInfo;
        }


        private static void ResponseError(HttpResponse response, int statusCode, string description) {
            response.Clear();
            response.StatusCode = statusCode;
            Write(response, description);
            End(response);
        }

        private static void BinaryWrite(HttpResponse response, byte[] content) {
            response.BinaryWrite(content);
        }

        private static void Write(HttpResponse response, string content) {
            response.Write(content);
        }

        private static void End(HttpResponse response) {
            response.End();
        }

    }

}
