/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading;
using System.Web;
using System.Web.Caching;
using System.Web.Services.Protocols;
using OutSystems.RuntimeCommon.Cryptography.Insecure;
using OutSystems.HubEdition.RuntimePlatform.Callbacks;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Log;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime.Authentication;

namespace OutSystems.HubEdition.RuntimePlatform {

    public enum EndUserAction {
        Create,
        Update,
        CreateOrUpdate,
        Get,
        GetForUpdate,
        Delete,
    }
    
    public class ExtensionPropertiesCache {
        private Dictionary<int, Dictionary<string, string>> ext_propCache = new Dictionary<int, Dictionary<string, string>>();
        private AppInfo m_parentInfo = null;
        private bool dirty = false;

        public bool AllowLogging(int extensionId) {
            return getPropertyVal(extensionId, "AllowLogging").ToLower() == "true";
        }

        private string getPropertyVal(int extensionId, string propertyName) {
            lock (this) {
                if (dirty) {
                    this.ClearExtensionProperties();
                    initCache();
                    dirty = false;
                }
            }
            Dictionary<string, string> ep;
            lock (this) {
                if (!ext_propCache.TryGetValue(extensionId, out ep)) {
                    ep = new Dictionary<string, string>();
                    ext_propCache.Add(extensionId, ep);
                }
            }
            if (!ep.ContainsKey(propertyName)) {
                string val = "true";

                using (Transaction trans = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                    using (IDataReader reader = DBRuntimePlatform.Instance.GetExtensionConfiguration(trans, extensionId, propertyName)) {
                        while (reader.Read()) {
                            val = (string)reader["Val"];
                        }
                    }
                }
                lock (ep) {
                    ep[propertyName] = val;
                }
            }
            return ep[propertyName];
        }

        public ExtensionPropertiesCache(AppInfo parentInfo) {
            m_parentInfo = parentInfo;
            initCache();
        }

        private void initCache() {
            HttpRuntime.Cache.Insert(
                "ExtensionPropertiesRemCondition" + m_parentInfo.eSpaceId,
                m_parentInfo.eSpaceId,
                AppInfo.CalculateCacheDependency(m_parentInfo.eSpaceId, 0),
                DateTime.Now.AddDays(1),
                TimeSpan.Zero,
                CacheItemPriority.NotRemovable,
                extensionPropertiesRemovedCallback);
        }

        private void extensionPropertiesRemovedCallback(string key, object val, CacheItemRemovedReason reason) {
            lock (this) {
                dirty = true;
            }
        }

        public void ClearExtensionProperties() {
            if (ext_propCache != null) {
                ext_propCache.Clear();
            }
        }
    }

    public class EspaceProperties {

        private Dictionary<string, string> m_eSpaceProperties = new Dictionary<string, string>();

        private int espaceId;

        protected volatile bool Valid = false;

        public EspaceProperties(AppInfo parentInfo) {
            espaceId = parentInfo.eSpaceId;
            loadProperties();
            initCache();
            Valid = true;
        }

        public EspaceProperties(string espaceKey) {
            using (Transaction trans = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                espaceId = DBRuntimePlatform.Instance.GetESpaceIdbyKey(trans, ObjectKey.Parse(espaceKey));
            }

            if (espaceId == 0) {
                throw new Exception("Unable to find espace id with key " + espaceKey);
            }

            loadProperties();
            initCache();
            Valid = true;
        }

        public bool AllowAuditing {
            get {
                return getBoolProp("AllowAuditing", true);
            }
        }

        public bool AllowLogging {
            get {
                return getBoolProp("AllowLogging", true);
            }
        }
        
        public bool ClientSideTracingEnabled {
            get {
                return OSTrace.getRealLogLevel().TraceVerbose ||
                    getBoolPropWithCachedDefault(Settings.Configs.Compiler_ForceClientSideTracing, () => Settings.GetBool(Settings.Configs.Compiler_ForceClientSideTracing));
            }
        }

        public bool RemoteShowStack {
            get {
                return getBoolProp("RemoteShowStack", false);
            }
        }

        public string DefaultDnsName {
            get {
                return getPropWithCachedDefault(Settings.Configs.DefaultDnsName, () => Settings.Get(Settings.Configs.DefaultDnsName));
            }
        }

        public bool EnableEmails {
            get {
                return getBoolPropWithCachedDefault(Settings.Configs.Email_EnableEmails,
                                                      () => Settings.GetBool(Settings.Configs.Email_EnableEmails));
            }
        }

        public bool EspaceApplicationEnabled {
            get {
                return getBoolPropWithCachedDefault("ApplicationEnabled", () => RuntimePlatformUtils.IsApplicationEnabled(espaceId));
            }
        }

        public string TestEmails {
            get {
                return getPropWithCachedDefault(Settings.Configs.Email_TestEmails, () => Settings.Get(Settings.Configs.Email_TestEmails));
            }
        }

        public bool PerformanceMonitoringEnabled {
            get {
                return getBoolPropWithCachedDefault("PerformanceMonitoringEnabled", () => false);
            }
        }

        private void loadProperties() {
            // Init the eSpace properties
            using (Transaction trans = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                using (IDataReader reader = DBRuntimePlatform.Instance.GetEspaceConfigInfo(trans, espaceId)) {
                    m_eSpaceProperties.Clear();
                    while (reader.Read()) {
                        string name = (string)reader["Name"];
                        string val = (string)reader["Val"];
                        m_eSpaceProperties[name] = val;
                    }
                }
            }
        }

        public void initCache() {
            HttpRuntime.Cache.Insert(
                "eSpacePropertiesRemCondition" + espaceId,
                espaceId,
                AppInfo.CalculateCacheDependency(espaceId, 0),
                DateTime.Now.AddDays(1),
                TimeSpan.Zero,
                CacheItemPriority.NotRemovable,
                eSpacePropertiesRemovedCallback);
        }

        private bool toBoolConverter(string value) {
            return value.ToLower() == "true";
        }
        private bool getBoolProp(string name, bool defaultVal) {
            string value;
            if ((value = getProp(name)) != null) {
                return toBoolConverter(value);
            } else {
                return defaultVal;
            }
        }

        private string getPropWithCachedDefault(string name, Func<string> defaultVal) {
            return getPropWithCachedDefault<string>(name, value => value, defaultVal);
        }

        private bool getBoolPropWithCachedDefault(string name, Func<bool> defaultVal) {
            return getPropWithCachedDefault<bool>(name, toBoolConverter, () => defaultVal().ToString());
        }

        private T getPropWithCachedDefault<T>(string name, Func<string, T> converter, Func<string> defaultVal) {
            string value = getProp(name);
            if (value == null) {
                value = defaultVal();
                if (value != null) {
                    lock (this) {
                        m_eSpaceProperties[name] = value;
                    }
                }
            }
            return converter(value);
        }

        private string getProp(string name) {
            if (!Valid) {
                lock (this) {
                    if (!Valid) {
                        loadProperties();
                        initCache();
                        Valid = true;
                    }
                }
            }
            return m_eSpaceProperties.GetValueOrDefault(name);
        }

        private void eSpacePropertiesRemovedCallback(string key, Object val, CacheItemRemovedReason reason) {
            lock (this) {
                Valid = false;
            }
        }

        public void ClearEspaceProperties() {
            espaceId = 0;
            if (m_eSpaceProperties != null) {
                m_eSpaceProperties.Clear();
            }
        }

    }

    /// <summary>
    /// Contains all the information about the tenant.
    /// </summary>
    public class TenantInfo {
        private int _tenantId;

        private string _tenantName;

        private bool _tenantActive;

        private IDictionary<Pair<ObjectKey, int>, string> _phoneNumbers = new Dictionary<Pair<ObjectKey, int>, string>();

        private IDictionary<string, IList<Pair<ObjectKey, int>>> _phoneNodes = new Dictionary<string, IList<Pair<ObjectKey, int>>>();

        private AppInfo _parentApp;

        private static volatile Hashtable locker = Hashtable.Synchronized(new Hashtable());
        protected object GetLockForTenant(int tenantId) {
            if (!locker.ContainsKey(tenantId)) {
                lock (locker) {
                    if (!locker.ContainsKey(tenantId)) {
                        locker.Add(tenantId, new object());
                    }
                }
            }
            return locker[tenantId];
        }

        private Exception _phoneConfigException;

        protected volatile bool Valid = false;

        public AppInfo App {
            get {
                return _parentApp;
            }
        }

        public int Id {
            get {
                return _tenantId;
            }
        }

        private string _tenantIdGuid;
        public string Id_Guid {
            get {
                if (_tenantIdGuid == null) {
                    _tenantIdGuid =
                        MD5GuidHelper.ToGuidWithSaltAndUTF16(_tenantId.ToString(CultureInfo.InvariantCulture), SharedKeys.PrivateSalt()).ToString();
                }
                return _tenantIdGuid;
            }
        }

        public string Name {
            get {
                return _tenantName;
            }
        }

        public bool IsActive {
            get {
                return _tenantActive;
            }
        }

        public Exception PhoneConfigException {
            get {
                checkPhoneNumbersInfoIsValid();
                return _phoneConfigException;
            }
        }

        public SitePropertiesInfo SiteProperties {
            get {
                //_siteProperties.SitePropertiesInvalidated += new SitePropertiesInfoEventHandler(OnSitePropertiesInvalidated);
                return _parentApp.Espace(_parentApp.eSpaceId).EspaceSiteProperties;
            }
        }

        public TenantInfo(int tenantId, AppInfo appInfo) {
            _parentApp = appInfo;

            using (Transaction trans = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                if (tenantId <= 0) {
                    throw (new ArgumentException("Invalid tenant ID given"));
                }
                // Get the tenant info
                _tenantId = 0;
                for (int retry = 3; retry > 0; retry--) {
                    using (IDataReader reader = DBRuntimePlatform.Instance.GetTenantInfo(trans, tenantId)) {
                        if (reader.Read()) {
                            _tenantActive = Convert.ToBoolean(reader["Is_Active"]);
                            _tenantName = (string)reader["Name"];
                            _tenantId = Convert.ToInt32(reader["Id"]);
                            break;
                        }
                    }
                    Thread.Sleep(500);
                }

                if (_tenantId == 0) {
                    // Possibly the dreaded "_t0" error
                    string message = String.Format("Could not fetch Tenant Info from DB for tenant '{0}'", _tenantName);
                    throw new InvalidOperationException(message);
                }
                _phoneConfigException = null;
            }

            initCache();
            Valid = true;
        }

        private bool inInitCache = false;

        private void initCache() {
            lock (GetLockForTenant(this.Id)) {
                if (inInitCache) {
                    return;
                } else {
                    inInitCache = true;
                }
                AggregateCacheDependency dependencies = new AggregateCacheDependency();
                dependencies.Add(AppInfo.CalculateCacheDependency(0, _tenantId));
                dependencies.Add(AppInfo.CalculateCacheDependency(_parentApp.eSpaceId, 0));
                HttpRuntime.Cache.Insert("tenantInfoRemCondition" + _tenantId, _tenantId, dependencies, DateTime.Now.AddDays(1), TimeSpan.Zero, CacheItemPriority.NotRemovable, TenantInfoRemovedCallback);
                inInitCache = false;
            }
        }

        private void TenantInfoRemovedCallback(string key, Object val, CacheItemRemovedReason reason) {
            lock (GetLockForTenant(this.Id)) {
                // Remove the phone numbers
                _phoneNumbers = new Dictionary<Pair<ObjectKey, int>, string>();
                _phoneNodes = new Dictionary<string, IList<Pair<ObjectKey, int>>>();

                // Check if the tenant is still active
                using (Transaction trans = DatabaseAccess.ForSystemDatabase.GetCommitableTransaction()) {
                    _tenantActive = DBRuntimePlatform.Instance.GetTenantActive(trans, _tenantId);
                }
                Valid = false;
                initCache();
            }
        }

        private void LoadPhoneNumbers(int espaceId) {
            IDictionary<Pair<ObjectKey, int>, string> tenantPhoneNumbers;
            IDictionary<string, IList<Pair<ObjectKey, int>>> tenantPhoneNodes;
            _phoneConfigException = null;

            tenantPhoneNumbers = _phoneNumbers;
            tenantPhoneNodes = _phoneNodes;

            lock (GetLockForTenant(this.Id)) {
                using (Transaction tran = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                    // Get the entries associated with this eSpace
                    using (IDataReader reader = DBRuntimePlatform.Instance.GetSMSEntryNodes(tran, this.Id, espaceId)) {
                        while (reader.Read()) {
                            string phone = (string)reader["phone_Number"];
                            ObjectKey node = ObjectKey.Parse(Convert.ToString(reader["ss_Key"]));
                            Pair<ObjectKey, int> pair = new Pair<ObjectKey, int>(node, this.Id);
                            if (phone == null) {
                                // throw
                                _phoneConfigException = new InvalidOperationException(
                                    String.Format("Virtual phone not configured for entry {0} (eSpace {1}, Tenant {2})",
                                        (string)reader["Name"],
                                        _parentApp.eSpaceName, Name));
                            }

                            // add to node->phone list
                            tenantPhoneNumbers[pair] = phone;

                            // add to phone->node list
                            IList<Pair<ObjectKey, int>> phoneNumbersList;
                            if (!tenantPhoneNodes.TryGetValue(phone, out phoneNumbersList)) {
                                phoneNumbersList = new List<Pair<ObjectKey, int>>();
                                tenantPhoneNodes[phone] = phoneNumbersList;
                            }
                            phoneNumbersList.Add(pair);
                        }
                    }
                }
            }
        }

        public string GetPhoneNumber(string numberKey, int espaceId) {
            return GetPhoneNumber(ObjectKey.Parse(numberKey), espaceId);
        }

        public string GetPhoneNumber(ObjectKey numberKey, int espaceId) {
            checkPhoneNumbersInfoIsValid();
            lock (GetLockForTenant(this.Id)) {
                Pair<ObjectKey, int> pair = new Pair<ObjectKey, int>(numberKey, this.Id);
                if (!_phoneNumbers.ContainsKey(pair)) {
                    LoadPhoneNumbers(espaceId);
                }
                string number;
                if (!_phoneNumbers.TryGetValue(pair, out number)) {
                    using (Transaction tran = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                        string phoneName = DBRuntimePlatform.Instance.GetSMSEntryNodeName(tran, numberKey);
                        string eSpaceName = DBRuntimePlatform.Instance.GetEspaceName(tran, espaceId);
                        throw new Exception("No phone associated for '{0}' on Tenant '{1}' for eSpace '{2}'.".F(phoneName, this.Name, eSpaceName));
                    }
                }
                return number;
            }
        }

        public IList<ObjectKey> GetPhoneNodes(string number, int espaceId) {
            checkPhoneNumbersInfoIsValid();
            lock (GetLockForTenant(this.Id)) {
                if (!_phoneNodes.ContainsKey(number)) {
                    LoadPhoneNumbers(espaceId);
                }

                IList<Pair<ObjectKey, int>> list;
                if (!_phoneNodes.TryGetValue(number, out list)) {
                    using (Transaction tran = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                        string eSpaceName = DBRuntimePlatform.Instance.GetEspaceName(tran, espaceId);
                        throw new Exception("No Applications phones associated with number {0} on Tenant '{1}' for eSpace '{2}' were found.".F(number, this.Name, eSpaceName));
                    }
                }
                return list.Where(pair => pair.Second == this.Id).Select(pair => pair.First).ToList();
            }
        }

        private void checkPhoneNumbersInfoIsValid() {
            if (!Valid) {
                lock (GetLockForTenant(this.Id)) {
                    if (!Valid) {
                        LoadPhoneNumbers(this._parentApp.eSpaceId);
                        initCache();
                        Valid = true;
                    }
                }
            }
        }

        public void ClearTenantInfo() {
            lock (GetLockForTenant(this.Id)) {
                if (_phoneNumbers != null) {
                    _phoneNumbers.Clear();
                    _phoneNumbers = null;
                }
                if (_phoneNodes != null) {
                    foreach (var nodeList in _phoneNodes.Values) { nodeList.Clear(); }
                    _phoneNodes.Clear();
                    _phoneNodes = null;
                }
            }

            _parentApp = null;
            _phoneConfigException = null;
        }

    }

    /// <summary>
    /// This class is used to store information about the Ajax event triggered by the client
    /// </summary>
    public class AjaxEventContextInfo {
        private int _documentWidth;
        private int _documentHeight;
        private string _elementId;
        private int _elementOffsetTop;
        private int _elementOffsetLeft;
        private int _scrollOffsetTop;
        private int _scrollOffsetLeft;
        private int _mouseX;
        private int _mouseY;
        private string _notifyMessage;

        /// <summary>
        /// Builds an empty AjaxEventContextInfo
        /// </summary>
        public AjaxEventContextInfo() {
            _documentWidth = 0;
            _documentHeight = 0;
            _elementId = "";
            _elementOffsetTop = 0;
            _elementOffsetLeft = 0;
            _scrollOffsetTop = 0;
            _scrollOffsetLeft = 0;
            _mouseX = 0;
            _mouseY = 0;
            _notifyMessage = "";
        }

        /// <summary>
        /// Builds the AjaxEventContentInfo based on the ajax request value
        /// </summary>
        /// <param name="ajaxRequestArgs"></param>
        public AjaxEventContextInfo(string ajaxRequestArgs) {
            string[] args = ajaxRequestArgs.Split(',');
            _documentWidth = Int32.Parse(args[0]);
            _documentHeight = Int32.Parse(args[1]);
            _elementId = args[2];
            _elementOffsetTop = Int32.Parse(args[3]);
            _elementOffsetLeft = Int32.Parse(args[4]);
            _scrollOffsetTop = Int32.Parse(args[5]);
            _scrollOffsetLeft = Int32.Parse(args[6]);
            _mouseX = Int32.Parse(args[7]);
            _mouseY = Int32.Parse(args[8]);

            // get the notify argument
            System.IO.StringWriter writer = new StringWriter();
            for (int i = 9; i < args.Length; i++) {
                if (i > 9)
                    writer.Write(',');
                writer.Write(args[i]);
            }
            _notifyMessage = writer.ToString();
        }


        /// <summary>
        /// The document element width property
        /// </summary>
        public int DocumentWidth {
            get {
                return _documentWidth;
            }
        }

        /// <summary>
        /// The document element heigth property
        /// </summary>
        public int DocumentHeight {
            get {
                return _documentHeight;
            }
        }

        /// <summary>
        /// The id of the element that triggered the event
        /// </summary>
        public string ElementId {
            get {
                return _elementId;
            }
        }

        /// <summary>
        /// The absolute vertical position of the element that triggered the event
        /// </summary>
        public int ElementOffsetTop {
            get {
                return _elementOffsetTop;
            }
        }

        /// <summary>
        /// The absolute horizontal position of the element that triggered the event
        /// </summary>
        public int ElementOffsetLeft {
            get {
                return _elementOffsetLeft;
            }
        }

        /// <summary>
        /// The vertical viewport position
        /// </summary>
        public int ScrollOffsetTop {
            get {
                return _scrollOffsetTop;
            }
        }

        /// <summary>
        /// The horizontal viewport position
        /// </summary>
        public int ScrollOffsetLeft {
            get {
                return _scrollOffsetLeft;
            }
        }

        /// <summary>
        /// The absolute horizontal mouse position
        /// </summary>
        public int MouseX {
            get {
                return _mouseX;
            }
        }


        /// <summary>
        /// The absolute vertical mouse position 
        /// </summary>
        public int MouseY {
            get {
                return _mouseY;
            }
        }

        /// <summary>
        /// The text message used while invoking the notify method.
        /// </summary>
        public string NotifyMessage {
            get {
                return _notifyMessage;
            }
            set {
                _notifyMessage = value;
            }
        }

        /// <summary>
        /// Gets the Ajax event context info of a given context
        /// </summary>
        /// <param name="context"></param>
        /// <returns>A new instance of an AjaxEventContextInfo.</returns>
        [System.Diagnostics.DebuggerNonUserCode]
        public static AjaxEventContextInfo GetAjaxEventContextInfo(HttpContext context) {

            // get the ajax request value
            string ajaxRequestArgs = null;
            if (ValidRequestForAjax(context)) {
                try {
                    ajaxRequestArgs = context.Request["__AJAX"];
                } catch { }
            }
            if (ajaxRequestArgs != null) {
                // this is an Ajax request
                return new AjaxEventContextInfo(ajaxRequestArgs);
            } else {
                // no ajax event context for non-ajax requests
                return new AjaxEventContextInfo();
            }
        }

        private static bool ValidRequestForAjax(HttpContext context) {
            return true;
        }

    }

    /// <summary>
    /// Class that is is used to store the information about the application.
    /// THIS CLASS IS USED EXTERNALLY. WE CANNOT BREAK THIS INTERFACE.
    /// </summary>
    // DO NOT REMOVE sealed qualifier
    public sealed class AppInfo : IMobileLoginCookieNamer {
        private const string APP_CACHE_FILE_PREFIX = "appCacheFile_";

        private readonly int _eSpaceId;

        private readonly ObjectKey _eSpaceUID;

        private readonly string _eSpaceName;

        private readonly int _eSpaceVersionId;

        private readonly int _eSpaceVersionPublishingId;

        private readonly int _eSpaceVersion;

        private int _applicationId;

        private ObjectKey _applicationUID;

        private string _applicationName;

        private JQueryVersion _jQueryVersion;

        private readonly string _frontendName;

        private readonly string _environmentKey;

        private readonly string _environmentName;

        private readonly bool _isMultitenant;

        private readonly bool _isUserProvider;

        private readonly bool _isMobileRuntime;

        private readonly Hashtable _tenants = Hashtable.Synchronized(new Hashtable());

        private readonly ObjectKey _userProviderEspaceKey;

        private readonly int _userProviderId;

        private readonly string _userProviderName;

        private readonly object _injectionCacheLockingObject = new object();

        private readonly static object _scIdLockingObject = new object();

        private volatile InjectionCache _injectionCache = null;

        private bool _needsToTouchSC = false;

        private volatile Callbacks.CallbackResultStorage _callbackStorage = null;
        public readonly EspaceProperties Properties;

        public readonly ExtensionPropertiesCache ExtensionProperties;

        private static string _cacheControlPath;

        private volatile Dictionary<int, EspaceInfo> _espaces = new Dictionary<int, EspaceInfo>();

        public EspaceInfo Espace(int espaceId) {
            EspaceInfo espaceInfo;
            if (!_espaces.TryGetValue(espaceId, out espaceInfo)) {
                lock (_espaces) {
                    if (!_espaces.TryGetValue(espaceId, out espaceInfo)) {
                        espaceInfo = new EspaceInfo(espaceId, this);
                        _espaces[espaceId] = espaceInfo;
                    }
                }
            }
            return espaceInfo;
        }

        // SEO information

        private Dictionary<string, string> DBGetESpacePrettyNames() {
            Dictionary<string, string> _PrettyNameCache = new Dictionary<string, string>();

            using (Transaction trans = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                using (IDataReader reader = DBRuntimePlatform.Instance.GetEspacePrettyNames(trans)) {
                    while (reader.Read()) {
                        _PrettyNameCache[((string)reader["Translation"]).Substring(1).ToLower()] =
                            ((string)reader["Incoming"]) + "/";
                    }
                }
            }
            return _PrettyNameCache;
        }


        private Dictionary<string, List<string>> DBGetPageRules(int eSpaceId) {

            Dictionary<string, List<string>> _PageRulesCache = new Dictionary<string, List<string>>();

            using (Transaction tran = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                using (IDataReader reader = DBRuntimePlatform.Instance.GetPageRules(tran, eSpaceId)) {
                    while (reader.Read()) {
                        string targetPage = (string)reader["TargetPage"];
                        if (!_PageRulesCache.ContainsKey(targetPage)) {
                            _PageRulesCache.Add(targetPage, new List<string>());
                        }
                        _PageRulesCache[targetPage].Add((string)reader["Incoming"]);
                    }
                }
            }
            return _PageRulesCache;
        }

        public Dictionary<string, List<string>> GetPageRules(int eSpaceId) {
            Func<int, Dictionary<string, List<string>>> rules = DBGetPageRules;
            return AppCache.GetESpaceCachedValue(eSpaceId, "PageRules", ServiceCenterId, rules);
        }

        public Dictionary<string, string> GetESpacePrettyNames() {
            return AppCache.GetESpaceCachedValue<Dictionary<string, string>>("PrettyNameCache", ServiceCenterId, DBGetESpacePrettyNames);
        }

        private static int _ServiceCenterId = 0;

        public static int ServiceCenterId {
            get {
                if (_ServiceCenterId == 0) {
                    lock (_scIdLockingObject) {
                        using (Transaction tran = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                            _ServiceCenterId = DBRuntimePlatform.Instance.GetEspaceId(tran, Constants.ServiceCenterName);
                        }
                    }
                }
                return _ServiceCenterId;
            }
        }


        // The user variables
        private Hashtable _variables = new Hashtable();

        public object this[string name] {
            get {
                if (_variables[name] == null) {
                    return null;
                }
                return _variables[name];
            }
            set {
                _variables[name] = value;
            }
        }

        #region Activation

        #region Development Limitations

        private string _developmentLimitURLParameter = string.Empty;
        private string DevelopmentLimitURLParameter {
            get { return _developmentLimitURLParameter; }
            set { _developmentLimitURLParameter = value ?? string.Empty; }
        }

        private string _developmentLimitWatermark = string.Empty;
        private string DevelopmentLimitWatermark {
            get { return _developmentLimitWatermark; }
            set { _developmentLimitWatermark = value ?? string.Empty; }
        }

        public string GetURLParameter() {
            return DevelopmentLimitURLParameter;
        }

        public string GetWatermark() {
            if (string.IsNullOrEmpty(DevelopmentLimitWatermark)) {
                return DevelopmentLimitWatermark;
            } else {
                string sessionId = HttpContext.Current.Session.SessionID;
                HttpCookie cookie = HttpContext.Current.Request.Cookies.Get("OSWatermark");
                if (null != cookie && sessionId == cookie.Value) {
                    if (HttpContext.Current.Session.IsNewSession) {
                        cookie.Value = "Reset";
                        HttpContext.Current.Response.Cookies.Add(cookie);
                    } else {
                        return string.Empty;
                    }
                }
                return DevelopmentLimitWatermark.Replace("[SessionId]", sessionId);
            }
        }

        #region Callback debug Information

        public string GetCallbackDebugInformation() {
            string ssInformation = string.Empty;
            int userId = (int)OsContext.Session.UserId;

            ssInformation += "<br/>";
            ssInformation += "------------------------------------------------CALLBACK DEBUG INFORMATION----------------------------------------------------<br/>";

            ssInformation += CallbackResultStorage.GetPropertyText("eSpace Id", eSpaceId);
            ssInformation += CallbackResultStorage.GetPropertyText("eSpace Name", eSpaceName);
            ssInformation += CallbackResultStorage.GetPropertyText("eSpace Version", eSpaceVersion);
            ssInformation += CallbackResultStorage.GetPropertyText("User Id", userId);
            ssInformation += CallbackResultStorage.GetPropertyText("User Name", OsContext.Session.UserName);
            ssInformation += CallbackResultStorage.GetPropertyText("OsContext.ResponseDisabledFeedback", OsContext.ResponseDisabledFeedback);
            ssInformation += CallbackResultStorage.GetPropertyText("OsContext.ResponseDisabledTaskBox", OsContext.ResponseDisabledTaskBox);
            ssInformation += CallbackResults.GetDebugInformation();
            ssInformation += OsContext.Session.CallbackResults.GetDebugInformation();
            ssInformation += OsContext.CallbackResults.GetDebugInformation();
            return ssInformation;
        }

        #endregion
        public void EvaluateJavascriptCacheInvalidation() {
            if (_needsToTouchSC) {
                _needsToTouchSC = false;
                GenericExtendedActions.EspaceInvalidate(OsContext, ServiceCenterId, 0);
            }
        }

        public string GetInjectedContent(CodeInjectionFactory.Locations location, bool allowsCallbacks, string webScreenKey, string webScreenName) {
            InjectionCache cache;
            Callbacks.CallbackPageContext context = null;

            lock (_injectionCacheLockingObject) {
                cache = InjectionCache;
            }
            if (allowsCallbacks) {
                context = new Callbacks.CallbackPageContext(OsContext, ObjectKey.Parse(webScreenKey), webScreenName);
            }
            if (location == CodeInjectionFactory.Locations.HeadTop) { // run only in the first call (assuming HeadTop as the first)
                cache.RunCallbacks(this, OsContext.Session, Callbacks.CallbackEvent.PageRender);
            }
            return cache.RetrieveContentInjection(location, allowsCallbacks, this, OsContext.Session, context).StrCat(string.Empty);
        }

        #endregion Development Limitations
        // When Detaching, we don't want to validate End-Users limitation
        public void CheckUserLimit(Transaction trans, EndUserAction action, int userId, bool toBeActive, int limit, 
                Func<int> usageGetter, string errorMessageCreate, string errorMessageBecameActive) {
        }

        public void ValidateEndUserAction(Transaction trans, EndUserAction action, int userId, bool toBeActive) {
        }

        #region Selective Logging

        private bool _selectiveLogging = false;

        public bool SelectiveLoggingEnabled {
            get {
                return _selectiveLogging;
            }
        }

        #endregion

        #region Application Monitoring

        private bool _applicationMonitoring = false;

        public bool ApplicationMonitoringEnabled {
            get {
                return _applicationMonitoring;
            }
        }

        #endregion

        public bool LogAsynchronousEnabled { get; private set; }

        #region Multilingual

        private bool _multilingual = false;

        public bool MultilingualEnabled {
            get {
                return _multilingual;
            }
        }

        #endregion

        #region Requests per Minute

        private int _runtimeLimitRequests = -1;

        private volatile object _nextRequest = DateTime.Now;

        public void NotifyBeginRequest() {
            if (_runtimeLimitRequests > 0) {
                bool wait = true;
                do {
                    wait = DateTime.Now < ((DateTime)_nextRequest);

                    if (wait) {
                        Thread.Sleep(10);
                    }
                } while (wait);

                _nextRequest = DateTime.Now.AddMilliseconds((int)Math.Ceiling(60.0 * 1000.0 / _runtimeLimitRequests));
            }
        }

        #endregion Requests per Minute


        #region Platform Extensibility APIs

        private bool _platformExtensibilityAPIs = false;

        internal bool PlatformExtensibilityAPIsEnabled {
            get {
                return _platformExtensibilityAPIs;
            }
        }

        internal void CheckPlatformExtensibilityAPIs() {
            if (!PlatformExtensibilityAPIsEnabled) {
                throw new LicensingException("Your platform license does not allow you to use Platform Extensibility APIs. You must request a new platform license to use this feature.");
            }
        }

        #endregion Platform Extensibility APIs

        #region Multi-tenancy

        private bool multitenancyAllowed = true;

        internal void CheckMultitenancy() {
            if (!multitenancyAllowed) {
                throw new LicensingException("Your platform license does not allow you to use Multi-Tenancy. You must request a new platform license to use this feature.");
            }
        }

        #endregion Multi-tenancy

        #endregion Activation

        // TODO: Use GUID to get espace id.
        public int eSpaceId {
            get {
                return _eSpaceId;
            }
        }

        public string eSpaceUID {
            get {
                return ObjectKeyUtils.DatabaseValue(_eSpaceUID);
            }
        }

        public ObjectKey eSpaceUIDAsKey {
            get {
                return _eSpaceUID;
            }
        }

        public string eSpaceName {
            get {
                return _eSpaceName;
            }
        }

        public int eSpaceVersionId {
            get {
                return _eSpaceVersionId;
            }
        }

        public int eSpaceVersion {
            get {
                return _eSpaceVersion;
            }
        }

        public int eSpaceVersionPublishingId {
            get {
                return _eSpaceVersionPublishingId;
            }
        }

        public IEnumerable<string> GetApplicationEspaceNames() {

            List<string> espaceNames = new List<string>();
            using (Transaction tran = DatabaseAccess.ForSystemDatabase.GetCommitableTransaction()) {
                using (IDataReader reader = DBRuntimePlatform.Instance.GetApplicationEspaceNames(tran, ApplicationId)) {
                    try {
                        while (reader.Read()) {
                            espaceNames.Add(reader.SafeGet<string>("NAME"));
                        }

                        return espaceNames;
                    } catch (Exception e) {
                        ErrorLog.StaticWrite(DateTime.Now, "", eSpaceId, 0, 0, e.Message, e.StackTrace, "GetApplicationEspaceNames");
                        return new List<string>();
                    }
                }
            }
        }

        // Fetches the information about the application directly from the database
        private Dictionary<string, Object> GetApplicationDataFromDB() {
            using (Transaction tran = DatabaseAccess.ForSystemDatabase.GetCommitableTransaction()) {
                using (IDataReader reader = DBRuntimePlatform.Instance.GetApplicationOfEspace(tran, eSpaceId)) {
                    try {
                        var appData = new Dictionary<string, Object>();

                        if (reader.Read()) {
                            appData.Add("ApplicationId", reader.SafeGet<int>("ApplicationId"));
                            appData.Add("ApplicationKey", ObjectKey.Parse(reader.SafeGet<string>("ApplicationKey")) ?? ObjectKey.Dummy);
                            appData.Add("ApplicationName", reader.SafeGet<string>("ApplicationName"));
                        }

                        return appData;
                    } catch (Exception e) {
                        ErrorLog.StaticWrite(DateTime.Now, "", eSpaceId, 0, 0, e.Message, e.StackTrace, "GetApplicationData");
                        return new Dictionary<string, Object>();
                    }
                }
            }
        }

        private Dictionary<string, Object> GetApplicationData() {
            return AppCache.GetESpaceCachedValue<Dictionary<string, Object>>("ApplicationData" + eSpaceId, eSpaceId, GetApplicationDataFromDB);
        }

        public int ApplicationId {
            get {
                Dictionary<string, Object> appData = GetApplicationData();
                object cachedValue;

                if (appData.TryGetValue("ApplicationId", out cachedValue)) {
                    _applicationId = (int)cachedValue;
                }

                return _applicationId;
            }
        }

        // This property is espace specific (inside references we need to use the references espace id)
        private Dictionary<int, bool> _ForceScreenSecurity = new Dictionary<int, bool>();


        public bool IsForcingSecurityForScreens(int eSpaceId) {   
           return false;
        }


        private void InvalidateForceScreenSecurity(string key, object value, CacheItemRemovedReason reason) {
            lock (_ForceScreenSecurity) {
                int eSpaceId = Convert.ToInt32(key.Split(' ')[1]);
                _ForceScreenSecurity.Remove(eSpaceId);
            }
        }

        public bool IsHSTSEnabled() {
           return false;
        }

        public bool IsForcingSecurityForIntegrations() {
           return false;
        }

        public bool IsForcingContentSecurityPolicy() {
        return false;
        }

        public string GetBaseUri() {
        return "";
        }

        public string GetChildSrc() {
        return "";
        }

        public string GetConnectSrc() {
        return "";
        }

        public string GetDefaultSrc() {
        return "";
        }

        public string GetFontSrc() {
        return "";
        }

        public string GetImgSrc() {
        return "";
        }

        public string GetMediaSrc() {
        return "";
        }

        public string GetObjectSrc() {
        return "";
        }

        public string GetPluginTypes() {
        return "";
        }

        public string GetScriptSrc() {
        return "";
        }

        public string GetStyleSrc() {
        return "";
        }

        public string GetFrameAncestors() {
        return "";
        }

        public string GetReferrer() {
        return "";
        }

        public string GetReportTo() {
        return "";
        }

        public string GetOtherDirective() {
        return "";
        }

        public string ApplicationUID {
            get {
                return ObjectKeyUtils.DatabaseValue(ApplicationUIDAsKey);
            }
        }

        public ObjectKey ApplicationUIDAsKey {
            get {
                Dictionary<string, Object> appData = GetApplicationData();
                object cachedValue;

                if (appData.TryGetValue("ApplicationKey", out cachedValue)) {
                    _applicationUID = (ObjectKey)cachedValue;
                }

                return _applicationUID;
            }
        }

        public string ApplicationName {
            get {
                Dictionary<string, Object> appData = GetApplicationData();
                object cachedValue;

                if (appData.TryGetValue("ApplicationName", out cachedValue)) {
                    _applicationName = (string)cachedValue;
                }

                return _applicationName;
            }
        }

        public JQueryVersion JQueryVersion {
            get {
                return _jQueryVersion;
            }
        }

        public string FrontendName {
            get {
                return _frontendName;
            }
        }

        public string EnvironmentKey {
            get {
                return _environmentKey;
            }
        }

        public string EnvironmentName {
            get {
                return _environmentName;
            }
        }

        public string CacheInvalidationURLSuffix {
            get {
                return _eSpaceVersionPublishingId.ToString();
            }
        }

        public bool IsMultiTenant {
            get {
                return _isMultitenant;
            }
        }

        public bool IsMobileRuntime {
            get {
                return _isMobileRuntime;
            }
        }

        public bool IsLoadingScreen {
            get {
                return Convert.ToBoolean(HttpContext.Current.Items["osIsLoadingScreen"]);
            }
            set {
                HttpContext.Current.Items["osIsLoadingScreen"] = value;
            }
        }

        public string PtaName {
            get {
                return GetRequestPtaName(HttpRuntime.AppDomainAppVirtualPath);
            }
        }

        public string PtaUserName {
            get {
                return (string)HttpContext.Current.Items["osCurrentPTAUserName"];
            }
        }

        public string PtaPath {
            get {
                return (PtaName == "" ? "" : PtaName + "/");
            }
        }

        [Obsolete("Deprecated. Use eSpaceName instead.")]
        public string TenantPath {
            get {
                return eSpaceName;
            }
        }

        public TenantInfo Tenant {
            get {
                int currentTenantId = OsContext.Session.TenantId;

                if (_tenants[currentTenantId] == null) {
                    lock (_tenants) {
                        if (_tenants[currentTenantId] == null) {
                            TenantInfo tenant;

                            try {
                                tenant = new TenantInfo(currentTenantId, this);
                            } catch (Exception e) {
                                throw new InvalidOperationException("Error creating tenant", e);
                            }

                            _tenants[currentTenantId] = tenant;
                        }
                    }
                }
                TenantInfo info = (TenantInfo)_tenants[currentTenantId];
                // Paranoia check (#27345)
                if (info != null && info.Id == 0) {
                    string espaceName = "";
                    try {
                        espaceName = info.App.eSpaceName;
                    } catch {
                    }
                    try {
                        HeContext context = null;
                        try { context = info.App.OsContext; } catch { }
                        Log.ErrorLog.LogApplicationError("Invalid TenantInfo found for eSpace '" + espaceName + ". Discarding it.", "", context, "RuntimePlatform");
                    } catch {
                    }
                    _tenants.Remove(currentTenantId);
                    info = null;
                }
                return info;
            }
        }

        public ObjectKey UserProviderEspaceKeyAsKey {
            get {
                return _userProviderEspaceKey;
            }
        }

        public string UserProviderEspaceKey {
            get {
                return ObjectKeyUtils.DatabaseValue(_userProviderEspaceKey);
            }
        }

        public int UserProviderId {
            get {
                return _userProviderId;
            }
        }

        public string UserProviderName {
            get {
                return _userProviderName;
            }
        }

        [Obsolete("Deprecated. Please use OsContext.Session.TenantId instead.")]
        public int UserProviderTenantId {
            get {
                return OsContext.Session.TenantId;
            }
        }

        public string VisitId {
            get {
                return (string)Context.Items["osVisit"];
            }
        }

        public string VisitorId {
            get {
                return (string)Context.Items["osVisitor"];
            }
        }

        public const string CookieNameSeparationChar = ".";
        public string PersitentLoginCookieName {
            get {
                string cookieName = string.Empty;

                if (!string.IsNullOrEmpty(UserProviderName)) {
                    cookieName = UserProviderName;
                } else {
                    cookieName = eSpaceName;
                    if (IsMultiTenant) {
                        cookieName += CookieNameSeparationChar + Tenant.Name;
                    }
                }
                return cookieName;
            }
        }

        public const string SFPSuffix = "sid";
        public string SessionFixationProtectionCookieName {
            get {
                string cookieName = PersitentLoginCookieName;
                cookieName += CookieNameSeparationChar + SFPSuffix;

                return cookieName;
            }
        }

        public string SessionFixationProtection {
            get {
                return (string)Context.Items[SessionFixationProtectionCookieName];
            }
        }

        public MobileLoginConfiguration GetMobileLoginConfigurations() {

            string loginConfigurationCacheName = "MobileLoginConfiguration" + eSpaceId;

            MobileLoginConfiguration configuration = HttpRuntime.Cache.Get(
                loginConfigurationCacheName
            ) as MobileLoginConfiguration;

            if (configuration != null) {
                return configuration;
            }

            using (var trans = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                configuration = DBRuntimePlatform.Instance.GetMobileLoginConfiguration(trans, UserProviderEspaceKeyAsKey);
            }

            AggregateCacheDependency dependencies = new AggregateCacheDependency();
            dependencies.Add(CalculateCacheDependency(eSpaceId, 0));
            dependencies.Add(CalculateCacheDependency(ServiceCenterId, 0));

            HttpRuntime.Cache.Insert(
                loginConfigurationCacheName,
                configuration,
                dependencies,
                DateTime.Now.AddDays(1),
                TimeSpan.Zero,
                CacheItemPriority.NotRemovable,
                null);

            return configuration;
        }
        
        public HttpContext Context {
            get {
                return HttpContext.Current;
            }
        }

        private bool InvalidOsContext() {
            if (RuntimePlatformUtils.IsJava()) {
                return Context == null;
            } else {
                return Context == null || Context.Items == null;
            }
        }

        public HeContext OsContext {
            get {
                if (InvalidOsContext()) {
                    return null;
                }
                if (Context.Items["osContext"] == null) {
                    Context.Items["osContext"] = new HeContext();
                }
                return (HeContext)Context.Items["osContext"];
            }
            set {
                Context.Items["osContext"] = value;
            }
        }

        public string AppInfoCacheFileName {
            get {
                return GetAppInfoCacheFileName(_eSpaceName);
            }
        }

        public int GetApplicationDefaultTimeout() {
            using (Transaction transaction = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                var value = DBRuntimePlatform.GetAppParameterValue(transaction, Settings.AppConfigs.ApplicationDefaultTimeout, ApplicationId);
                return (value != null ? Convert.ToInt32(value) : 0);
            }
        }
        
        public static string CacheControlPath {
            get {
                if (_cacheControlPath == null) {
                    lock (typeof(AppInfo)) {
                        string path = Settings.Get(Settings.Configs.Cache_ControlPath);
                        if (!path.IsEmpty() && !path.EndsWith(FileSystemUtils.PathSeparator)) {
                            path = path + FileSystemUtils.PathSeparator;
                        }
                        _cacheControlPath = path ?? string.Empty;
                    }
                }
                return _cacheControlPath;
            }
        }

        private static string GetCacheControlFile(int espaceId, int tenantId) {
            return CacheControlPath + "cacheFile" + (espaceId > 0 ? ("_e" + espaceId) : "") + (tenantId > 0 ? ("_t" + tenantId) : "") + RuntimePlatformUtils.CACHE_CONTROL_FILE_EXT;
        }

        public static IEnumerable<string> CalculateCacheDependencyFiles(int espaceId, int tenantId) {
            if (espaceId == 0 || tenantId == 0) {
                yield return GetCacheControlFile(espaceId, tenantId);
            } else {
                if (espaceId != 0) {
                    yield return GetCacheControlFile(espaceId, 0);
                }
                if (tenantId != 0) {
                    yield return GetCacheControlFile(0, tenantId);
                }
                yield return GetCacheControlFile(espaceId, tenantId);
            }
        }

        public static AggregateCacheDependency CalculateCacheDependency(int espaceId, int tenantId) {
            AggregateCacheDependency dependencies = new AggregateCacheDependency();
            CalculateCacheDependencyFiles(espaceId, tenantId).Apply(depFile => dependencies.Add(new CacheDependency(depFile)));
            return dependencies;
        }

        private string GetQueryString(HttpRequest request) {
            if (null == request.QueryString) {
                return string.Empty;
            } else {
                return request.QueryString.ToString();
            }
        }

        public bool IsApplicationEnabled {
            get {
                bool isApplicationEnabled = Properties.EspaceApplicationEnabled;
                bool isTenantActive = Tenant.IsActive;

                if (!isApplicationEnabled || !isTenantActive) {
                    if (!isTenantActive) {
                        //if we failed because of a disabled espace, try to clear the session to proceed with a default one
                        OsContext.Session.Clear();
                        isTenantActive = Tenant.IsActive;
                    }
                    if (!isApplicationEnabled || !isTenantActive) {
                        return false;
                    }
                }
                return true;
            }
        }

        public void CheckIsApplicationEnabled() {
            if (!IsApplicationEnabled) {
                throw new Exception("The Application is offline." + (Tenant.IsActive ? "" : (" Tenant " + Tenant.Name + " is disabled.")));
            }
        }

        public AppInfo(ESpaceInfoForAppStart eSpaceInfo) {
            using (Transaction tran = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                string eSpaceName = eSpaceInfo.ESpaceName;
                int runningespaceId = eSpaceInfo.ESpaceId;
                _jQueryVersion = eSpaceInfo.ESpaceJQueryVersion;

                for (int retry = 3; retry > 0; retry--) {
                    // Load the eSpace definition from the DB.
                    using (IDataReader reader = DBRuntimePlatform.Instance.GetPublishedEspaceInfo(tran, runningespaceId)) {
                        if (reader.Read()) {
                            _eSpaceId = reader.SafeGet<int>("Id");
                            _eSpaceUID = ObjectKey.Parse(reader.SafeGet<string>("SS_Key")) ?? ObjectKey.Dummy;
                            _eSpaceName = eSpaceName;
                            _eSpaceVersionId = reader.SafeGet<int>("Version_Id");
                            _eSpaceVersion = reader.SafeGet<int>("Version");
                            _eSpaceVersionPublishingId = reader.SafeGet<int>("Publishing_Id");
                            _isMultitenant = reader.SafeGet<bool>("Is_Multitenant");
                            _isUserProvider = reader.SafeGet<bool>("Is_User_Provider");
                            _applicationId = reader.SafeGet<int>("ApplicationId");
                            _applicationUID = ObjectKey.Parse(reader.SafeGet<string>("ApplicationKey")) ?? ObjectKey.Dummy;
                            _applicationName = reader.SafeGet<string>("ApplicationName");
                            _isMobileRuntime = reader.SafeGet<string>("EspaceKind") == RuntimeConstants.RuntimeKind.Mobile;
                            break;
                        } else {
                            Thread.Sleep(500);
                        }
                    }
                }
                // Sanity check because of tenantid=0 and/or espaceid=0 error (#27345)
                if (_eSpaceId <= 0 || _eSpaceName.IsEmpty()) {
                    throw new InvalidOperationException("Invalid eSpace info provided to AppInfo : eSpace Id: " + _eSpaceId + ", eSpace Name: '" + _eSpaceName + "'");
                }
            }

            using (Transaction tran = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                _frontendName = DBRuntimePlatform.Instance.GetCurrentServerName(tran);
                _environmentKey = DBRuntimePlatform.Instance.GetEnvironmentKey(tran);
                _environmentName = DBRuntimePlatform.Instance.GetEnvironmentName(tran);
            }

            // store this app in the HttpContext
            SetAppInfo(HttpContext.Current, this);
            // Init the properties
            Properties = new EspaceProperties(this);
            ExtensionProperties = new ExtensionPropertiesCache(this);

            _applicationMonitoring = true; // enable application monitoring for SC
            _selectiveLogging = true; // enable selective for SC
            _multilingual = true; // enable multilingual for ECT, EM, ...

            LogAsynchronousEnabled = Settings.GetBool(Settings.Configs.Log_SupportAsynchronousLog) &&
                                    (RuntimePlatformUtils.IsJava() || Settings.GetBool(Settings.Configs.DotNet_QueuesAvailable));
            // enable log asynchronous by default

            _platformExtensibilityAPIs = true; // enable APIs by default

            // Keep this logic outside the limits check, this info is needed for session information and unified login will not work correctly
            // Load user provider eSpace information
            using (Transaction tran = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                _userProviderEspaceKey = ObjectKey.Parse(DBRuntimePlatform.Instance.GetUserProviderKey(tran, _eSpaceUID));

                if (_userProviderEspaceKey != null) {
                    _userProviderId = DBRuntimePlatform.Instance.GetESpaceIdbyKey(tran, _userProviderEspaceKey);
                    _userProviderName = DBRuntimePlatform.Instance.GetEspaceName(tran, _userProviderEspaceKey);
                } else {
                    // The current tenant is its own user provider
                    _userProviderEspaceKey = _eSpaceUID;
                    _userProviderId = _eSpaceId;
                    _userProviderName = _eSpaceName;
                }

                if (_userProviderId == 0) {
                    throw new InvalidOperationException("Invalid eSpace info. Could not find the User Provider in this server.");
                }
            }
        }

        #region Callbacks

        public InjectionCache InjectionCache {
            get {
                if (_injectionCache == null) {
                    lock (_injectionCacheLockingObject) {
                        if (_injectionCache == null) {
                            _injectionCache = BuildInjectionCache();
                        }
                    }
                }
                return _injectionCache;
            }
        }
        public Callbacks.CallbackResultStorage CallbackResults {
            get {
                if (_callbackStorage == null) {
                    lock (_injectionCacheLockingObject) {
                        if (_callbackStorage == null) {
                            _callbackStorage = new Callbacks.CallbackResultStorage();
                        }
                    }
                }
                return _callbackStorage;
            }
        }

        public void InvalidateInjectionCache() {
            lock (_injectionCacheLockingObject) {
                _needsToTouchSC = true;
            }
        }

        public void InvalidateCallbackCache() {
            lock (_injectionCacheLockingObject) {
                _injectionCache = null;
                _callbackStorage = null;
            }
        }

        private InjectionCache BuildInjectionCache() {

            using (Transaction tran = DatabaseAccess.ForSystemDatabase.GetCommitableTransaction()) {
                bool IsCallbackProviderWithHide = DBRuntimePlatform.Instance.IsCallbackProviderWithHideSetting(tran, eSpaceName);

                using (IDataReader reader = DBRuntimePlatform.Instance.GetExternalCodeByEspaceOrApplication(tran, eSpaceId, ApplicationUID, eSpaceUID)) {
                    try {
                        return CodeInjectionFactory.Instance.ReadInjectionElements(reader, _eSpaceUID, IsCallbackProviderWithHide);
                    } catch (Exception e) {
                        ErrorLog.StaticWrite(DateTime.Now, "", eSpaceId, 0, 0, e.Message, e.StackTrace, "InjectionCache");
                        return CodeInjectionFactory.Instance.EmptyInjectionCache();
                    }
                }
            }
        }

        [ThreadStatic]
        private static bool insertingCache = false;

        public void SetupInvalidateCallbackCache() {
            if (!insertingCache && HttpRuntime.Cache.Get("callbackCache" + eSpaceId) == null) { // prevent double inserts and overflows
                insertingCache = true;

                var mydep = CalculateCacheDependency(eSpaceId, 0);
                var scdep = CalculateCacheDependency(ServiceCenterId, 0);
                var aggregate = new AggregateCacheDependency();
                aggregate.Add(mydep);
                aggregate.Add(scdep);

                HttpRuntime.Cache.Insert(
                        "callbackCache" + eSpaceId,
                        eSpaceId,
                        aggregate,
                    DateTime.Now.AddDays(1),
                    TimeSpan.Zero,
                    CacheItemPriority.NotRemovable,
                    InvalidateCallbackCacheCallback);
                insertingCache = false;
            }
        }


        private void InvalidateCallbackCacheCallback(string key, object value, CacheItemRemovedReason reason) {
            HeContext context = null;
            try { context = OsContext; } catch { }
            lock (_injectionCacheLockingObject) {
                try {
                    InvalidateCallbackCache();
                    if (reason != CacheItemRemovedReason.Removed) {
                        InjectionCache.RunCallbacks(this, null, Callbacks.CallbackEvent.InvalidateCache, eSpaceId, null);
                    }
                } catch (Exception e) {
                    ErrorLog.LogApplicationError(e, context, "RuntimePlatform");
                } finally {
                    SetupInvalidateCallbackCache();
                }
            }
        }

        #endregion

        #region New Runtime Cookies

        private string CookieSuffix {
            get {
                if (string.IsNullOrEmpty(UserProviderName)) {
                    return eSpaceName;
                } else {
                    return UserProviderName;
                }
            }
        }

        public string UserAccessibleLoginCookieName {
            get { return "nr2" + CookieSuffix; }
        }

        public string HttpOnlyLoginCookieName {
            get { return "nr1" + CookieSuffix; }
        }

        public string CSRFHeaderName {
            get { return "X-CSRFToken"; }
        }

        #endregion

        internal static void GetAppInfoInformation(out int espaceid, out int tenantid, out string sessionid, out int userid) {
            espaceid = 0;
            tenantid = 0;
            userid = 0;
            sessionid = "";

            if (HttpContext.Current != null) {
                AppInfo info = (AppInfo)HttpContext.Current.Application["appInfo"];

                if (info != null) {
                    HeContext heContext = info.OsContext;
                    espaceid = info.eSpaceId;
                    try { tenantid = info.Tenant.Id; } catch { }
                    try { sessionid = heContext.Session.SessionID; } catch { }
                    try { userid = heContext.Session.UserId; } catch { }
                }
            }
        }


        public static AppInfo GetAppInfo(HttpContext context) {
            var info = (AppInfo)context.Application["appInfo"];
            return info;
        }

        public static AppInfo GetAppInfo() {
            AppInfo info = null;
            if (HttpContext.Current != null) {
                info = GetAppInfo(HttpContext.Current);
            }

            // Paranoia check (#27345)
            if (info != null && info.eSpaceId == 0) {
                int tenantId = 0;
                try {
                    tenantId = info.Tenant.Id;
                } catch {
                }
                try {
                    HeContext context = null;
                    try { context = info.OsContext; } catch { }
                    Log.ErrorLog.LogApplicationError("Invalid AppInfo found for eSpace '" + info.eSpaceName + "' with TenantId=" + tenantId + ". Discarding it.", "", context, "RuntimePlatform");
                } catch {
                }
                SetAppInfo(HttpContext.Current, null);
                info = null;
            }
            return info;
        }

        public static void SetAppInfo(HttpContext context, AppInfo appInfo) {
            context.Application["appInfo"] = appInfo;
        }

        [Obsolete("This API is Obsolete and has moved to the Settings.Get(name)")]
        public static string GetParameter(string name) {
            return Settings.Get(name);
        }

        [Obsolete("This API is Obsolete and has moved to the Settings.Get(name)")]
        public static string GetParameter(string name, bool isNodeSetting) {
            return Settings.Get(name);
        }

        [Obsolete("This API is Obsolete and has moved to the Settings.Get(name, transaction)")]
        public static string GetParameter(string name, bool isNodeSetting, Transaction transaction) {
            return Settings.Get(name, transaction);
        }

        [Obsolete("This API is Obsolete and has moved to the Settings.Set(name, value)")]
        public static void SetParameter(string name, string val) {
            Settings.Set(name, val);
        }

        [Obsolete("This API is Obsolete and has moved to the Settings.Set(name, value)")]
        public static void SetParameter(string name, string val, bool isNodeParameter) {
            Settings.Set(name, val);
        }

        public void ClearAppInfo() {
            if (_tenants != null) {
                foreach (TenantInfo tenant in _tenants.Values) {
                    tenant.ClearTenantInfo();
                }
                _tenants.Clear();
            }

            if (this.Properties != null) {
                Properties.ClearEspaceProperties();
            }
            if (this.ExtensionProperties != null) {
                ExtensionProperties.ClearExtensionProperties();
            }
        }

        public static string GetRequestPtaName(string applicationPath) {
            // Note: The first element of the path is empty
            string[] path = applicationPath.Split('/');
            Trace.Assert(path.Length <= 3, "Invalid path: " + applicationPath);

            // Pta from request path
            return (path.Length == 3) ? path[path.Length - 1] : String.Empty;
        }

        public static string GetAppInfoCacheFileName(string eSpaceName) {
            return CacheControlPath + APP_CACHE_FILE_PREFIX + eSpaceName + RuntimePlatformUtils.CACHE_CONTROL_FILE_EXT;
        }
    }

    public class WSEnhancementsElementWithSoapHeaders : WSEnhancementsElement {

        public WSEnhancementsElementWithSoapHeaders(string WRName)
            : base(WRName) {
        }

        private Func<SoapUnknownHeader[]> _getSoapHeaders;

        public SoapUnknownHeader[] SOAPHeaders {
            get {
                return _getSoapHeaders();
            }
        }

        private static string GetHeadersKey(bool isWebService, bool forExtension, string name) {
            if (name == null)
                name = "_";
            return name + (isWebService ? "Service" : "Reference") + (forExtension ? "Extension" : "Internal");
        }

        public static SoapUnknownHeader[] GetHeaders(HeContext context, string name, bool isWebService, bool forExtension) {
            string key = GetHeadersKey(isWebService, forExtension, name);
            WSEnhancementsElementWithSoapHeaders elem = (WSEnhancementsElementWithSoapHeaders)getElementFromContext(context, key);
            return elem == null ? null : elem.SOAPHeaders;
        }

        public static void SetHeaders(HeContext context, string name, bool isWebService, bool forExtension, SoapUnknownHeader[] headers) {
            SetHeadersDataSource(context, name, isWebService, forExtension, () => headers);
        }

        public static void SetHeadersDataSource(HeContext context, string name, bool isWebService, bool forExtension, Func<SoapUnknownHeader[]> headersDataSource) {
            string key = GetHeadersKey(isWebService, forExtension, name);
            Hashtable WSEnhancementsHt = (Hashtable)context.Context.Items["WSEnhancementsHashtable"];
            if (WSEnhancementsHt == null) {
                WSEnhancementsHt = new Hashtable();
                WSEnhancementsElementWithSoapHeaders elem = new WSEnhancementsElementWithSoapHeaders(key);
                elem._getSoapHeaders = headersDataSource;
                WSEnhancementsHt.Add(elem.Wrname, elem);
            } else {
                WSEnhancementsElementWithSoapHeaders elem = (WSEnhancementsElementWithSoapHeaders)WSEnhancementsHt[key];
                if (elem == null) {
                    elem = new WSEnhancementsElementWithSoapHeaders(key);
                    elem._getSoapHeaders = headersDataSource;
                    WSEnhancementsHt.Add(elem.Wrname, elem);
                } else {
                    elem._getSoapHeaders = headersDataSource;
                }

            }
            context.Context.Items["WSEnhancementsHashtable"] = WSEnhancementsHt;
        }
    }

    //deprecated class, do not use this one (here because EnhancedWebReferences Extension use this
    //we cannot use the soapunknown header class here because EnhancedWebReferences will get this error
    //The type 'System.Web.Services.Protocols.SoapUnknownHeader' is defined in an assembly that is not referenced.
    public class WSEnhancementsElement {

        protected string _wrname;

        public string Wrname {
            get {
                return _wrname;
            }
            set {
                _wrname = value;
            }
        }

        protected string _url;

        public string Url {
            get {
                return _url;
            }
            set {
                if (value.Length == 0) {
                    _url = null;
                } else {
                    _url = value;
                }
            }
        }

        protected string _username;

        public string Username {
            get {
                return _username;
            }
            set {
                _username = value;
            }
        }

        protected string _password;

        public string Password {
            get {
                return _password;
            }
            set {
                _password = value;
            }
        }

        protected string _proxyUrl;

        public string ProxyUrl {
            get {
                return _proxyUrl;
            }
            set {
                _proxyUrl = value;
            }
        }

        protected string _proxyUsername;

        public string ProxyUsername {
            get {
                return _proxyUsername;
            }
            set {
                _proxyUsername = value;
            }
        }

        protected string _proxyPassword;

        public string ProxyPassword {
            get {
                return _proxyPassword;
            }
            set {
                _proxyPassword = value;
            }
        }

        public WSEnhancementsElement() {

        }

        public WSEnhancementsElement(string WRName) {
            _wrname = WRName;
        }
        public WSEnhancementsElement(string WRName, string url) {
            _wrname = WRName;
            _url = url;
        }

        public WSEnhancementsElement(string WRName, string username, string password) {
            _wrname = WRName;
            _username = username;
            _password = password;
        }

        public WSEnhancementsElement(string WRName, string proxyUrl, string proxyUsername, string proxyPassword) {
            _wrname = WRName;
            _proxyUrl = proxyUrl;
            _proxyUsername = proxyUsername;
            _proxyPassword = proxyPassword;
        }

        protected static WSEnhancementsElement getElementFromContext(HeContext context, string ssWebServiceName) {
            Hashtable wsEnhancementsHt = (Hashtable)context.Context.Items["WSEnhancementsHashtable"];
            if (wsEnhancementsHt != null) {
                return (WSEnhancementsElement)wsEnhancementsHt[ssWebServiceName];
            } else {
                return null;
            }
        }

        public static string getWSUrl(HeContext context, string ssWebServiceName, string backupUrl) {
            return getWSUrl(context, ssWebServiceName, backupUrl, null);
        }

        public static string getWSUrl(HeContext context, string ssWebServiceName, string backupUrl,
                                      WSEnhancementsElement elem) {
            if (elem == null) {
                elem = getElementFromContext(context, ssWebServiceName);
            }
            if (elem != null && !string.IsNullOrEmpty(elem.Url)) {
                
                return elem.Url;
            } else {
                
                return backupUrl;
            }
        }

        public static void setWSCredentials(HeContext context, string ssWebServiceName, SoapHttpClientProtocol ws) {
            setWSCredentials(context, ssWebServiceName, ws, null);
        }

        public static void setWSCredentials(HeContext context, string ssWebServiceName, SoapHttpClientProtocol ws,
                                            WSEnhancementsElement elem) {
            if (elem == null) {
                elem = getElementFromContext(context, ssWebServiceName);
            }

            
            if (elem != null && !string.IsNullOrEmpty(elem.Username)) {
                ws.Credentials = getNetworkCredential(elem.Username, elem.Password);
            } else {
                ws.Credentials = null;
            }
        }

        private static NetworkCredential getNetworkCredential(string username, string password) {
            string domainUserName, domainName;
            int posSeparator = username.IndexOf('\\');
            if (posSeparator >= 0) {
                domainName = username.Substring(0, posSeparator);
                domainUserName = username.Substring(posSeparator + 1);
                return new NetworkCredential(domainUserName, password, domainName);
            }
            return new NetworkCredential(username, password);
        }

        public static void setWSProxy(HeContext context, string ssWebServiceName, SoapHttpClientProtocol ws) {
            setWSProxy(context, ssWebServiceName, ws, null);
        }

        public static void setWSProxy(HeContext context, string ssWebServiceName, SoapHttpClientProtocol ws,
                                            WSEnhancementsElement elem) {
            if (elem == null) {
                elem = getElementFromContext(context, ssWebServiceName);
            }
            if (elem == null || elem.ProxyUrl == null) {
                return;
            }
            WebProxy proxy = new WebProxy(elem.ProxyUrl);
            if (!string.IsNullOrEmpty(elem.ProxyUsername)) {
                proxy.Credentials = getNetworkCredential(elem.ProxyUsername, elem.ProxyPassword);
            }
            ws.Proxy = proxy;
        }

        public static void RefreshWSElement(HeContext context, System.Web.Services.Protocols.SoapHttpClientProtocol ws, string ssWebServiceName, string backupUrl) {
            WSEnhancementsElement elem = getElementFromContext(context, ssWebServiceName);
            string wsURL = getWSUrl(context, ssWebServiceName, backupUrl, elem);

            
            ws.Url = wsURL;

            
            setWSProxy(context, ssWebServiceName, ws, elem);
            setWSCredentials(context, ssWebServiceName, ws, elem);
        }
    }
}
