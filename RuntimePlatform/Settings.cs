/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml;
using OutSystems.Internal.Db;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform {
    public class Settings {
        public const string DefaultInstanceName = "DEFAULT";
        public static string AlternateConfigFile = null;

        public class AppConfigs {

            public const string EnablePreloader = "Precaching.EnablePreloader";
            public const string PreloaderCustomCSS = "Precaching.PreloaderCustomCSS";
            public const string PreloaderCustomHTML = "Precaching.PreloaderCustomHTML";

            public const string ApplicationDefaultTimeout = "ApplicationDefaultTimeout";
        }

        public class Configs {

            // Global
            public const string InstanceName = "Installation.InstanceName";
            public const string ServerKind = "ServerKind";
            public const string ApplicationServerVersion = "ApplicationServerVersion";
            public const string ApplicationServerPort = "ApplicationServerPort";
            public const string ApplicationServerSecurePort = "ApplicationServerSecurePort";
            public const string ExcelTemplateFilePath = "OutSystems.HubEdition.ExcelTemplateFilePath";
            public const string GenerateLegacyExcell2003 = "OutSystems.HubEdition.GenerateLegacyExcell2003";
            public const string BulkSmsMaxDestinations = "OutSystems.HubEdition.BulkSmsMaxDestinations";
            public const string SettingsKeyPath = "OutSystems.HubEdition.SettingsKeyPath";

            // TODO: Remove the following line to remove brute force manifest generation
            public const string BruteForceManifestGeneration = "OutSystems.HubEdition.BruteForceManifestGeneration";

            // Warning this setting (Cache_ControlPath) in SandboxMode MUST be specific for each Sandbox.
            public const string Cache_ControlPath = "Cache.ControlPath";


            //List of trustable ip ranges. When set, the GetIP() or GetRequestRealIP() will use the client ip from the 
            //header X-Forwarded-For
            public const string TrustedProxyAddresses = "OutSystems.HubEdition.InternalNetwork.TrustedProxyAddresses";
            public const string EnableTrustedProxies = "OutSystems.HubEdition.InternalNetwork.EnableTrustedProxies";
            public const string EnableInternalNetworkNewBehaviour = "OutSystems.HubEdition.InternalNetwork.EnableBehaviour";
            // this setting is deprecated, and is kept here just because of the upgrader to the new setting
            public const string InternalNetwork_IPAdresses = "OutSystems.HubEdition.InternalNetwork.IPAdresses";
            //New OSSYS_PARAMETER that contains a list of ip addresses for the internal network, this is to deprecate the above
            //parameter without causing downtime
            public const string InternalNetwork_IPAdressList = "OutSystems.HubEdition.InternalNetwork.IPAdressList";
            public const string QueryTimeout = "OutSystems.HubEdition.QueryTimeout";
            public const string UpdateDBTimeout = "OutSystems.HubEdition.UpdateDBTimeout";
            public const string Db_UsingIntegratedAuth = "Db.UsingIntegratedAuth";
            public const string IntrospectionQueryTimeout = "OutSystems.HubEdition.IntrospectionQueryTimeout";
            public const string CompressHttpAjaxResponse = "OutSystems.HubEdition.CompressHttpAjaxResponse";
            public const string DefaultErrorPage = "OutSystems.HubEdition.DefaultErrorPage";
            public const string OSVersion = "OSVersion";
            public const string InstallerId = "InstallerId";
            public const string Service_WaitForDebugger = "Service.WaitForDebugger";
            public const string UnifiedEspaceKey = "OutSystems.HubEdition.UnifiedEspaceKey";
            public const string OutgoingIPAddress = "OutSystems.HubEdition.OutboundIPAddress";
            public const string IgnoreEspaceBasedOnPrevious = "OutSystems.HubEdition.IgnoreEspaceBasedOnPrevious";
            public const string DefaultWebReferenceTimeoutMs = "OutSystems.HubEdition.DefaultWebReferenceTimeoutMs";
            public const string InternalAddress = "InternalAddress"; // loopback IP/hostname
            public const string DisableMetricsToNetwork = "OutSystems.HubEdition.DisableMetricsToNetwork";
            public const string DisableMetricsCollect = "OutSystems.HubEdition.DisableMetricsCollect";
            public const string EnableExternalAuthenticationProvider = "ServiceCenter.EnableExternalAuthenticationProvider";
            public const string ForceEncryptedDatabaseImagePages = "OutSystems.HubEdition.ForceEncryptedDatabaseImagePages";
            public const string UseShortRequestsOnDebugger = "OutSystems.HubEdition.UseShortRequestsOnDebugger";
            public const string AllowDebuggingMobileAppsFromAnyIP = "OutSystems.HubEdition.AllowDebuggingMobileAppsFromAnyIP";
            public const string RequiresSoapHeadersSlowRetrieval = "OutSystems.HubEdition.RequiresSoapHeadersSlowRetrieval";
            public const string TenantIdsUpgraded = "OutSystems.ConfigurationTool.TenantIdsUpgraded";
            public const string DateFormat = "dateFormat";
            public const string Version = "version";
            public const string LastUpgradeVersion = "lastupgradeversion";
            public const string PreviousLastUpgradeVersion = "previouslastupgradeversion";
            public const string DisableCompilationCaches = "OutSystems.HubEdition.DisableCompilationCaches";

            public const string PluginDirectory = "OutSystems.PluginDirectory";
            public const string IntegrationLogMaxMessageSizeForLogServer = "OutSystems.IntegrationLogMaxMessageSizeForLogServer";

            public const string DisableOptimisticIntrospection = "OutSystems.HubEdition.DisableOptimisticIntrospection";

#if JAVA

            public const string AcceptedLicenseAgreementInVersion = "OutSystems.AcceptedLicenseAgreementInVersion";
            public const string ApplicationServerProductName = "ApplicationServerProductName";

#endif

            //Other
            public const string Oracle_CI_AI = "OutSystems.HubEdition.Oracle_AI";
            public const string Oracle_DDL_LOCK_TIMEOUT_InSeconds = "OutSystems.HubEdition.Oracle_DDL_LOCK_TIMEOUT_InSeconds";
            public const string Oracle_GetDateFunction = "OutSystems.HubEdition.Oracle_GetDateFunction";
            public const string IPv6_LogBindErrors = "OutSystems.HubEdition.IPv6.LogBindErrors";
            public const string HTTPtoHTTPSproxyHeader = "OutSystems.HubEdition.HTTPtoHTTPSproxyHeader";
            public const string QueryRecursionLimit = "OutSystems.HubEdition.QueryRecursionLimit";
            public const string SupportLegacyAuthentication = "OutSystems.HubEdition.SupportLegacyAuthentication";
            public const string SupportUnifiedMDC = "OutSystems.HubEdition.SupportUnifiedMDC";
            public const string SupportPre801SerialMechanism = "OutSystems.HubEdition.SupportPre801SerialMechanism";
            public const string JavascriptAPI_ShowHiddenFields = "OutSystems.HubEdition.JavascriptAPI_ShowHiddenFields";
            public const string ForceAppCacheUsage = "OutSystems.HubEdition.ForceAppCacheUsage";

            // Login
            public const string RememberLoginTimeoutInDays = "OutSystems.HubEdition.RememberLoginTimeoutInDays";
            public const string MobileLogin_Persistent_MaxIdleTimeInDays = "OutSystems.HubEdition.MobileLogin_Persistent_MaxIdleTimeInDays";
            public const string MobileLogin_Persistent_CookieExpirationInDays = "OutSystems.HubEdition.MobileLogin_Persistent_CookieExpirationInDays";
            public const string MobileLogin_Session_MaxIdleTimeInMinutes = "OutSystems.HubEdition.MobileLogin_Session_MaxIdleTimeInMinutes";
            public const string MobileLogin_CacheTimeInMinutes = "OutSystems.HubEdition.MobileLogin_CacheTimeInMinutes";

            // Used to sign and ecrypt mobile login cookie values
            public const string AuthenticationHMACKey = "OutSystems.HubEdition.MobileLogin_AuthenticationHMACKey";
            public const string AuthenticationEncryptKey = "OutSystems.HubEdition.MobileLogin_AuthenticationEncryptKey";

            // Session configuration
            public const string SessionVersion = "SessionVersion";
            public const string SessionCleanUpEnabled = "SessionCleanUpEnabled";
            public const string SessionCleanUpIntervalInSeconds = "SessionCleanUpIntervalInSeconds";
            public const string EnforceSessionCookiesHttpOnly = "OutSystems.HubEdition.EnforceSessionCookiesHttpOnly";
            public const string EnforceSessionCookiesSecure = "OutSystems.HubEdition.EnforceSessionCookiesSecure";

            // DotNet only
            public const string DotNet_SkipLateLoadBin = "SkipLateLoadBin";
            public const string DotNet_QueuesAvailable = "OutSystems.HubEdition.QueuesAvailable";
            public const string DotNet_SCProxyUserName = "OutSystems.SC.ProxyUserName";
            public const string DotNet_SCProxyPassword = "OutSystems.SC.ProxyPassword";

            // IIS only
            public const string IIS_DefaultApplicationPool = "IIS.DefaultApplicationPool";
            public const string IIS_DefaultWebSiteName = "IIS.DefaultWebSiteName";
            public const string IIS_SetHttpCompression = "IIS.SetHttpCompression";
            public const string IIS_CacheControlMaxAge = "IIS.CacheControlMaxAge";
            public const string IIS_OsISAPIFilterEnabled = "IIS.OsISAPIFilterEnabled";

            // Java only
            public const string Java_PropertiesDir = "OutSystems.HubEdition.PropertiesDir";
            public const string Java_InstallDir = "Java.InstallDir";
            public const string Ant_LibsDir = "Ant.LibsDir";
            public const string Request_Timeout = "OutSystems.HubEdition.RequestTimeout";
            public const string Session_Timeout = "OutSystems.HubEdition.SessionTimeout";
            public const string RMI_RegistryPort = "OutSystems.HubEdition.RMIRegistryPort";
            public const string JDBCPoolInactivityTimeout = "OutSystems.OJDBCPool.InactivityTimeout";
            public const string JDBCPoolMaxPoolSize = "OutSystems.OJDBCPool.MaxPoolSize";
            public const string JDBCPoolMinPoolSize = "OutSystems.OJDBCPool.MinPoolSize";
            public const string SessionJDBCMaxConnectionReuseTimeoutInSecs = "OutSystems.OJDBCPool.SessionMaxConnectionReuseTimeoutInSecs";

#if JAVA
                        
            public const string SynchronousCleanOsheCompClassLoader = "SynchronousCleanOsheCompClassLoader";

#endif

            // Compiler
            public const string Compiler_DatabaseUnicodeSupport = "Compiler.DatabaseUnicodeSupport";
            public const string Compiler_DatabaseUnicodeSupportShadow = "Shadow.Compiler.DatabaseUnicodeSupport";
            public const string Compiler_targetOutput = "Compiler.targetOutput";
            public const string Compiler_Optimize = "Compiler.Optimize";
            public const string Compiler_dontCatchExceptions = "Compiler.dontCatchExceptions";
            public const string Compiler_compressViewState = "Compiler.compressViewState";
            public const string Compiler_genCompLogFile = "Compiler.genCompLogFile";
            public const string Compiler_genQueriesCoverageCode = "Compiler.genQueriesCoverageCode";
            public const string Compiler_SigDbgFilesPath = "Compiler.SigDbgFilesPath";
            public const string Compiler_WSDLCheckTimeout = "Compiler.WSDLCheckTimeout";
            public const string Compiler_TestGraphAlgorithm = "Compiler.TestGraphAlgorithm";
            public const string Compiler_SharpTranslatorEXE = "Compiler.SharpTranslatorEXE";
            public const string Compiler_GraphLinearizationSrcPath = "Compiler.GraphLinearizationSrcPath";
            public const string Compiler_DefaultPhysicalTableName = "Compiler.DefaultPhysicalTableName";
            public const string Compiler_RelativeFullCompilationPath = "Compiler.RelativeFullCompilationPath";
            public const string Compiler_ParalelizeUpdateDbScript = "Compiler.ParalelizeUpdateDbScript";
            public const string Compiler_EnforceIndent = "Compiler.EnforceIndent";
            public const string Compiler_EnforceExcelColumnMatch = "Compiler.EnforceExcelColumnMatch";
            public const string Compiler_UseCacheInvalidationSuffix = "Compiler.UseCacheInvalidationSuffix";
            public const string Compiler_Oracle_Introspection_Method = "Compiler.OracleIntrospectionMethod";
            public const string Compiler_MDC_SkipRevokes = "Compiler.MDCSkipRevokes";
            public const string Compiler_ForceIE8CompatibilityMode = "Compiler.ForceIE8CompatibilityMode";
            public const string Compiler_X_UA_Compatible = "Compiler.X-UA-Compatible";
            public const string Compiler_genTestAction = "Compiler.Compiler_genTestAction";
            public const string Compiler_SMS_Delivery_EnableSessionState = "Compiler.SMS_Delivery_EnableSessionState";
            public const string Compiler_MaximumNumberOfSMS = "Compiler.MaximumNumberOfSMS";
            public const string Compiler_ForceNewLineAfterWebBlockInstance = "Compiler.ForceNewLineAfterWebBlockInstance";
            public const string Compiler_ForceCallbacks = "Compiler.ForceCallbacks";
            public const string Compiler_DisableFirstLoadImprovements = "Compiler.DisableFirstLoadImprovements";
            public const string Compiler_DotNetTargetFramework = "Compiler.DotNetTargetFramework";
            public const string Compiler_DotNetCompilerExtraFlags = "Compiler.DotNetCompilerExtraFlags";
            public const string Compiler_CssCompilationStrategy = "Compiler.CssCompilationStrategy";
            public const string Compiler_EnablePrecacheSupport = "Compiler.EnablePrecacheSupport";
            public const string Compiler_EnableOnNotifyServerSide = "Compiler.EnableOnNotifyServerSide";
            public const string Compiler_DevUseOSPerformanceModule = "Compiler.DevUseOSPerformanceModule";
            public const string Compiler_BeautifyJS = "Compiler.BeautifyJS";
            public const string Compiler_ForceDumpSourceMaps = "Compiler.ForceDumpSourceMaps";
            public const string Compiler_SupportSurrogatePairs_BuiltInFunctions = "Compiler.SupportSurrogatePairs.BuiltInFunctions";
            public const string Compiler_SupportSurrogatePairs_JS = "Compiler.SupportSurrogatePairs.JavaScript";
            public const string Compiler_AllowCommentHints = "Compiler.AllowCommentHints";
            public const string Compiler_ForceClientSideTracing = "Compiler.ForceClientSideTracing";
            public const string Compiler_DumpOldBinaryEndpoint = "Compiler.DumpOldBinaryEndpoint";

            // Authentication
            public const string ForceSecureAlgorithmsInAuthentication = "OutSystems.HubEdition.ForceSecureAlgorithmsInAuthentication";
            public const string PasswordUpgradeOnLogin = "OutSystems.HubEdition.PasswordUpgradeOnLogin";
            public const string Authentication_UpdateUserLastLogin = "OutSystems.Authentication.UpdateUserLastLogin";

            // Security settings
            public const string EnableSessionFixationProtection = "EnableSessionFixationProtection";
            public const string SessionFixationAllowedOverlapWindowInSecs = "SessionFixationAllowedOverlapWindowInSecs";
            public const string DebugSessionFixationProtection = "DebugSessionFixationProtection";

            public const string EnableHSTS = "EnableHSTS";
            public const string EnableContentSecurityPolicy = "EnableContentSecurityPolicy";
            public const string EnableSecurityFeaturesISA = "EnableSecurityFeaturesISA";
            public const string ForceIntegrationSecurity = "ForceIntegrationSecurity";
            public const string ForceScreensSecurity = "ForceScreensSecurity";
            public const string EnableSecurityFeaturesForMobile = "EnableSecurityFeaturesForMobile";

            public const string EnableBruteForceProtection = "EnableBruteForceProtection";
            public const string EnableBruteForceProtectionPerIP = "EnableBruteForceProtectionPerIP";

            public const string InvalidLoginCheckWindow = "InvalidLoginCheckWindowInMinutes";
            public const string MaxUsernameAttemptsFirstBackoff = "MaxUsernameAttemptsFirstBackoff";
            public const string MaxUsernameAttemptsSecondBackoff = "MaxUsernameAttemptsSecondBackoff";
            public const string UsernameAttemptsFirstBackoffDelay = "UsernameAttemptsFirstBackoffDelayInSeconds";
            public const string UsernameAttemptsSecondBackoffDelay = "UsernameAttemptsSecondBackoffDelayInSeconds";

            public const string MaxIPAttemptsFirstBackoff = "MaxIPAttemptsFirstBackoff";
            public const string MaxIPAttemptsSecondBackoff = "MaxIPAttemptsSecondBackoff";
            public const string IPAttemptsFirstBackoffDelay = "IPAttemptsFirstBackoffDelayInSeconds";
            public const string IPAttemptsSecondBackoffDelay = "IPAttemptsSecondBackoffDelayInSeconds";
            
            public const string PlatformAuditing_DispatcherURL = "OutSystems.Security.PlatformAuditing.DispatcherURL";
            public const string PlatformAuditing_DispatcherSecret = "OutSystems.Security.PlatformAuditing.DispatcherSecret";
            public const string PlatformAuditing_DispatcherTimeoutInMs = "OutSystems.Security.PlatformAuditing.DispatcherTimeoutInMs";

            // Database Translations Override
            public const string Compiler_TranslationsOverride_UseDBTranslations = "Compiler.TranslationsOverride_UseDBTranslations";
            public const string Compiler_TranslationsOverride_TranslateAllResources = "Compiler.TranslationsOverride_TranslateAllResources";

            // Compiler Service
            public const string CompilerService_ConfigFile = "CompilerService.exe.config";
            public const string CompilerService_CompilerTimeOut = "CompilerService.CompilerTimeOut";
            public const string CompilerService_LibsDir = "CompilerService.LibDir";
            public const string CompilerService_ThirdPartyLibsDir = "CompilerService.ThirdPartyLibDir";
            public const string CompilerService_RuntimePlatformUtil = "CompilerService.RuntimePlatformUtil";
            public const string CompilerService_ConnectorsDirectory = "CompilerService.ConnectorsDirectory";
            public const string CompilerService_RuntimePlatform = "CompilerService.RunTimePlatform";
            public const string CompilerService_Auditing = "CompilerService.Auditing";

            public const string CompilerService_NewtonsoftJson = "CompilerService.NewtonsoftJson";
            public const string CompilerService_EXIFextractor = "CompilerService.EXIFextractor";
            public const string CompilerService_NetHttpFormating = "CompilerService.NetHttpFormating";
            public const string CompilerService_WebCors = "CompilerService.WebCors";
            public const string CompilerService_WebHttpCors = "CompilerService.WebHttpCors";
            public const string CompilerService_WebHttp = "CompilerService.WebHttp";
            public const string CompilerService_WebHttpWebHost = "CompilerService_WebHttpWebHost";

            public const string CompilerService_JacksonAnnotations = "CompilerService.JacksonAnnotations";
            public const string CompilerService_JacksonCore = "CompilerService.JacksonCore";
            public const string CompilerService_JacksonDatabind = "CompilerService.JacksonDatabind";
            public const string CompilerService_JacksonJAXRSBase = "CompilerService.JacksonJAXRSBase";
            public const string CompilerService_JacksonJAXRSJsonProvider = "CompilerService.JacksonJAXRSJsonProvider";
            public const string CompilerService_JacksonModuleJAXBAnnotations = "CompilerService.JacksonModuleJAXBAnnotations";
            public const string CompilerService_JerseyCore = "CompilerService.JerseyCore";
            public const string CompilerService_JerseyJson = "CompilerService.JerseyJson";
            public const string CompilerService_JerseyServer = "CompilerService.JerseyServer";
            public const string CompilerService_JerseyServlet = "CompilerService.JerseyServlet";
            public const string CompilerService_Sanselan = "CompilerService.Sanselan";

            public const string CompilerService_RESTServiceRuntime = "CompilerService.RESTServiceRuntime";
            public const string CompilerService_DatabaseAbstractionLayer = "CompilerService.DatabaseAbstractionLayer";
            public const string CompilerService_HostName = "CompilerService.HostName";
            public const string CompilerService_VerifyControllerMachine = "CompilerService.VerifyControllerMachine";
            public const string CompilerService_SharedHoursCache = "CompilerService.SharedHoursCache";
            public const string CompilerService_DisableParallelBroadcast = "CompilerService.DisableParallelBroadcast";
            public const string CompilerService_CommitAfterDDLScripts = "CompilerService.CommitAfterDDLScripts";

            /* Since old applications in Java (pre 4.2.4.52) use the CompilerService.Port to specify the RMI port, we need to use a different 
             * one here */
            public const string CompilerService_Port =  "CompilerService.Port";
            public const string CompilerService_PublicationPath = "CompilerService.PublicationPath";
            public const string CompilerService_Uri = "CompilerService.Uri";
            public const string CompilerService_WebWidgets = "CompilerService.WebWidgets";
            public const string CompilerService_WidgetsRuntimeAPI = "CompilerService.WidgetsRuntimeAPI";
            public const string CompilerService_CompilerThreadPriority = "CompilerService.OSHECompPriority";
            public const string CompilerService_RuntimeCommon = "CompilerService.RuntimeCommon";
            public const string CompilerService_TestingActive = "CompilerService.Testing.Active";
            public const string Activation_EndUserSessionsUsageWarnPercent = "Activation.EndUserSessions.UsageWarnPercent";
            public const string Activation_AnonymousEndUserSessionsUsageWarnPercent = "Activation.AnonymousEndUserSessions.UsageWarnPercent";
            public const string Activation_EndUserSessionsLogPurgeOlderThanDays = "Activation.EndUserSessionsLog.PurgeOlderThanDays";

            // Compiler Service (DotNet only)
            public const string DotNetCompilerService_SMS = "CompilerService.SMS";
            public const string DotNetCompilerService_GemboxSpreadSheet = "CompilerService.GemboxSpreadSheet";
            public const string DotNetCompilerService_SharpZipLib = "CompilerService.SharpZipLib";
            public const string DotNetCompilerService_DeleteExpiredSessionsAvoidLockRowCount = "CompilerService.DeleteExpiredSessionsAvoidLockRowCount";

            // Compiler Service (Java only)
            public const string JavaCompilerService_maxMemory = "CompilerService.maxMemory";
            public const string CompilerService_Use42CompileMethod = "CompilerService.Use42CompileMethod";

            // Deploy Service
            public const string DeployService_ConfigFile = "DeployService.exe.config";
            public const string DeployService_PageInvokerSleep = "DeployService.PingSleep"; // The const value was keep to maintain compatibility

            [Obsolete("Please use DeployService_PageInvokerSleep")]
            public const string DeployService_PingSleep = DeployService_PageInvokerSleep;

            public const string DeployService_Port = "DeployService.Port";
            public const string DeployService_Uri = "DeployService.Uri";
            public const string DeployService_DeploySeparateFolder = "DeployService.DeploySeparateFolder";
            public const string DeployService_SearchAllVdirWithSamePaths = "DeployService.SearchAllVdirWithSamePaths";
            public const string DeployService_ProductionThresholdToDeleteInHours = "DeployService.ProductionThresholdToDeleteInHours";
            public const string DeployService_DevelopmentThresholdToDeleteInHours = "DeployService.DevelopmentThresholdToDeleteInHours";
            public const string DeployService_DisableProducerDLLsDifferentialCopy = "DeployService.DisableProducerDLLsDifferentialCopy";
            public const string DeployService_DisableLocalCopy = "DeployService.DisableLocalCopy";

            // Deploy Service (Java only)
            [Obsolete("This setting should be used anymore")]
            public const string JavaDeployService_TempDir = "JavaDeployService.TempDir";

            public const string JavaDeployService_RunningDir = "JavaDeployService.RootDir";
            public const string JavaDeployService_TestDir = "JavaDeployService.TestDir";

            // Deploy Service (DotNet only)
            public const string DotNetDeployService_RunningDir = "IIS.RootDir";
            public const string DotNetDeployService_TestDir = "IIS.TestDir";
            public const string DotNetDeployService_CustomHandlersDir = "IIS.CustomHandlersDir";

            // IIS ISAPI filter logging
            public const string Log_ISAPILogsDir = "IIS.LogsDir";

            // Request Tracer
            public const string RequestTracer_ExposedIntegrationExecuted = "RequestEvents.ExposedIntegrationExecuted.Enabled";

            // Log Server
            public const string LogServer_ConfigFile = "LogServer.exe.config";
            public const string LogServer_Service_Port = "LogServer.Service.Port";
            public const string LogServer_Service_Uri = "LogServer.Service.Uri";
            public const string LogServer_Db_CycleSize = "LogServer.Db.CycleSize";
            public const string LogServer_Db_RecoveryPeriod = "LogServer.Db.RecoveryPeriod";
            public const string LogServer_Db_WindowSize = "LogServer.Db.WindowSize";
            public const string LogServer_Db_CyclePeriod = "LogServer.Db.CyclePeriod";
            public const string LogServer_PurgeLogsLimit = "OutSystems.HubEdition.Log.PurgeLogsLimit"; // Deprecated
            public const string LogServer_DontWriteToDB = "OutSystems.HubEdition.Log.DontWriteToDB"; // For debugging purposes only, this will disable logs to DB
            public const string LogServer_Db_RequestEvent_CycleSize = "LogServer.Db.CycleSize.RequestEvent";
            public const string LogServer_Db_RequestEvent_CyclePeriod = "LogServer.Db.CyclePeriod.RequestEvent";
            public const string LogServer_Db_RequestEvent_WindowSize = "LogServer.Db.WindowSize.RequestEvent";

            public const string Log_SlowExtensionCallInMs = "OutSystems.HubEdition.Log.SlowExtensionCallInMs";
            public const string Log_SlowSQLThresholdInMs = "OutSystems.HubEdition.Log.SlowQueryInMs";
            public const string Log_SlowScreenThresholdInMs = "OutSystems.HubEdition.Log.SlowScreenInMs";
            public const string Log_SlowTimerThresholdInMs = "OutSystems.HubEdition.Log.SlowTimerInMs";
            public const string Log_SlowWebReferenceThresholdInMs = "OutSystems.HubEdition.Log.SlowWebReferenceInMs";
            public const string Log_SlowWebServiceThresholdInMs = "OutSystems.HubEdition.Log.SlowWebServiceInMs";
            public const string Log_SlowIntegrationThresholdInMs = "OutSystems.HubEdition.Log.SlowIntegrationInMs";

            public const string Log_ModeWithoutPartitioning = "LogModeWithoutPartioning";

            public const string Log_CollectOneClickPublishMetrics = "OutSystems.HubEdition.Log.CollectOneClickPublishMetrics";
            public const string Log_CollectLicensingInformation = "OutSystems.HubEdition.Log.CollectLicensingInformation";

            public const string Profiler_CurrentDayFilename = "Profiler_CurrentDayFilename";
            public const string Profiler_LastDaysFilename = "Profiler_LastDaysFilename";
            public const string Profiler_NumberOfDaysToKeep = "Profiler_NumberOfDaysToKeep";
            public const string Profiler_Enabled = "Profiler_Enabled";
            public const string Profiler_FlushToFileSystemIntervalMs = "Profiler_FlushToFileSystemIntervalMs";
            public const string Profiler_PushMetricsToLogServerIntervalMs = "Profiler_PushMetricsToLogServerIntervalMs";

            // Email
            public const string Email_Server_Host = "Email.Server.Host";
            public const string Email_Server_Port = "Email.Server.Port";
            public const string Email_UseAuthentication = "Email.UseAuthentication";
            public const string Email_Username = "Email.Username";
            public const string Email_Password = "Email.Password";
            public const string DefaultDnsName = "DefaultDnsName";
            public const string Email_DefaultOriginator = "Email.DefaultOriginator";
            public const string Email_DefaultOriginatorName = "Email.DefaultOriginatorName";
            public const string Email_EnableEmails = "Email.EnableEmails";
            public const string Email_TestEmails = "Email.TestEmails";
            public const string Email_SendTimeout = "OutSystems.HubEdition.SMTP.SendTimeout";
            public const string Email_ReceivedTimeout = "OutSystems.HubEdition.SMTP.ReceivedTimeout";


            // Logging
            public const string Log_QueueMessageMaxAge = "OutSystems.HubEdition.Log.QueueMessagesMaxAge"; // Max age in minutes for messages in outsystems log queues

            // Message log Queues
            public const string Log_QueuePath = "OutSystems.HubEdition.Log.QueuePath";
            public const string Log_ScreenLogQueuePath = "OutSystems.HubEdition.Log.ScreenLogQueuePath";
            public const string Log_ExtensionLogQueuePath = "OutSystems.HubEdition.Log.ExtensionLogQueuePath";
            public const string Log_GeneralLogQueuePath = "OutSystems.HubEdition.Log.GeneralLogQueuePath";
            public const string Log_TimerLogQueuePath = "OutSystems.HubEdition.Log.TimerLogQueuePath";
            public const string Log_WebReferenceLogQueuePath = "OutSystems.HubEdition.Log.WebReferenceLogQueuePath";
            public const string Log_WebServiceLogQueuePath = "OutSystems.HubEdition.Log.WebServiceLogQueuePath";
            public const string Log_SmsLogQueuePath = "OutSystems.HubEdition.Log.SmsLogQueuePath";
            public const string Log_CustomLogQueuePath = "OutSystems.HubEdition.Log.CustomLogQueuePath";
            public const string Log_IntegrationLogQueuePath = "OutSystems.HubEdition.Log.IntegrationLogQueuePath";
            public const string Log_IntDetailLogQueuePath = "OutSystems.HubEdition.Log.IntDetailLogQueuePath";
            public const string Log_AdminQueuePath = "OutSystems.HubEdition.Log.AdminQueuePath";
            public const string Log_ErrorLogQueuePath = "OutSystems.HubEdition.Log.ErrorLogQueuePath";
            public const string Log_RequestEventQueuePath = "OutSystems.HubEdition.Log.RequestEventQueuePath";
            public const string Log_MobileRequestLogQueuePath = "OutSystems.HubEdition.LogMobileRequestQueuePath";
            public const string Log_MobileRequestDetailLogQueuePath = "OutSystems.HubEdition.LogMobileRequestDetailQueuePath";
            // Used for bulk logs
            public const string Log_SupportBulkLogs = "OutSystems.HubEdition.Log.SupportBulkLogs";
            public const string Log_MaxMessageQueueSizeInKb = "OutSystems.HubEdition.Log.MaxQueueSizeInKb";
            public const string Log_TimeToWaitForBatchInMs = "OutSystems.HubEdition.Log.TimeToWaitForBatchInMs";
            public const string Log_MaxMessagesPerBatch = "OutSystems.HubEdition.Log.MaxMessagesPerBatch";
            public const string Log_MaxMessageQueueSizeInKbForLargeContentQueues = "OutSystems.HubEdition.Log.MaxQueueSizeInKbForLargeContentQueues";
            public const string Log_MaxMessagesPerBatchForLargeContentQueues = "OutSystems.HubEdition.Log.MaxMessagesPerBatchForLargeContentQueues";
            public const string Log_MaxMessagesSizeInKbForLargeContentQueues = "OutSystems.HubEdition.Log.MaxMessagesSizeInKbForLargeContentQueues";

            public const string Log_SupportCustomLogs = "OutSystems.HubEdition.Log.SupportCustomLogs";
            public const string Log_SupportAsynchronousLog = "OutSystems.HubEdition.Log.SupportAsynchronousLogs";

            // Log limits
            public const string Log_MaxLogsPerRequest_Extension = "OutSystems.HubEdition.Log.MaxLogsPerRequestExtension";
            public const string Log_MaxLogsPerRequest_Audit = "OutSystems.HubEdition.Log.MaxLogsPerRequestAudit";
            public const string Log_MaxLogsPerSecondInLogsEndpoint = "OutSystems.HubEdition.Log.MaxLogsPerSecondInLogsEndpoint";

            // Scheduler
            public const string Scheduler_ConfigFile = "Scheduler.exe.config";
            public const string Scheduler_Port = "Scheduler.Port";
            public const string Scheduler_Uri = "Scheduler.Uri";

            [Obsolete("Deprecated since 5.0.0.0. Use Scheduler_NumberOfThreadsForTimers setting instead.")]
            public const string Scheduler_SemaphoreCount = "Scheduler.SemaphoreCount";

            public const string Scheduler_NumberOfRetries = "Scheduler.NumberOfRetries";

            public const string Scheduler_MaxNumberOfConsumerThreadsInDevelopmentMachines = "Scheduler.MaxNumberOfConsumerThreadsInDevelopmentMachines";


            public const string Scheduler_DisableTimers = "Scheduler.DisableTimers";
            public const string Scheduler_DisableProcesses = "Scheduler.DisableProcesses";
            public const string Scheduler_DisableEmails = "Scheduler.DisableEmails";

            public const string Scheduler_NumberOfThreadsForTimers = "Scheduler.NumberOfThreadsForTimers";
            public const string Scheduler_NumberOfThreadsForActivities = "Scheduler.NumberOfThreadsForActivities";
            public const string Scheduler_NumberOfThreadsForEvents = "Scheduler.NumberOfThreadsForEvents";
            public const string Scheduler_NumberOfThreadsForLightEvents = "Scheduler.NumberOfThreadsForLightEvents";
            public const string Scheduler_NumberOfThreadsForEmails = "Scheduler.NumberOfThreadsForEmails";

            public const string Scheduler_NumberOfJobsPerThreadsForActivities = "Scheduler.NumberOfJobsPerThreadsForActivities";
            public const string Scheduler_NumberOfJobsPerThreadForEvents = "Scheduler.NumberOfJobsPerThreadForEvents";

            public const string Scheduler_DelayBetweenExecutionsForTimersMs = "Scheduler.DelayBetweenExecutionsForTimersMs";
            public const string Scheduler_DelayBetweenExecutionsForActivitiesMs = "Scheduler.DelayBetweenExecutionsForActivitiesMs";
            public const string Scheduler_DelayBetweenExecutionsForEventsMs = "Scheduler.DelayBetweenExecutionsForEventsMs";
            public const string Scheduler_DelayBetweenExecutionsForLightEventsMs = "Scheduler.DelayBetweenExecutionsForLightEventsMs";
            public const string Scheduler_DelayBetweenExecutionsForEmailsMs = "Scheduler.DelayBetweenExecutionsForEmailsMs";

            public const string Scheduler_DelayAfterErrorsMs = "Scheduler.DelayAfterErrorsMs";

            public const string Scheduler_DelayBetweenDbTimerPollingMs = "Scheduler.DelayBetweenDbTimerPollingMs";
            public const string Scheduler_DelayBetweenDbActivityPollingMs = "Scheduler.DelayBetweenDbActivityPollingMs";
            public const string Scheduler_DelayBetweenDbLightEventPollingMs = "Scheduler.DelayBetweenDbLightEventPollingMs";
            public const string Scheduler_DelayBetweenDbEmailPollingMs = "Scheduler.DelayBetweenDbEmailPollingMs";

            public const string Scheduler_ProcessBackoff_RetrybaseSec = "Scheduler.ProcessBackoff.RetrybaseSec";
            public const string Scheduler_ProcessBackoffConstant = "Scheduler.ProcessBackoffConstant";
            public const string Scheduler_ProcessBackoffMaxDays = "Scheduler.ProcessBackoffMaxDays";
            public const string Scheduler_LightProcessBackoffMaxDays = "Scheduler.LightProcessBackoffMaxDays";

            public const string Scheduler_EmailBackoffMaxDays = "Scheduler.EmailBackoffMaxDays";

            public const string Scheduler_ActivitiesTimeout = "Scheduler.ActivitiesTimeout";
            public const string Scheduler_AutomaticActivitiesTimeout = "Scheduler.AutomaticActivitiesTimeout";
            public const string Scheduler_RecoverEmailHangIntervalInMinutes = "Scheduler.RecoverEmailHangIntervalInMinutes";

            // SMS Connector
            public const string SMSConnector_ConfigFile = "SMSConnector.exe.config";
            public const string SMSConnector_InboundFailedQueue = "SMSConnector.InboundFailedQueue";
            public const string SMSConnector_InboundQueue = "OutSystems.HubEdition.SMSConnector.InboundQueue";
            public const string SMSConnector_InboundThreads = "SMSConnector.InboundThreads";
            public const string SMSConnector_OutboundFailedQueue = "SMSConnector.OutboundFailedQueue";
            public const string SMSConnector_OutboundQueue = "OutSystems.HubEdition.SMSConnector.OutboundQueue";
            public const string SMSConnector_OutboundThreads = "SMSConnector.OutboundThreads";
            public const string SMSConnector_Port = "OutSystems.HubEdition.SMSConnector.Port";
            public const string SMSConnector_TriesBeforeQuiting = "SMSConnector.TriesBeforeQuiting";
            public const string SMSConnector_Uri = "OutSystems.HubEdition.SMSConnector.Uri";

            // SMS Gateway Adapter
            public const string SMSGatewayAdapter_Frontend_IPAddress = "SMSGatewayAdapter.Frontend.IPAddress";
            public const string SMSGatewayAdapter_Host = "SMSGatewayAdapter.Host";
            public const string SMSGatewayAdapter_Password = "SMSGatewayAdapter.Password";
            public const string SMSGatewayAdapter_Port = "SMSGatewayAdapter.Port";
            public const string SMSGatewayAdapter_UnifiedPrefix = "SMSGatewayAdapter.UnifiedPrefix";
            public const string SMSGatewayAdapter_Username = "SMSGatewayAdapter.Username";


            // Kannel
            public const string Kannel_Host = "OutSystems.HubEdition.Kannel.Host";
            public const string Kannel_Password = "OutSystems.HubEdition.Kannel.Password";
            public const string Kannel_Port = "OutSystems.HubEdition.Kannel.Port";
            public const string Kannel_StatusPassword = "OutSystems.HubEdition.Kannel.StatusPassword";
            public const string Kannel_StatusPort = "OutSystems.HubEdition.Kannel.StatusPort";
            public const string Kannel_UnifiedPrefix = "OutSystems.HubEdition.Kannel.UnifiedPrefix";
            public const string Kannel_Username = "OutSystems.HubEdition.Kannel.Username";
            public const string Kannel_Version = "OutSystems.HubEdition.Kannel.Version";

            // Unit Tests
            public const string Compiler_UnitTestPath = "Compiler.UnitTestPath";
            public const string Compiler_ForceCacheInvalidationSuffix = "Compiler.ForceCacheInvalidationSuffix";
            public const string NssOMLProcessor_UnitTestPath = "OutSystems.NssOMLProcessor.UnitTestPath";
            public const string UpdateDeviceDb_UnitTestPath = "updatedevicedb.UnitTestPath";
            public const string Obfuscation_IldasmPath = "Obfuscation.IldasmPath";
            public const string OmlResources_UnitTestsPath = "OmlResources.UnitTestPath";
            public const string TestsCommon_UnitTestPath = "TestsCommon.UnitTestPath";
            public const string Common_UnitTestPath = "Common.UnitTestPath";
            public const string ServerTests_UnitTestPath = "ServerTests.UnitTestPath";
            public const string Outsystems_NssIntegrationStudio_UnitTestConfigPath = "OutSystems.NssIntegrationStudio.UnitTestConfigPath";
            public const string Compiler_Path = "Compiler.Path";
            public const string Compiler_BaseDirForTests = "Compiler.BaseDirForTests";
            public const string Compiler_OmlDecompAppForTests = "Compiler.OmlDecompAppForTests";
            public const string DbServerTest_Installation_InstanceName = "DbServerTest.Installation.InstanceName";
            public const string DbServerTest_DatabaseName = "DbServerTest.DatabaseName";
            public const string DbServerTest_EngineeringServerName = "DbServerTest.EngineeringServerName";
            public const string DbServerTest_OtherCatalog = "DbServerTest.OtherCatalog";
            public const string Docs_UnitTestPath = "Docs.UnitTestPath";
            public const string SAPServerMock_Path = "SAPServerMock.Path";

            // Runtime Web-References
            public const string Runtime_Expect100Continue = "Runtime.Expect100Continue";

            // CallBack Debug Information
            public const string Callback_Debug_Information_Key = "OutSystems.HubEdition.Callback.DebugInformationKey";

            // RichMail 
            public const string RichMail_MarkAsReadWhenBodyFetched = "RichMail.MarkAsReadWhenBodyFetched";

            // Developer Sandbox
            public const string Sandbox_OperatingSandboxMode = "Sandbox.Operating";
            public const string Sandbox_ActivationKeySecret = "Sandbox.Boxes.ActivationKeySecret";
            public const string Sandbox_ServiceSettingsFilePath = "Sandbox.Services.SettingsFilePath"; // where to settings.config?
            public const string Sandbox_BoxRootsPath = "Sandbox.Boxes.BoxRootsPath"; // where to path?
            public const string Sandbox_BoxListFilePath = "Sandbox.Boxes.BoxListFilePath"; // existing boxes configuration
            public const string Sandbox_BoxKeyName = "Sandbox.Boxes.KeyName"; // per-box, box name
            public const string Sandbox_Hostname = "Sandbox.Hostname"; // www host to reference
            public const string EmailNotification_QueuePath = "Sandbox.Email.QueuePath";
            public const string Sandbox_EmailMinFetchIntervalInMinutes = "Sandbox.Email.MinFetchIntervalInMinutes";
            public const string Sandbox_LicensingFeatureIntervalMultiplicationFactor = "Sandbox.Licensing.IncreaseFeatureIntervalBy";

            // ClientApplicationToken: used by lifetime to communicate with each environment
            public const string ClientApplicationToken = "ClientApplicationToken";

            // Libraries pool. In normal circumstances these two settings will have the same value.
            // We've separated these in two just for testing purposes, namely to be able to simulate
            // a separate front-end and controller in a single machine
            public const string LibrariesPool_Location_CompilerService = "LibrariesPool.Location.CompilerService";
            public const string LibrariesPool_Location_DeployService = "LibrariesPool.Location.DeployService";
            public const string LibrariesPool_DanglingFilesLifespanInMinutes = "LibrariesPool.DanglingFilesLifespanInMinutes";
            public const string LibrariesPool_CleanupDanglingFilesIntervalInMinutes = "LibrariesPool.CleanupOldFilesIntervalInMinutes";


            // Decimal and currency format in input widgets 
            public const string Input_DecimalSeparator = "InputDecimalSeparator";
            public const string Input_GroupSeparator = "InputGroupSeparator";

            // Export to Excel Date and Time format (issues #430846 and #432442) 
            public const string ExportToExcel_UsePlatformDateFormat = "ExportToExcel.UsePlatformDateFormat";
            public const string ExportToExcel_WriteNullDateAsBlankCell = "ExportToExcel.WriteNullDateAsBlankCell";

            // Allow avoid 1st stage Impact Analysis when in 2 stage publication (#518500).
            public const string BPT_ImpactAnalysis_SkipFirstStageImpactAnalysis = "BPT.ImpactAnalysis.SkipFirstStageImpactAnalysis";

            // Allow avoid comparisons of Conditional Starts and Ends (#518496).
            public const string BPT_ImpactAnalysis_DontUseConditionalStartsAndEnds = "BPT.ImpactAnalysis.DontUseConditionalStartsAndEnds";

            // Max time to wait for a conditional start to reach the ready state when invoking and explicit startactivity
            public const string BPT_StartActivityReadyWaitTimeInSeconds = "BPT.StartActivityReadyWaitTimeInSeconds";

            // When set, regular conditional start listeners are created on demand when invoking the explicit startactivity.
            // Conditional starts that register event listeners or have a child onready callback are not delayed even when this
            // setting is set to true.
            public const string BPT_ConditionalStartListenersCreatedOnDemand = "BPT.ConditionalStartListenersCreatedOnDemand";

            // When enabled, allows to use lightweight processes (with a Start -> Automatic Activity -> End structure) that handle a database event, 
            // using a fast execution engine. 
            public const string BPT_EnableLightProcessExecution = "BPT.EnableLightProcessExecution";

            public const string BPT_EnableImprovedDequeueEvent = "BPT.EnableImprovedDequeueEvent";

            //When set, encrypts the view state using the MAC address and some padding (#ISA-60)
            public const string EncryptViewState = "EncryptViewState";

            // Debug Logging flags
            public const string DebugSetCurrentLocale = "DebugSetCurrentLocale";

            public const string EncryptViewStateWithVisitorId = "EncryptViewStateWithVisitorId";
            public const string EncryptViewStateWithUserId = "EncryptViewStateWithUserId";

            public const string SigningKeysFactoryCipherFeature = "SigningKeysFactoryCipherFeature";

            public static string GlobalKeySuffix(string instanceName) {
                if (instanceName == null)
                    instanceName = GetDefaultValue(Configs.InstanceName);

                return " (" + (instanceName ?? DefaultInstanceName) + ")";
            }

            /// <summary>
            /// Global settings are indexed by instance name in machine.config. Use this to obtain their full key name.
            /// 
            /// This must be in sync with GotDotNet.ApplicationBlocks.SMSSettings.Configs.GetFullGlobalKey
            /// </summary>
            public static string GetFullGlobalKey(string instanceName, string settingName) {
                return settingName + GlobalKeySuffix(instanceName);
            }

        }

        private static string[] messageQueues = new string[] {
            Configs.Log_QueuePath,
            Configs.Log_ScreenLogQueuePath,
            Configs.Log_ExtensionLogQueuePath,
            Configs.Log_GeneralLogQueuePath,
            Configs.Log_TimerLogQueuePath,
            Configs.Log_WebReferenceLogQueuePath,
            Configs.Log_WebServiceLogQueuePath,
            Configs.Log_SmsLogQueuePath,
            Configs.Log_CustomLogQueuePath,
            Configs.Log_IntegrationLogQueuePath,
            Configs.Log_IntDetailLogQueuePath,
            Configs.Log_AdminQueuePath,
            Configs.Log_ErrorLogQueuePath,
            Configs.Log_RequestEventQueuePath,
            Configs.Log_MobileRequestLogQueuePath,
            Configs.Log_MobileRequestDetailLogQueuePath,
            Configs.SMSConnector_InboundQueue,
            Configs.SMSConnector_InboundFailedQueue,
            Configs.SMSConnector_OutboundQueue,
            Configs.SMSConnector_OutboundFailedQueue,
        };


        /// <summary>
        /// Collection of settings that are specific to a node (in a farm environment)
        /// </summary>
        private static string[] nodeSettings = new string[] {
                                                            Configs.ExcelTemplateFilePath,
                                                            Configs.DotNetCompilerService_SMS,
                                                            Configs.CompilerService_LibsDir,
                                                            Configs.CompilerService_ThirdPartyLibsDir,
                                                            Configs.CompilerService_RuntimePlatformUtil,
                                                            Configs.CompilerService_RuntimeCommon,
                                                            Configs.CompilerService_RuntimePlatform,
                                                            Configs.CompilerService_Auditing,

                                                            Configs.CompilerService_NewtonsoftJson,
                                                            Configs.CompilerService_EXIFextractor,
                                                            Configs.CompilerService_NetHttpFormating,
                                                            Configs.CompilerService_WebCors,
                                                            Configs.CompilerService_WebHttpCors,
                                                            Configs.CompilerService_WebHttp,
                                                            Configs.CompilerService_WebHttpWebHost,

                                                            Configs.CompilerService_JacksonAnnotations,
                                                            Configs.CompilerService_JacksonCore,
                                                            Configs.CompilerService_JacksonDatabind,
                                                            Configs.CompilerService_JacksonJAXRSBase,
                                                            Configs.CompilerService_JacksonJAXRSJsonProvider,
                                                            Configs.CompilerService_JacksonModuleJAXBAnnotations,
                                                            Configs.CompilerService_JerseyCore,
                                                            Configs.CompilerService_JerseyJson,
                                                            Configs.CompilerService_JerseyServer,
                                                            Configs.CompilerService_JerseyServlet,
                                                            Configs.CompilerService_Sanselan,

                                                            Configs.CompilerService_RESTServiceRuntime,
                                                            Configs.CompilerService_DatabaseAbstractionLayer,
                                                            Configs.CompilerService_ConnectorsDirectory,
                                                            Configs.DotNetCompilerService_GemboxSpreadSheet,
                                                            Configs.DotNetCompilerService_SharpZipLib,
                                                            Configs.CompilerService_WebWidgets,
                                                            Configs.CompilerService_WidgetsRuntimeAPI,
                                                            Configs.Cache_ControlPath,
                                                            Configs.CompilerService_PublicationPath,
                                                            Configs.DotNetDeployService_RunningDir,
                                                            Configs.JavaDeployService_RunningDir,
                                                            Configs.DotNetDeployService_TestDir,
                                                            Configs.JavaDeployService_TestDir,
                                                            Configs.DotNetDeployService_CustomHandlersDir,
                                                            Configs.Log_ISAPILogsDir,
                                                            Configs.Java_PropertiesDir,
                                                            Configs.Java_InstallDir,
                                                            Configs.Ant_LibsDir,
                                                            Configs.OutgoingIPAddress,
                                                            Configs.Scheduler_DisableTimers,
                                                            Configs.Scheduler_DisableProcesses,
                                                            Configs.Scheduler_DisableEmails,
                                                            Configs.IIS_DefaultApplicationPool,
                                                            Configs.IIS_DefaultWebSiteName,
                                                            Configs.LibrariesPool_Location_CompilerService,
                                                            Configs.LibrariesPool_Location_DeployService,
        };


        private static readonly Dictionary<string, string> defaultValues;

        static Settings() {

            defaultValues = new Dictionary<string, string>(350);
            defaultValues.Add(Configs.Authentication_UpdateUserLastLogin, "true");

            defaultValues.Add(Configs.Log_SupportBulkLogs, "true");
            defaultValues.Add(Configs.LogServer_DontWriteToDB, "false");

#if JAVA
            defaultValues.Add(Configs.Log_QueuePath, "queue/OutSystemsLog");
            defaultValues.Add(Configs.Log_CustomLogQueuePath, "queue/OutSystemsCustomLog");
            defaultValues.Add(Configs.Log_TimerLogQueuePath, "queue/OutSystemsTimerLog");
            defaultValues.Add(Configs.Log_ErrorLogQueuePath, "queue/OutSystemsErrorLog");
            defaultValues.Add(Configs.Log_GeneralLogQueuePath, "queue/OutSystemsGeneralLog");
            defaultValues.Add(Configs.Log_ScreenLogQueuePath, "queue/OutSystemsScreenLog");
            defaultValues.Add(Configs.Log_ExtensionLogQueuePath, "queue/OutSystemsExtensionLog");
            defaultValues.Add(Configs.Log_SmsLogQueuePath, "queue/OutSystemsSmsLog");
            defaultValues.Add(Configs.Log_WebReferenceLogQueuePath, "queue/OutSystemsWebReferenceLog");
            defaultValues.Add(Configs.Log_WebServiceLogQueuePath, "queue/OutSystemsWebServiceLog");
            defaultValues.Add(Configs.Log_IntegrationLogQueuePath, "queue/OutSystemsIntegrationLog");
            defaultValues.Add(Configs.Log_IntDetailLogQueuePath, "queue/OutSystemsIntDetailLog");
            defaultValues.Add(Configs.Log_RequestEventQueuePath, "queue/OutSystemsRequestEvent");
            defaultValues.Add(Configs.Log_MobileRequestLogQueuePath, "queue/OutSystemsMobileRequest");
            defaultValues.Add(Configs.Log_MobileRequestDetailLogQueuePath, "queue/OutSystemsMobileRequestDetail");
#else
            defaultValues.Add(Configs.Log_QueuePath, ".\\Private$\\outsystemslog");
            defaultValues.Add(Configs.Log_CustomLogQueuePath, ".\\Private$\\OutsystemsCustomLog");
            defaultValues.Add(Configs.Log_TimerLogQueuePath, ".\\Private$\\OutsystemsTimerLog");
            defaultValues.Add(Configs.Log_ErrorLogQueuePath, ".\\Private$\\OutsystemsErrorLog");
            defaultValues.Add(Configs.Log_GeneralLogQueuePath, ".\\Private$\\OutsystemsGeneralLog");
            defaultValues.Add(Configs.Log_ScreenLogQueuePath, ".\\Private$\\OutsystemsScreenLog");
            defaultValues.Add(Configs.Log_ExtensionLogQueuePath, ".\\Private$\\OutSystemsExtensionLog");
            defaultValues.Add(Configs.Log_SmsLogQueuePath, ".\\Private$\\OutsystemsSmsLog");
            defaultValues.Add(Configs.Log_WebReferenceLogQueuePath, ".\\Private$\\OutsystemsWebReferenceLog");
            defaultValues.Add(Configs.Log_WebServiceLogQueuePath, ".\\Private$\\OutsystemsWebServiceLog");
            defaultValues.Add(Configs.Log_IntegrationLogQueuePath, ".\\Private$\\OutsystemsIntegrationLog");
            defaultValues.Add(Configs.Log_IntDetailLogQueuePath, ".\\Private$\\OutsystemsIntDetailLog");
            defaultValues.Add(Configs.Log_RequestEventQueuePath, ".\\Private$\\OutsystemsRequestEvent");
            defaultValues.Add(Configs.Log_MobileRequestLogQueuePath, ".\\Private$\\OutsystemsMobileRequest");
            defaultValues.Add(Configs.Log_MobileRequestDetailLogQueuePath, ".\\Private$\\OutsystemsMobileRequestDetail");
#endif

            defaultValues.Add(Configs.ServerKind, RuntimePlatformUtils.IsJava() ? "JBoss" : "IIS");
            defaultValues.Add(Configs.ApplicationServerVersion, "(Unknown version)");
            defaultValues.Add(Configs.RequiresSoapHeadersSlowRetrieval, "false");
            defaultValues.Add(Configs.DisableCompilationCaches, "false");
            defaultValues.Add(Configs.ForceSecureAlgorithmsInAuthentication, "false");
            defaultValues.Add(Configs.PasswordUpgradeOnLogin, "true");

            defaultValues.Add(Configs.Log_QueueMessageMaxAge, "1200"); // 20 hours max age
            defaultValues.Add(Configs.DotNet_QueuesAvailable, "false");
            defaultValues.Add(Configs.DotNet_SCProxyUserName, string.Empty);
            defaultValues.Add(Configs.DotNet_SCProxyPassword, string.Empty);

            defaultValues.Add(Configs.Log_TimeToWaitForBatchInMs, "1000");
            defaultValues.Add(Configs.Log_MaxMessageQueueSizeInKb, "50000");
            defaultValues.Add(Configs.Log_MaxMessagesPerBatch, "1000");

            defaultValues.Add(Configs.Log_MaxMessageQueueSizeInKbForLargeContentQueues, "50000");
            defaultValues.Add(Configs.Log_MaxMessagesSizeInKbForLargeContentQueues, "1000");
            defaultValues.Add(Configs.Log_MaxMessagesPerBatchForLargeContentQueues, "25");

            defaultValues.Add(Configs.Log_AdminQueuePath, ".\\Private$\\OutsystemsAdminLog");

            defaultValues.Add(Configs.Log_SlowExtensionCallInMs, "200");
            defaultValues.Add(Configs.Log_SlowSQLThresholdInMs, "200");
            defaultValues.Add(Configs.Log_SlowScreenThresholdInMs, "200");
            defaultValues.Add(Configs.Log_SlowTimerThresholdInMs, "5000");
            defaultValues.Add(Configs.Log_SlowWebReferenceThresholdInMs, "200");
            defaultValues.Add(Configs.Log_SlowWebServiceThresholdInMs, "200");
            defaultValues.Add(Configs.Log_SlowIntegrationThresholdInMs, "200");

            defaultValues.Add(Configs.Log_SupportCustomLogs, "true");
            defaultValues.Add(Configs.Log_SupportAsynchronousLog, "true");

            defaultValues.Add(Configs.Log_ModeWithoutPartitioning, "false");
            defaultValues.Add(Configs.Log_MaxLogsPerRequest_Extension, "3000");
            defaultValues.Add(Configs.Log_MaxLogsPerRequest_Audit, "3000");

            defaultValues.Add(Configs.Log_MaxLogsPerSecondInLogsEndpoint, "200");

            defaultValues.Add(Configs.Log_CollectOneClickPublishMetrics, "true");
            defaultValues.Add(Configs.Log_CollectLicensingInformation, "false");

            // Profiler Properties
            defaultValues.Add(Configs.Profiler_NumberOfDaysToKeep, "7");
            defaultValues.Add(Configs.Profiler_Enabled, "false");
            defaultValues.Add(Configs.Profiler_FlushToFileSystemIntervalMs, "900000");
            defaultValues.Add(Configs.Profiler_PushMetricsToLogServerIntervalMs, "300000");

            defaultValues.Add(Configs.CompilerService_CompilerTimeOut, "600");
            defaultValues.Add(Configs.Compiler_genCompLogFile, "false");
            defaultValues.Add(Configs.Compiler_UseCacheInvalidationSuffix, "none"); // will be overridden by configuration tool for new installations
            defaultValues.Add(Configs.Compiler_EnablePrecacheSupport, "true");
            defaultValues.Add(Configs.Compiler_EnableOnNotifyServerSide, "false");
            defaultValues.Add(Configs.Compiler_Oracle_Introspection_Method, "auto");
            defaultValues.Add(Configs.Compiler_TranslationsOverride_UseDBTranslations, "false");
            defaultValues.Add(Configs.Compiler_TranslationsOverride_TranslateAllResources, "false");
            defaultValues.Add(Configs.RequestTracer_ExposedIntegrationExecuted, "false");
            defaultValues.Add(Configs.LogServer_Db_CyclePeriod, "7");
            defaultValues.Add(Configs.LogServer_Db_CycleSize, "10");
            defaultValues.Add(Configs.LogServer_Db_RequestEvent_CyclePeriod, "3");
            defaultValues.Add(Configs.LogServer_Db_RequestEvent_CycleSize, "3");
            defaultValues.Add(Configs.LogServer_Db_RequestEvent_WindowSize, "2");
            defaultValues.Add(Configs.GenerateLegacyExcell2003, "false");
            defaultValues.Add(Configs.Compiler_genTestAction, "false");
            defaultValues.Add(Configs.Compiler_SMS_Delivery_EnableSessionState, "true");
            defaultValues.Add(Configs.Compiler_MaximumNumberOfSMS, "3");

            defaultValues.Add(Configs.DeployService_SearchAllVdirWithSamePaths, "false");

            defaultValues.Add(Configs.CompilerService_CompilerThreadPriority, "0");
            defaultValues.Add(Configs.CompilerService_VerifyControllerMachine, "True");
            defaultValues.Add(Configs.CompilerService_SharedHoursCache, "24");
            defaultValues.Add(Configs.CompilerService_Use42CompileMethod, "true");
            defaultValues.Add(Configs.CompilerService_DisableParallelBroadcast, "false");
            defaultValues.Add(Configs.CompilerService_TestingActive, "false");
            defaultValues.Add(Configs.CompilerService_CommitAfterDDLScripts, "false");

            defaultValues.Add(Configs.DeployService_DeploySeparateFolder, "true");

            defaultValues.Add(Configs.Compiler_DatabaseUnicodeSupport, "false");
            defaultValues.Add(Configs.Compiler_DatabaseUnicodeSupportShadow, "nil");
            defaultValues.Add(Configs.Compiler_EnforceExcelColumnMatch, "false");

            defaultValues.Add(Configs.Compiler_Optimize, "true");
            defaultValues.Add(Configs.DotNet_SkipLateLoadBin, "false");
            defaultValues.Add(Configs.Compiler_genQueriesCoverageCode, "false");
            defaultValues.Add(Configs.Compiler_compressViewState, "true");
            defaultValues.Add(Configs.Compiler_dontCatchExceptions, "false");

            defaultValues.Add(Configs.Compiler_EnforceIndent, "false");
            defaultValues.Add(Configs.Compiler_DisableFirstLoadImprovements, "false");
            defaultValues.Add(Configs.Compiler_DevUseOSPerformanceModule, "false");
            defaultValues.Add(Configs.Compiler_BeautifyJS, "false");
            defaultValues.Add(Configs.Compiler_ForceDumpSourceMaps, "false");
            defaultValues.Add(Configs.Compiler_ForceClientSideTracing, "false");
            defaultValues.Add(Configs.Compiler_DumpOldBinaryEndpoint, "false");

            defaultValues.Add(Configs.Scheduler_NumberOfRetries, "3");
            defaultValues.Add(Configs.Scheduler_DelayAfterErrorsMs, "20000");
            defaultValues.Add(Configs.Scheduler_DelayBetweenDbActivityPollingMs, "1500");
            defaultValues.Add(Configs.Scheduler_DelayBetweenDbLightEventPollingMs, "500");
            defaultValues.Add(Configs.Scheduler_DelayBetweenDbEmailPollingMs, "5000");
            defaultValues.Add(Configs.Scheduler_DelayBetweenDbTimerPollingMs, "20000");
            defaultValues.Add(Configs.Scheduler_DelayBetweenExecutionsForActivitiesMs, "200");
            defaultValues.Add(Configs.Scheduler_DelayBetweenExecutionsForEventsMs, "200");
            defaultValues.Add(Configs.Scheduler_DelayBetweenExecutionsForLightEventsMs, "10");
            defaultValues.Add(Configs.Scheduler_DelayBetweenExecutionsForEmailsMs, "10");
            defaultValues.Add(Configs.Scheduler_DelayBetweenExecutionsForTimersMs, "1000");
            defaultValues.Add(Configs.Scheduler_NumberOfThreadsForActivities, "10");
            defaultValues.Add(Configs.Scheduler_NumberOfThreadsForEvents, "5");
            defaultValues.Add(Configs.Scheduler_NumberOfThreadsForLightEvents, "20");
            defaultValues.Add(Configs.Scheduler_NumberOfThreadsForTimers, "10");
            defaultValues.Add(Configs.Scheduler_NumberOfThreadsForEmails, "2");
            defaultValues.Add(Configs.Scheduler_NumberOfJobsPerThreadsForActivities, "5");
            defaultValues.Add(Configs.Scheduler_NumberOfJobsPerThreadForEvents, "4");
            defaultValues.Add(Configs.Scheduler_ProcessBackoff_RetrybaseSec, "60");
            defaultValues.Add(Configs.Scheduler_ProcessBackoffConstant, "1.2");
            defaultValues.Add(Configs.Scheduler_ProcessBackoffMaxDays, "7");
            defaultValues.Add(Configs.Scheduler_LightProcessBackoffMaxDays, "30");
            defaultValues.Add(Configs.Scheduler_EmailBackoffMaxDays, "2");
            defaultValues.Add(Configs.Scheduler_DisableTimers, "false");
            defaultValues.Add(Configs.Scheduler_DisableProcesses, "false");
            defaultValues.Add(Configs.Scheduler_DisableEmails, "false");
            defaultValues.Add(Configs.Scheduler_ActivitiesTimeout, "150");
            defaultValues.Add(Configs.Scheduler_AutomaticActivitiesTimeout, "300");
            defaultValues.Add(Configs.Scheduler_RecoverEmailHangIntervalInMinutes, "10");

            defaultValues.Add(Configs.Scheduler_MaxNumberOfConsumerThreadsInDevelopmentMachines, "4");

            defaultValues.Add(Configs.OutgoingIPAddress, "");
            defaultValues.Add(Configs.UpdateDBTimeout, "600");
            defaultValues.Add(Configs.QueryRecursionLimit, "100");
            defaultValues.Add(Configs.SupportLegacyAuthentication, "false");
            defaultValues.Add(Configs.SupportUnifiedMDC, "true");
            defaultValues.Add(Configs.SupportPre801SerialMechanism, "false");
            defaultValues.Add(Configs.JavascriptAPI_ShowHiddenFields, "false");

            defaultValues.Add(Configs.Email_Server_Port, "25");
            defaultValues.Add(Configs.Email_DefaultOriginatorName, string.Empty);
            defaultValues.Add(Configs.Email_EnableEmails, "true");
            defaultValues.Add(Configs.Email_TestEmails, string.Empty);
            defaultValues.Add(Configs.Email_SendTimeout, "300000");
            defaultValues.Add(Configs.Email_ReceivedTimeout, "300000");

            defaultValues.Add(Configs.IIS_DefaultApplicationPool, "OutSystemsApplications");
            defaultValues.Add(Configs.IIS_DefaultWebSiteName, "Default Web Site");
            defaultValues.Add(Configs.IIS_CacheControlMaxAge, "30.00:00:00");
            defaultValues.Add(Configs.IIS_OsISAPIFilterEnabled, "true");

            defaultValues.Add(Configs.DeployService_ProductionThresholdToDeleteInHours, "24");
            defaultValues.Add(Configs.DeployService_DevelopmentThresholdToDeleteInHours, "0.25");

            defaultValues.Add(Configs.Oracle_CI_AI, "true");
            defaultValues.Add(Configs.Oracle_DDL_LOCK_TIMEOUT_InSeconds, "600");
            defaultValues.Add(Configs.Oracle_GetDateFunction, "CURRENT_TIMESTAMP");  // possible values 'systimestamp' or 'CURRENT_TIMESTAMP', when changing this defaul also update HubServer/db/runtime_oracle.sql
            defaultValues.Add(Configs.DotNetCompilerService_DeleteExpiredSessionsAvoidLockRowCount, "100");

            defaultValues.Add(Configs.Activation_EndUserSessionsUsageWarnPercent, "90");
            defaultValues.Add(Configs.Activation_AnonymousEndUserSessionsUsageWarnPercent, "90");
            defaultValues.Add(Configs.Activation_EndUserSessionsLogPurgeOlderThanDays, "730");
            defaultValues.Add(Configs.DeployService_DisableLocalCopy, "false");
            defaultValues.Add(Configs.DeployService_DisableProducerDLLsDifferentialCopy, "false");
            defaultValues.Add(Configs.DefaultWebReferenceTimeoutMs, "100000"); // 100 secs
            defaultValues.Add(Configs.DisableMetricsToNetwork, "false");
            defaultValues.Add(Configs.EnableExternalAuthenticationProvider, "false");
            defaultValues.Add(Configs.ForceEncryptedDatabaseImagePages, "true");
            defaultValues.Add(Configs.DisableMetricsCollect, "false");
            defaultValues.Add(Configs.IPv6_LogBindErrors, "false");
            defaultValues.Add(Configs.InstanceName, DefaultInstanceName);

            defaultValues.Add(Configs.RichMail_MarkAsReadWhenBodyFetched, "false");
            defaultValues.Add(Configs.Runtime_Expect100Continue, "false");
            defaultValues.Add(Configs.RMI_RegistryPort, "2033"); // Port 2033 for RMI Registry                                              
            defaultValues.Add(Configs.Sandbox_OperatingSandboxMode, "false");
            defaultValues.Add(Configs.Sandbox_BoxRootsPath, @"C:\Program Files\OutSystems\Sandboxes\"); // TODO: mmv: hardcoded!!!
            defaultValues.Add(Configs.Sandbox_ServiceSettingsFilePath, @"C:\Program Files\OutSystems\Platform Server\settings.config");
            defaultValues.Add(Configs.Sandbox_Hostname, "localhost");
            defaultValues.Add(Configs.InternalAddress, "127.0.0.1");
            defaultValues.Add(Configs.Sandbox_BoxListFilePath, @"C:\Program Files\OutSystems\Platform Server\sandboxes.xml");
            defaultValues.Add(Configs.Sandbox_ActivationKeySecret, "");
            defaultValues.Add(Configs.Compiler_MDC_SkipRevokes, "false");
            defaultValues.Add(Configs.EmailNotification_QueuePath, ".\\Private$\\OutsystemsEmailNotifications");
            defaultValues.Add(Configs.Sandbox_EmailMinFetchIntervalInMinutes, "9");

            // Login
            defaultValues.Add(Configs.RememberLoginTimeoutInDays, "10");
            defaultValues.Add(Configs.MobileLogin_Persistent_MaxIdleTimeInDays, "30"); // This default is also in Utils_Mobile_GetXXXXXXXX_DefVal action
            defaultValues.Add(Configs.MobileLogin_Persistent_CookieExpirationInDays, "365"); // This default is also in Utils_Mobile_GetXXXXXXXX_DefVal action
            defaultValues.Add(Configs.MobileLogin_Session_MaxIdleTimeInMinutes, "30"); // This default is also in Utils_Mobile_GetXXXXXXXX_DefVal action
            defaultValues.Add(Configs.MobileLogin_CacheTimeInMinutes, "5"); // This default is also in Utils_Mobile_GetXXXXXXXX_DefVal action

            // Compiler compatibility modes
            defaultValues.Add(Configs.Compiler_ForceIE8CompatibilityMode, "false");
            defaultValues.Add(Configs.Compiler_X_UA_Compatible, "IE=edge,chrome=1");
            defaultValues.Add(Configs.Compiler_ForceCallbacks, "false");
            defaultValues.Add(Configs.Compiler_DotNetTargetFramework, "4.6.1");
            defaultValues.Add(Configs.Compiler_DotNetCompilerExtraFlags, string.Empty);
            defaultValues.Add(Configs.Compiler_CssCompilationStrategy, "0");
            defaultValues.Add(Configs.Compiler_SupportSurrogatePairs_BuiltInFunctions, "true");
            defaultValues.Add(Configs.Compiler_SupportSurrogatePairs_JS, "false");
            defaultValues.Add(Configs.Compiler_AllowCommentHints, "false");

            // Security settings
            defaultValues.Add(Configs.EnableHSTS, "false");
            defaultValues.Add(Configs.EnableSecurityFeaturesISA, "true"); // This default is also in service center Security_IsISAFeatureEnabled action.
            defaultValues.Add(Configs.EnableSessionFixationProtection, "true");
            defaultValues.Add(Configs.SessionFixationAllowedOverlapWindowInSecs, "30");
            defaultValues.Add(Configs.DebugSessionFixationProtection, "false");

            defaultValues.Add(Configs.ForceScreensSecurity, "false");
            defaultValues.Add(Configs.ForceIntegrationSecurity, "false");
            defaultValues.Add(Configs.EnableContentSecurityPolicy, "false");
            defaultValues.Add(Configs.EnableSecurityFeaturesForMobile, "true");

            defaultValues.Add(Configs.EnableBruteForceProtection, "true");
            defaultValues.Add(Configs.EnableBruteForceProtectionPerIP, "true");

            defaultValues.Add(Configs.InvalidLoginCheckWindow, "60");
            defaultValues.Add(Configs.MaxUsernameAttemptsFirstBackoff, "3");
            defaultValues.Add(Configs.MaxUsernameAttemptsSecondBackoff, "6");
            defaultValues.Add(Configs.UsernameAttemptsFirstBackoffDelay, "30");
            defaultValues.Add(Configs.UsernameAttemptsSecondBackoffDelay, "1800");

            defaultValues.Add(Configs.MaxIPAttemptsFirstBackoff, "20");
            defaultValues.Add(Configs.MaxIPAttemptsSecondBackoff, "50");
            defaultValues.Add(Configs.IPAttemptsFirstBackoffDelay, "300");
            defaultValues.Add(Configs.IPAttemptsSecondBackoffDelay, "3600");
            defaultValues.Add(Configs.TrustedProxyAddresses, "");
            defaultValues.Add(Configs.EnableTrustedProxies, "True");
            defaultValues.Add(Configs.InternalNetwork_IPAdressList, "");
            defaultValues.Add(Configs.EnableInternalNetworkNewBehaviour, "True");

            defaultValues.Add(Configs.PlatformAuditing_DispatcherURL, "");
            defaultValues.Add(Configs.PlatformAuditing_DispatcherSecret, "");
            defaultValues.Add(Configs.PlatformAuditing_DispatcherTimeoutInMs, "0");

            // Session clean up:
            defaultValues.Add(Configs.SessionCleanUpEnabled, "true");
            defaultValues.Add(Configs.SessionCleanUpIntervalInSeconds, "300");

            // Session cookies flags:
            defaultValues.Add(Configs.EnforceSessionCookiesHttpOnly, "true");
            defaultValues.Add(Configs.EnforceSessionCookiesSecure, "false");

            // Db
            defaultValues.Add(Configs.Db_UsingIntegratedAuth, "false");

            // LibrariesPool
            defaultValues.Add(Configs.LibrariesPool_DanglingFilesLifespanInMinutes, ((int)TimeSpan.FromHours(24).TotalMinutes).ToString());
            defaultValues.Add(Configs.LibrariesPool_CleanupDanglingFilesIntervalInMinutes, "30");

            // Compiler_ForceNewLineAfterWebBlockInstance
            defaultValues.Add(Configs.Compiler_ForceNewLineAfterWebBlockInstance, "false");

            defaultValues.Add(Configs.IntegrationLogMaxMessageSizeForLogServer, "65535");
            defaultValues.Add(Configs.DisableOptimisticIntrospection, "false");

            defaultValues.Add(Configs.EncryptViewState, "true");
            defaultValues.Add(Configs.EncryptViewStateWithVisitorId, "true");
            defaultValues.Add(Configs.EncryptViewStateWithUserId, "false");


#if JAVA

            // JDBC Pool parameters:
            defaultValues.Add(Configs.JDBCPoolInactivityTimeout, "300");
            defaultValues.Add(Configs.JDBCPoolMaxPoolSize, "100");
            defaultValues.Add(Configs.JDBCPoolMinPoolSize, "10");
            defaultValues.Add(Configs.SessionJDBCMaxConnectionReuseTimeoutInSecs, Convert.ToString((int) TimeSpan.FromHours(4).TotalSeconds));
            defaultValues.Add(Configs.SynchronousCleanOsheCompClassLoader, "false");

            defaultValues.Add(Configs.Request_Timeout, "110");
            defaultValues.Add(Configs.Session_Timeout, "3600");
            defaultValues.Add(Configs.ApplicationServerProductName, "(Unknown product name)");
#endif

            defaultValues.Add(Configs.UseShortRequestsOnDebugger, DebuggerEvents.USE_SHORT_REQUESTS_DEFAULT.ToString());
            defaultValues.Add(Configs.AllowDebuggingMobileAppsFromAnyIP, "true");

            defaultValues.Add(Configs.Input_DecimalSeparator, ".");
            defaultValues.Add(Configs.Input_GroupSeparator, "");

            defaultValues.Add(Configs.ExportToExcel_UsePlatformDateFormat, "true");
            defaultValues.Add(Configs.ExportToExcel_WriteNullDateAsBlankCell, "true");

            defaultValues.Add(Configs.TenantIdsUpgraded, "false");

            defaultValues.Add(Configs.BPT_StartActivityReadyWaitTimeInSeconds, "30");
            defaultValues.Add(Configs.BPT_ConditionalStartListenersCreatedOnDemand, "false");
            defaultValues.Add(Configs.BPT_ImpactAnalysis_SkipFirstStageImpactAnalysis, "false");
            defaultValues.Add(Configs.BPT_ImpactAnalysis_DontUseConditionalStartsAndEnds, "true");
            defaultValues.Add(Configs.BPT_EnableLightProcessExecution, "false");
            defaultValues.Add(Configs.BPT_EnableImprovedDequeueEvent, "true");
            defaultValues.Add(Configs.ForceAppCacheUsage, "false");

            // Debug Logging flags
            defaultValues.Add(Configs.DebugSetCurrentLocale, "false");
        }

        public static string GetDefaultValue(string key) {
            string defaultValue;
            if (defaultValues.TryGetValue(key, out defaultValue)) {
                return defaultValue;
            }
            return null;
        }

        public static string[] GlobalSettings {
            get {
                return globalSettings;
            }
        }

        /// <summary>
        /// Collection of settings that are written in machine.config instead of being on the database
        /// </summary>
        private static readonly string[] globalSettings = new string[] {
                                                                           Configs.QueryTimeout,
                                                                           Configs.IntrospectionQueryTimeout,
                                                                           Configs.Oracle_DDL_LOCK_TIMEOUT_InSeconds,
                                                                           Configs.Kannel_UnifiedPrefix,
                                                                           Configs.SMSConnector_InboundQueue,
                                                                           Configs.SMSConnector_OutboundQueue,
                                                                           Configs.Compiler_DatabaseUnicodeSupport,
                                                                           Configs.IgnoreEspaceBasedOnPrevious,
                                                                           Configs.Kannel_Version,
                                                                           Configs.Sandbox_OperatingSandboxMode,
                                                                           Configs.Sandbox_BoxRootsPath,
                                                                           Configs.Sandbox_ServiceSettingsFilePath,
                                                                           Configs.Sandbox_BoxListFilePath,
                                                                           Configs.Sandbox_BoxKeyName,
                                                                           Configs.Sandbox_ActivationKeySecret,
                                                                           Configs.Sandbox_Hostname,
                                                                           Configs.InternalAddress,
                                                                           Configs.EmailNotification_QueuePath,
                                                                           Configs.JDBCPoolInactivityTimeout,
                                                                           Configs.JDBCPoolMaxPoolSize,
                                                                           Configs.JDBCPoolMinPoolSize,
                                                                           Configs.SessionJDBCMaxConnectionReuseTimeoutInSecs,
                                                                           Configs.Sandbox_EmailMinFetchIntervalInMinutes,
                                                                           Configs.DisableCompilationCaches,
                                                                           Configs.PluginDirectory,
                                                                           Configs.SettingsKeyPath,
                                                                           Configs.PlatformAuditing_DispatcherURL,
                                                                           Configs.PlatformAuditing_DispatcherSecret,
                                                                           Configs.PlatformAuditing_DispatcherTimeoutInMs,

#if JAVA

                                                                           Configs.Request_Timeout,
                                                                           Configs.Session_Timeout,
                                                                           Configs.AcceptedLicenseAgreementInVersion

#endif
                                                                       };

        private static readonly string[] unitTestSettings = new string[] {
                                                                           Configs.Compiler_UnitTestPath,
                                                                           Configs.Compiler_ForceCacheInvalidationSuffix,
                                                                           Configs.NssOMLProcessor_UnitTestPath,
                                                                           Configs.UpdateDeviceDb_UnitTestPath,
                                                                           Configs.Obfuscation_IldasmPath,
                                                                           Configs.Compiler_SharpTranslatorEXE,
                                                                           Configs.Compiler_Path,
                                                                           Configs.Compiler_BaseDirForTests,
                                                                           Configs.Compiler_OmlDecompAppForTests,
                                                                           Configs.DbServerTest_EngineeringServerName,
                                                                           Configs.DbServerTest_Installation_InstanceName,
                                                                           Configs.DbServerTest_DatabaseName,
                                                                           Configs.DbServerTest_OtherCatalog,
                                                                           Configs.Docs_UnitTestPath,
                                                                           Configs.TestsCommon_UnitTestPath,
                                                                           Configs.Common_UnitTestPath,
                                                                           Configs.ServerTests_UnitTestPath,
                                                                           Configs.OmlResources_UnitTestsPath,
                     Configs.SAPServerMock_Path
        };

        public static string[] RequireCompileSettings {
            get {
                return requireCompileSettings;
            }
        }

        /*
         * Settings that require eSpaces to be compiled to use the new settings or that influence the compilation process 
         * RequireCompileSettings cannot contain NodeSettings
         */

        private static readonly string[] requireCompileSettings = new string[] {
                                                                Configs.DateFormat,
                                                                Configs.Compiler_DatabaseUnicodeSupport,
                                                                Configs.Compiler_targetOutput,
                                                                Configs.Compiler_Optimize,
                                                                Configs.Compiler_dontCatchExceptions,
                                                                Configs.Compiler_compressViewState,
                                                                Configs.Compiler_genQueriesCoverageCode,
                                                                Configs.Compiler_SigDbgFilesPath,
                                                                Configs.Compiler_WSDLCheckTimeout,
                                                                Configs.Compiler_DefaultPhysicalTableName,
                                                                Configs.Compiler_EnforceIndent,
                                                                Configs.Compiler_TranslationsOverride_TranslateAllResources,
                                                                Configs.Compiler_TranslationsOverride_UseDBTranslations,
                                                                Configs.Compiler_CssCompilationStrategy,
                                                                Configs.Compiler_EnablePrecacheSupport,
                                                                Configs.Compiler_EnableOnNotifyServerSide,
                                                                Configs.ServerKind,
                                                                Configs.DefaultErrorPage,
                                                                Configs.UnifiedEspaceKey,
                                                                Configs.ForceEncryptedDatabaseImagePages
        };

        public static string[] SharedSettings {
            get {
                return sharedSettings;
            }
        }

        public static string[] MessageQueues {
            get { return messageQueues; }
        }

        public static string[] NodeSettings {
            get {
                return nodeSettings;
            }
        }

        /// <summary>
        /// Settings that are volatile aren't cached and therefore are always
        /// retrieved from the configuration files or database.
        /// </summary>
        public static string[] VolatileSettings {
            get {
                return volatileSettings;
            }
        }

        /* Here we are going to define witch settings are to be written in both places */

        private static readonly string[] sharedSettings = new string[] {
                                                                           /* These configs must be on the config files to obtain the global settings */
                                                                           Configs.InstanceName,
                                                                       };

        private static readonly string[] encryptedSettings = new string[] {
                                                                              Configs.SMSGatewayAdapter_Password,
                                                                              Configs.Kannel_Password,
                                                                              Configs.Kannel_StatusPassword,
                                                                              Configs.Email_Password,
                                                                              Configs.ClientApplicationToken,
                                                                              Configs.AuthenticationHMACKey,
                                                                              Configs.AuthenticationEncryptKey,
                                                                              Configs.DotNet_SCProxyUserName,
                                                                              Configs.DotNet_SCProxyPassword,
                                                                              Configs.PlatformAuditing_DispatcherURL,
                                                                              Configs.PlatformAuditing_DispatcherSecret,
                                                                              Configs.PlatformAuditing_DispatcherTimeoutInMs,
    };

        private static readonly string[] volatileSettings = new string[] {
            Configs.UpdateDBTimeout,
            Configs.DefaultDnsName,
            Configs.Email_DefaultOriginator,
            Configs.Email_DefaultOriginatorName,
            Configs.Email_EnableEmails,
            Configs.Email_TestEmails,
            Configs.DotNet_SCProxyUserName,
            Configs.DotNet_SCProxyPassword,
        };

        public interface ISettingsCache<TValue> {
            bool Contains(string key);
            bool Remove(string key);
            TValue Get(string key);
            void Set(string key, TValue value);
            void Flush();
            IList<Pair<string, TValue>> GetByPrefix(string prefix);
        }

        public class SettingsCache<TValue> : ISettingsCache<TValue>, IDisposable {
            private readonly IDictionary<string, TValue> cache = new Dictionary<string, TValue>();

            public bool Contains(string key) {
                return cache.ContainsKey(key);
            }

            public bool Remove(string key) {
                return cache.Remove(key);
            }

            public TValue Get(string key) {
                TValue result;
                if (!cache.TryGetValue(key, out result)) {
                    return default(TValue);
                }

                return result;
            }

            public void Set(string key, TValue value) {
                cache[key] = value;
            }

            public void Flush() {
                cache.Clear();
            }

            public void Dispose() {
            }

            public IList<Pair<string, TValue>> GetByPrefix(string prefix) {
                var entries = new List<Pair<string, TValue>>();
                foreach (var entry in cache) {
                    if (entry.Key.StartsWith(prefix)) {
                        entries.Add(Pair.Create(entry.Key, entry.Value));
                    }
                }
                return entries;
            }
        }

        private static ISettingsCache<string> settingsCache = new SettingsCache<string>();
        private static ISettingsCache<int> settingsCacheInt = new SettingsCache<int>();
        private static ISettingsCache<decimal> settingsCacheDecimal = new SettingsCache<decimal>();
        private static ISettingsCache<bool> settingsCacheBool = new SettingsCache<bool>();

        public static void FlushCache() {
            lock (typeof(Settings)) {
                settingsCache.Flush();
                settingsCacheInt.Flush();
                settingsCacheDecimal.Flush();
                settingsCacheBool.Flush();
            }
        }


        private static bool searchStringInArray(string name, string[] array) {
            foreach (string s in array) {
                if (s.CompareTo(name) == 0) {
                    return true;
                }
            }
            return false;
        }

        public static bool isNodeSetting(string name) {
            return searchStringInArray(name, nodeSettings);
        }

        public static bool isEncryptedSetting(string key) {
            return searchStringInArray(key, encryptedSettings);
        }

        public static bool isGlobalSetting(string key) {
            return searchStringInArray(key, globalSettings) || DatabaseConfigurations.IsSettingKey(key);
        }

        public static bool isUnitTestSetting(string key) {
            return searchStringInArray(key, unitTestSettings);
        }

        public static bool isRequireCompileSetting(string key) {
            return searchStringInArray(key, requireCompileSettings);
        }

        public static bool isSharedSetting(string key) {
            return searchStringInArray(key, sharedSettings);
        }

        public static bool isVolatileSetting(string key) {
            return searchStringInArray(key, volatileSettings);
        }

        public static bool isInitalizedPersistentSettings() {
            try {
                string osversion = Settings.Get(Configs.OSVersion);
                return !string.IsNullOrEmpty(osversion);
            } catch (SqlException) {
                // Cannot access database - assume settings are not initialized
                return false;
            }
        }

        /// <summary>
        /// This method only sets the parameter temporarily.
        /// If you want to set the configuration in a persistent fashion, use the <b>SetPersistent</b> method.
        /// </summary>
        public static void Set(string key, string value) {
            if (isVolatileSetting(key)) {
                throw new InvalidOperationException("Volatile settings can't be set on cache. SetPersistent should be used instead.");
            }

            lock (typeof(Settings)) {
                settingsCache.Set(key, value);
                settingsCacheBool.Remove(key);
                settingsCacheDecimal.Remove(key);
                settingsCacheInt.Remove(key);
            }
        }

        /// <summary>
        /// This method sets a persistent value for the configuration parameter.
        /// </summary>
        /// <param name="key">Parameter name</param>
        /// <param name="value">Parameter value</param>
        public static void SetPersistent(string key, string value) {
            SetPersistent(key, value, isNodeSetting(key), isEncryptedSetting(key));
        }

        public static void SetPersistent(Transaction trans, string key, string value) {
            SetPersistent(trans, key, value, isNodeSetting(key), isEncryptedSetting(key));
        }

        internal static void SetPersistent(string key, string value, bool isNodeSetting, bool isEncryptedSetting) {
            using (var trans = DatabaseAccess.ForSystemDatabase.GetCommitableTransaction()) {
                SetPersistent(trans, key, value, isNodeSetting, isEncryptedSetting);
                trans.Commit();
            }
        }

        internal static void SetPersistent(Transaction trans, string key, string value, bool isNodeSetting, bool isEncryptedSetting) {
            if (!isVolatileSetting(key)) {
                Set(key, value);
            }

            foreach (settingStoreWriter settingWriterOverride in settingWriterOverrides) {
                bool fallback;
                settingWriterOverride(key, value, out fallback);
                if (!fallback) {
                    return;
                }
            }
            if (isGlobalSetting(key)) {
                throw new InvalidOperationException("Cannot persistently set a global setting. Please use the Platform Server Configuration Tool to accomplish such task.");
            } else {
                if (value != null) {
                    if (isEncryptedSetting) {
                        value = SecureConfidentialInformationEncryption.EncryptMaintainingCompatibility(trans, value);
                    }

                    if (!DBRuntimePlatform.Instance.UpdateParameter(trans, key, value, isNodeSetting)) {
                        DBRuntimePlatform.Instance.CreateParameter(trans, key, value, isNodeSetting);
                    }
                } else {
                    DBRuntimePlatform.Instance.DeleteParameter(trans, key, isNodeSetting);
                }
            }
        }

        public delegate void settingStoreWriter(string key, string value, out bool use_default);

        public interface SettingsStoreReader {
            string Get(string key, out bool fallback);
            int GetInt(string key, out bool fallback);
            bool GetBool(string key, out bool fallback);
            decimal GetDecimal(string key, out bool fallback);
            IEnumerable<Pair<string, string>> GetByPrefix(string prefix, out bool fallback);
        }

        private static Stack<settingStoreWriter> settingWriterOverrides = new Stack<settingStoreWriter>();
        private static Stack<SettingsStoreReader> settingReaderOverrides = new Stack<SettingsStoreReader>();

        public static void OverrideSettings(SettingsStoreReader ssr, settingStoreWriter ssw,
                                            ISettingsCache<string> settingsCache,
                                            ISettingsCache<int> settingsCacheInt,
                                            ISettingsCache<decimal> settingsCacheDecimal,
                                            ISettingsCache<bool> settingsCacheBool) {
            lock (typeof(Settings)) {
                settingReaderOverrides.Push(ssr);
                settingWriterOverrides.Push(ssw);
                Settings.settingsCache = settingsCache;
                Settings.settingsCacheInt = settingsCacheInt;
                Settings.settingsCacheDecimal = settingsCacheDecimal;
                Settings.settingsCacheBool = settingsCacheBool;
            }
        }

        public static void PushSettingsStoreOverride(SettingsStoreReader ssr, settingStoreWriter ssw) {
            OverrideSettings(ssr, ssw, Settings.settingsCache, Settings.settingsCacheInt, Settings.settingsCacheDecimal, Settings.settingsCacheBool);
        }

        public static void PopSettingsStoreOverride() {
            lock (typeof(Settings)) {
                settingReaderOverrides.Pop();
                settingWriterOverrides.Pop();
            }
        }

        /// <summary>
        /// Throws an exception if key does not exists in the config.
        /// </summary>
        public static bool GetBool(string key) {
            return GetBool(key, null);
        }

        public static bool GetBoolSkipCache( string key) {
            return Get(key, /*skipCache*/true).ToLowerInvariant().Equals("true");
        }

        /// <summary>
        /// Throws an exception if key does not exists in the config.
        /// </summary>
        public static bool GetBool(string key, Transaction trans) {
            lock (typeof(Settings)) {
                foreach (var settingReaderOverride in settingReaderOverrides) {
                    bool fallback;
                    var result = settingReaderOverride.GetBool(key, out fallback);
                    if (!fallback) {
                        return result;
                    }
                }
                if (settingsCacheBool.Contains(key)) {
                    return settingsCacheBool.Get(key);
                } else {
                    bool value = false;
                    try {
                        value = bool.Parse(trans == null ? Get(key) : Get(key, trans));
                    } catch (FormatException) { }
                    if (!isVolatileSetting(key)) {
                        settingsCacheBool.Set(key, value);
                    }
                    return value;
                }
            }
        }

        /// <summary>
        /// Return nullValue if key does not exists in the config.
        /// </summary>
        public static bool GetBool(string key, bool nullValue, bool preserveInCacheIfNull) {
            return GetBool(key, nullValue, preserveInCacheIfNull, null);
        }

        /// <summary>
        /// Return nullValue if key does not exists in the config.
        /// </summary>
        public static bool GetBool(string key, bool nullValue, bool preserveInCacheIfNull, Transaction trans) {
            string retval = (trans == null ? Get(key) : Get(key, trans));
            if (retval == null) {
                if (preserveInCacheIfNull) {
                    Set(key, nullValue.ToString());
                }
                return nullValue;
            } else {
                try {
                    return bool.Parse(retval);
                } catch (FormatException) {
                    return nullValue;
                }
            }
        }

        /// <summary>
        /// Returns the int value for a setting.
        /// Throws an exception if key does not exists in the config.
        /// </summary>
        public static int GetInt(string key) {
            return GetInt(key, null);
        }

        /// <summary>
        /// Returns the int value for a setting.
        /// Throws an exception if key does not exists in the config.
        /// Uses the Transaction passed by argument.
        /// </summary>
        public static int GetInt(string key, Transaction transaction) {
            lock (typeof(Settings)) {
                foreach (var settingReaderOverride in settingReaderOverrides) {
                    bool fallback;
                    var result = settingReaderOverride.GetInt(key, out fallback);
                    if (!fallback) {
                        return result;
                    }
                }
                if (settingsCacheInt.Contains(key)) {
                    return settingsCacheInt.Get(key);
                } else {
                    int value = 0;
                    try {
                        value = int.Parse(transaction == null ? Get(key) : Get(key, transaction));
                    } catch (FormatException) { }
                    if (!isVolatileSetting(key)) {
                        settingsCacheInt.Set(key, value);
                    }
                    return value;
                }
            }
        }

        /// <summary>
        /// Returns the decimal value for a setting.
        /// Throws an exception if key does not exists in the config.
        /// </summary>
        public static decimal GetDecimal(string key) {
            lock (typeof(Settings)) {
                foreach (var settingReaderOverride in settingReaderOverrides) {
                    bool fallback;
                    var result = settingReaderOverride.GetDecimal(key, out fallback);
                    if (!fallback) {
                        return result;
                    }
                }
                if (settingsCacheDecimal.Contains(key)) {
                    return settingsCacheDecimal.Get(key);
                } else {
                    decimal value = 0;
                    try {
                        value = decimal.Parse(Get(key), NumberFormatInfo.InvariantInfo);
                    } catch (FormatException) { }
                    if (!isVolatileSetting(key)) {
                        settingsCacheDecimal.Set(key, value);
                    }
                    return value;
                }
            }
        }

        /// <summary>
        /// Return nullValue if key does not exists in the config.
        /// </summary>
        public static int GetInt(string key, int nullValue, bool preserveInCacheIfNull) {
            string retval = Get(key);
            if (retval == null) {
                if (preserveInCacheIfNull) {
                    Set(key, nullValue.ToString());
                }
                return nullValue;
            } else {
                return int.Parse(retval);
            }
        }

        public static string Get(string key, string nullValue) {
            string retval = Get(key);
            if (retval == null) {
                return nullValue;
            } else {
                return retval;
            }
        }

        public static string GetPlain(string key) {
            if (isEncryptedSetting(key)) {
                return EncryptString(Get(key));
            } else {
                return Get(key);
            }
        }

        public static string Get(string key, bool skipCache) {
            return Get(key, /*isNodeSetting*/null, /*isEncryptedSetting*/null, /*transaction*/null, skipCache);
        }

        public static string Get(string key) {
            return Get(key, /*isNodeSetting*/null, /*isEncryptedSetting*/null, /*transaction*/null, /*skipCache*/false);
        }

        public static string Get(string key, Transaction transaction) {
            return Get(key, /*isNodeSetting*/null, /*isEncryptedSetting*/null, transaction, /*skipCache*/false);
        }

        internal static IEnumerable<Pair<string, string>> GetByPrefix(string prefix) {
            // check overrides first
            lock (typeof(Settings)) {

                foreach (var settingReaderOverride in settingReaderOverrides) {
                    bool fallback;
                    var result = settingReaderOverride.GetByPrefix(prefix, out fallback);
                    if (!fallback) {
                        return result;
                    }
                }

                try {

                    // First we check the cache
                    var cacheEntries = settingsCache.GetByPrefix(prefix);
                    if (cacheEntries.Count > 0) {
                        return cacheEntries;
                    }

                    var globalEntries = GetGlobalSettingByPrefix(prefix);
                    var byPrefix = GetGlobalSettingByPrefix(prefix) as Pair<string, string>[] ?? globalEntries.ToArray();

                    foreach (var entry in byPrefix.Where(entry => isEncryptedSetting(entry.First))) {
                        entry.Second = DecryptString(entry.Second);
                    }

                    foreach (var entry in byPrefix.Where(entry => entry.Second != null)) {
                        entry.Second = entry.Second.Trim();
                    }

                    foreach (var entry in byPrefix.Where(entry => !isVolatileSetting(entry.First))) {
                        settingsCache.Set(entry.First, entry.Second);
                    }

                    return byPrefix;
                } catch (Exception e) {
                    throw new InvalidOperationException(e.Message, e);
                }
            }
        }

        internal static string Get(string key, bool? isNodeSettingParam, bool? isEncryptedSettingParam, Transaction transaction, bool skipCache) {
            lock (typeof(Settings)) {
                foreach (var settingReaderOverride in settingReaderOverrides) {
                    bool fallback;
                    string result = settingReaderOverride.Get(key, out fallback);
                    if (!fallback) {
                        return result;
                    }
                }
                try {
                    // First we check the cache
                    if (!skipCache && settingsCache.Contains(key)) {
                        return settingsCache.Get(key);
                    }
                    string retval = null;
                    if (isGlobalSetting(key)) { // get from .config
                        retval = GetGlobalSetting(key);
                    } else if (isUnitTestSetting(key)) {
                        retval = GetUnitTestSetting(key);
                    } else { // get from .database
                        retval = GetParameter(key, isNodeSettingParam.HasValue ? isNodeSettingParam.Value : isNodeSetting(key), transaction);
                    }

                    if (isEncryptedSettingParam.HasValue ? isEncryptedSettingParam.Value : isEncryptedSetting(key)) {
                        retval = DecryptString(retval);
                    }

                    if (retval == null) {
                        retval = GetDefaultValue(key);
                    }

                    if (retval != null) {
                        retval = retval.Trim();
                    }

                    if (!isVolatileSetting(key)) {
                        settingsCache.Set(key, retval);
                    }
                    return retval;
                } catch (Exception e) {
                    throw new InvalidOperationException(e.Message, e);
                }
            }
        }

        private static string GetParameter(string name, bool isNodeSetting, Transaction transaction) {
            string result = null;
            int retries = 3;
            for (; ; ) {
                Transaction tran = (transaction ?? DatabaseAccess.ForSystemDatabase.GetCommitableTransaction());
                try {
                    object val = DBRuntimePlatform.Instance.GetParameterValue(tran, name, isNodeSetting);
                    if (val != DBNull.Value) {
                        result = (string)val;
                    }
                } catch (Exception e) {
                    OSTrace.Error("Retrieving Parameter " + name, e);
                    if (retries-- == 0) {
                        OSTrace.Error("Failing on GetParameter('" + name + "') after using all retries");
                        throw;
                    } else {
                        continue;
                    }
                } finally {
                    if (transaction == null) {
                        tran.Dispose();
                    }
                }
                break;
            }
            return result;
        }

        /// <summary>
        /// Gets a unit test setting from the local config. These settings are not indexed by instance name.
        /// </summary>
        private static string GetUnitTestSetting(string key) {
            string retval = null;

            retval = GetUnitTestCustomConfig(key);
            if (retval == null) {
                retval = ConfigurationManager.AppSettings[key];
            }
            return retval;
        }

        private static string GetUnitTestCustomConfig(string key) {

            try {
                
                string assemblyLocation = new Uri(Assembly.GetExecutingAssembly().CodeBase).LocalPath;
                IList<string> possiblePath = new List<string>() {
                                    "C:\\espace-machine\\HubServerTestSettingsCustom.config",
                                    "C:\\espace\\HubServer\\ServerTests\\HubServerTestSettings.config",
                                };
                if (assemblyLocation.IndexOf("Build") > 0) {
                    possiblePath.Insert(0, assemblyLocation.Substring(0, assemblyLocation.IndexOf("Build")) + "HubServer\\ServerTests\\HubServerTestSettings.config");
                    possiblePath.Insert(0, assemblyLocation.Substring(0, assemblyLocation.IndexOf("Build")) + "HubServerTestSettingsCustom.config");
                }

                string path = "";
                foreach (string pathTest in possiblePath) {
                    path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, pathTest);
                    FileInfo file = new FileInfo(path);
                    if (file.Exists) {

                        XmlDocument doc = new XmlDocument();
                        doc.Load(path);

                        XmlNode setting = doc.SelectSingleNode("//configuration/appSettings/add[@key='" + key + "']/@value");

                        if (setting != null) {
                            return setting.Value;
                        }

                    } else {
                        path = "";
                    }
                }
                if (path == "") {
                    return null;
                }

            } catch { }
            return null;
        }

        /// <summary>
        /// Gets a global setting from the machine.config, indexing by instance name that should be in the local .config.
        /// </summary>
        private static string GetGlobalSetting(string key) {

            // Check if there is an alternate config file (usually inside unit tests)
            
            if (!string.IsNullOrEmpty(AlternateConfigFile) && File.Exists(AlternateConfigFile)) {
                try {
                    XmlDocument alternateConfig = new XmlDocument();
                    alternateConfig.Load(AlternateConfigFile);
                    XmlNode instanceNameNode = alternateConfig.SelectSingleNode("//configuration/appSettings/add[@key='" + Configs.InstanceName + "']/@value");
                    if (instanceNameNode != null) {
                        string fullGlobalKey = Configs.GetFullGlobalKey(instanceNameNode.Value, key);
                        return GetFromConfigurationManager(fullGlobalKey);
                    }
                } catch {
                }
            }
            // fallback to the .config file!
            return GetFromConfigurationManager(Configs.GetFullGlobalKey(ConfigurationManager.AppSettings[Configs.InstanceName], key));
        }

        /// <summary>
        /// Gets a global setting from the machine.config, indexing by instance name that should be in the local .config.
        /// </summary>
        private static IEnumerable<Pair<string, string>> GetGlobalSettingByPrefix(string prefix) {

            // Check if there is an alternate config file (usually inside unit tests)
            
            if (!string.IsNullOrEmpty(AlternateConfigFile) && File.Exists(AlternateConfigFile)) {
                try {
                    XmlDocument alternateConfig = new XmlDocument();
                    alternateConfig.Load(AlternateConfigFile);
                    XmlNode instanceNameNode = alternateConfig.SelectSingleNode("//configuration/appSettings/add[@key='" + Configs.InstanceName + "']/@value");
                    if (instanceNameNode != null) {
                        Func<string, bool> fromInstance = key => key.EndsWith(Configs.GlobalKeySuffix(instanceNameNode.Value));
                        return GetFromConfigurationManager(key => key.StartsWith(prefix) && fromInstance(key), Configs.GlobalKeySuffix(instanceNameNode.Value));
                    }
                } catch {
                }
            }
            // fallback to the .config file!

            Func<string, bool> fromDefaultInstance = key => key.EndsWith(Configs.GlobalKeySuffix(ConfigurationManager.AppSettings[Configs.InstanceName]));

            return GetFromConfigurationManager(key => key.StartsWith(prefix) && fromDefaultInstance(key), Configs.GlobalKeySuffix(ConfigurationManager.AppSettings[Configs.InstanceName]));
        }

#if DEBUG
        private static XmlDocument machineConfigDocument;
#endif

        private static IEnumerable<Pair<string, string>> GetFromConfigurationManager(Func<string, bool> predicate, string suffix) {
            var entries = new List<Pair<string, string>>();
            foreach (var key in ConfigurationManager.AppSettings.AllKeys) {
                if (predicate(key)) {
                    entries.Add(Pair.Create(key.RightCut(suffix.Length), ConfigurationManager.AppSettings[key]));
                }
            }
            return entries;
        }

        private static string GetFromConfigurationManager(string fullGlobalKey) {
            string retVal = ConfigurationManager.AppSettings[fullGlobalKey];
#if DEBUG
            // This code is only needed in scenarios where the machine.config settings are not applied to the application
            // due to security restrictions.
            // This happens if the assemblies are located in network drives. The issue manifests itself during some unit tests.
            if (retVal == null) {
                try {
                    if (machineConfigDocument == null) {
                        string machineConfigPath = @"C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\CONFIG\machine.config";
                        machineConfigDocument = new XmlDocument();
                        machineConfigDocument.Load(machineConfigPath);
                    }
                    XmlNode settingNode = machineConfigDocument.SelectSingleNode("//configuration/appSettings/add[@key='" + fullGlobalKey + "']/@value");
                    if (settingNode != null) {
                        retVal = settingNode.Value;
                    }
                } catch {
                }
            }
#endif
            return retVal;
        }

        private static string _machineName;
        public static string MachineName {
            get {
                lock (typeof(DBRuntimePlatform)) {
                    if (_machineName == null) {
                        _machineName = Environment.MachineName.ToUpper();
                    }
                    return _machineName;
                }
            }
        }

        public static string EncryptString(string text) {
            return SecureConfidentialInformationEncryption.EncryptWithBestAlgorithm(text);
        }

        public static string DecryptString(string text) {
            if (!text.IsNullOrEmpty()) {
                try {
                    return SecureConfidentialInformationEncryption.Decrypt(text);
                }
                catch (Exception) {
                //exception not handled
                }
            }
            return text;
        }

        public static IEnumerable<string> EncryptedSettings { get { return encryptedSettings; } }
    }
}
