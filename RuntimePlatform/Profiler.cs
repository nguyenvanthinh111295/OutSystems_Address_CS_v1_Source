/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Runtime.Remoting.Channels;
using System.Runtime.Remoting.Channels.Tcp;
using System.Threading;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform {

    public class Profiler {

        public static ProfilerData profilerData;      

        static Profiler() {
            profilerData = new ProfilerData();
            Thread t = new Thread(PushProfilerMetricsToLogServer);
            t.Start();
        }

        private static IProfiler serverLog;
        public static IProfiler ServerLog {
            get {
                if (serverLog == null) {
                    ChannelServices.RegisterChannel(new TcpClientChannel("Profiler", null), false);
                    string uri = "tcp://" + "localhost" + ":" + Settings.GetInt(Settings.Configs.LogServer_Service_Port) + "/" + Settings.GetPlain(Settings.Configs.LogServer_Service_Uri);
                    serverLog = (IProfiler)Activator.GetObject(typeof(IProfiler), uri);
                }
                return serverLog;
            }
        }

        public static void ProfileElement(string eSpaceGUID, string elemKey, long elapsedMilliseconds, bool error, int iterationCount, bool cacheHit, List<string> usedEntitiesKeys, bool isUpdate) {
            if (!Settings.GetBool(Settings.Configs.Profiler_Enabled)) {
                return;
            }

            Dictionary<string, EspaceProfilerData> todayProfilerData = profilerData.espacesProfilerData;
            if (!todayProfilerData.ContainsKey(eSpaceGUID)) {
                lock (todayProfilerData) {
                    if (!todayProfilerData.ContainsKey(eSpaceGUID)) {
                        todayProfilerData.Add(eSpaceGUID, new EspaceProfilerData());
                    }
                }
            }

            if (!todayProfilerData[eSpaceGUID].elementsProfilerData.ContainsKey(elemKey)) {
                lock (todayProfilerData[eSpaceGUID]) {
                    if (!todayProfilerData[eSpaceGUID].elementsProfilerData.ContainsKey(elemKey)) {
                        ElementProfilerData element = new ElementProfilerData();
                        if(usedEntitiesKeys != null) {
                            element.usedEntitiesKeys = usedEntitiesKeys;
                        }
                        element.isUpdate = isUpdate;
                        todayProfilerData[eSpaceGUID].elementsProfilerData.Add(elemKey, element);
                    }
                }
            }
            ElementProfilerData elm = todayProfilerData[eSpaceGUID].elementsProfilerData[elemKey];
            lock (elm) {
                elm.IncreaseData(1, elapsedMilliseconds, error ? 1 : 0, iterationCount, cacheHit ? 1 : 0);
            }
        }

        public static void PushProfilerMetricsToLogServer() {
            RuntimePlatformUtils.SetupCurrentThreadCulture();
            while (true) {
                try {
                    ProfilerData oldProfilerData = profilerData;
                    profilerData = new ProfilerData();
                    ServerLog.PushProfilerMetricsToLogServer(oldProfilerData);
                } catch (System.Net.Sockets.SocketException) { }
                Thread.Sleep(Settings.GetInt(Settings.Configs.Profiler_PushMetricsToLogServerIntervalMs));
            }
        }
    }
}