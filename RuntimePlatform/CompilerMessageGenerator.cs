/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;

namespace OutSystems.HubEdition.RuntimePlatform.Broadcasting {

    // If you need to add a message that's going to be used only by the services
    // you needn't make the RuntimePlatform fatter (and all the deployed eSpaces too).
    // Instead, use ServerCommon.ServiceBroadcastMessages.

	[Serializable()]
	public abstract class BroadcastMessage {
        public string SandboxName;
        public bool Parallelize = true;
	}

    public interface BroadcastMessageZoneAware {
        string getEspaceName();
    }

    [Serializable]
    public abstract class BaseDeployEspaceMsg: BroadcastMessage, BroadcastMessageZoneAware {
        public string EspaceName;	
        public int EspaceVersionId;		
        public string UserName;		
        public string UniqueId;
        public string EspaceKey;
        public bool FromSS;
        public bool DevelopmentMode;
        public string getEspaceName() {
            return EspaceName;
        }     	
    }

	[Serializable()]
    public class DeployEspaceMsg : BaseDeployEspaceMsg {
		public bool ForceRedeploy;
		public bool Partial;
	}

    [Serializable()]
    public class DeployEspaceChangeVdirMsg : BaseDeployEspaceMsg {
		public IEnumerable<string> OnDeployInvokeUrls;
	}

    [Serializable()]
    public class DeployEspaceStartApplicationMsg : BroadcastMessage, BroadcastMessageZoneAware {
        public string EspaceName;
		public int EspaceVersionId;
        public string UserName;
		public string UniqueId;
        public string getEspaceName() {
            return EspaceName;
        }
	}

    [Serializable()]
    public class DeployAbortMsg : BroadcastMessage, BroadcastMessageZoneAware {
        public string EspaceName;
        public string UserName;
		public string UniqueId;
        public string getEspaceName() {
            return EspaceName;
        }
	}

	[Serializable()]
    public class UndeployEspaceMsg : BroadcastMessage, BroadcastMessageZoneAware {
        public string EspaceName;
        public string getEspaceName() {
            return EspaceName;
        }
    }

    [Serializable()]
    public class RefreshEspaceZoneStatusMsg : BroadcastMessage, BroadcastMessageZoneAware {
        public string EspaceName;
        public string getEspaceName() {
            return EspaceName;
        }
    }

	[Serializable()]
    public class DeployTenantMsg : BroadcastMessage, BroadcastMessageZoneAware {
		public string EspaceName;
		public int EspaceVersionId;
		public string TenantName;
        public string getEspaceName() {
            return EspaceName;
        }
	}
	
	[Serializable()]
	public class TenantInvalidateCacheMsg : BroadcastMessage {
		public int TenantId;
	}
	
	[Serializable()]
	public class InvalidatePhysNbrCacheMsg : BroadcastMessage {
		public string PhysicalNbr;
	}

	[Serializable()]
	public class InvalidateErrorCacheMsg : BroadcastMessage {
	}

	[Serializable()]
	public class EspaceInvalidateCacheMsg : BroadcastMessage {
		public int eSpaceId;
		public int TenantId;
	}
	
	[Serializable()]
    public class TouchWebConfigMsg : BroadcastMessage, BroadcastMessageZoneAware {
		public string eSpace;
        public string getEspaceName() {
            return eSpace;
        }
    }

	[Serializable()]
	public class RefreshISAPIStateMsg : BroadcastMessage {
		public bool Refresh;
		public bool Verbose;
	}

    [Serializable()]
    public class PingMessage : BroadcastMessage {
        public PingMessage(string sandboxKey) : base() {
            SandboxName = sandboxKey;
        }
    }

    // If you need to add a message that's going to be used only by the services
    // you needn't make the RuntimePlatform fatter (and all the deployed eSpaces too).
    // Instead, use ServerCommon.ServiceBroadcastMessages.
}