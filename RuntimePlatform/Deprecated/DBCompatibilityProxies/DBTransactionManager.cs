/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.TransactionService;
using OutSystems.HubEdition.RuntimePlatform.DBCompatibilityProxies.Adapters;
using OutSystems.Internal.Db;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform {
    [Obsolete("No alternative. Make extension database agnostic")]
    public enum DBKind {
        SqlServer,
        Oracle,
        MySQL,
    }

    [Obsolete("No alternative")]
    public enum DBAuthenticationType {
        DBAuth,
        IntegratedAuth
    }

    [Obsolete("No alternative")]
    public enum DBDatasourceKind {
        TnsName,
        Sid,
        ServiceName
    }

    [Obsolete("No alternative")]
    public enum DBSqlServerVersion {
        Sql2000,
        Sql2005,
        Sql2008,
        Sql2012,
        Unknown,
    }

    [Obsolete("No alternative")]
    public class DBKindUtils {
        public static DBKind ParseDBKind(string kind) {            
            if (kind.WithoutWhiteSpace().EqualsIgnoreCase("SqlServer")) {
                return DBKind.SqlServer;
            } else if (kind.EqualsIgnoreCase("Oracle")) {
                return DBKind.Oracle;
            } else {
                throw new DBUnknownDatabaseException("Unknown Database Kind : " + kind);
            }
        }
    }

    [Obsolete("Use OutSystems.RuntimePublic.Db.DatabaseAccess class to access a database and its services")]
    public class DBTransactionManager {

        public const int DEFAULT_CONNECTION_RETRIES = TransactionServiceConstants.DEFAULT_CONNECTION_RETRIES;

        public DatabaseAccess DBAccess { get; protected set; }

        private IDatabaseAccessProvider GetProviderFromConnectionNameOrMain(string connectionName) {
            return connectionName.IsNullOrEmpty() ? (IDatabaseAccessProvider) DBAccess.MainProvider : DBAccess.GetDBConnectionProvider(connectionName);
        }

        public static DBTransactionManager Current {
            get {
                try {
                    return new DBTransactionManager(DatabaseAccess.Current);
                } catch (InvalidDatabaseAccessException e) {
                    throw new InvalidDBTransactionManagerAccess(e.Message);
                }
            }
        }

        public static bool CurrentIsBuilt() {
            return DatabaseAccess.IsInitialized();
        }

        public virtual IDBConnectionManager SystemConnectionManager {
            get { return new DBConnectionManagerAdapter(DBAccess.SystemProvider.TransactionManager); }
        }
        
        public IDBConnectionManager GetRuntimeConnectionManager(string schema) {
            try {
                return new DBConnectionManagerAdapter(DBAccess.GetDatabaseProvider(schema).TransactionManager);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidCommitOrRollbackTransactionException e) {
                throw new InvalidCommitOrRollbackException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public virtual DBKind DBKind {
            get {
                try {
                    return AdaptersUtils.GetDBKind(DBAccess.SystemProvider.DatabaseServices);
                } catch (InvalidDatabaseAccessException e) {
                    throw new InvalidDBTransactionManagerAccess(e.Message);
                }
            }
        }

		public static string DBKindSchemaName { 
            get { 
                try {
                    return DatabaseAccess.ForSystemDatabase.DatabaseServices.DatabaseConfiguration.DatabaseProvider.Properties.DatabaseContainerName;
                } catch (InvalidDatabaseAccessException e) {
                    throw new InvalidDBTransactionManagerAccess(e.Message);
                }
            } 
        }

        public DBSqlServerVersion SqlServerVersion {
            get {
                try {
                    return SystemConnectionManager.DBServerVersion;
                } catch (InvalidDatabaseAccessException e) {
                    throw new InvalidDBTransactionManagerAccess(e.Message);
                } catch (InvalidTransactionReleaseException e) {
                    throw new InvalidReleaseException(e.Message);
                }
            } 
        }

        public DBAuthenticationType AuthenticationType {
            get { 
                try {
                    return AdaptersUtils.GetAuthenticationType(DBAccess.SystemProvider.DatabaseServices);
                } catch (InvalidDatabaseAccessException e) {
                    throw new InvalidDBTransactionManagerAccess(e.Message);
                } catch (InvalidTransactionReleaseException e) {
                    throw new InvalidReleaseException(e.Message);
                }
            }
        }

        public string Schema {
            get { 
                try {
                    return DBAccess.MainProvider.DatabaseServices.DatabaseConfiguration.DatabaseIdentifier; 
                } catch (InvalidDatabaseAccessException e) {
                    throw new InvalidDBTransactionManagerAccess(e.Message);
                }                
            }
        }
        
        public int QueryTimeout {
            get {
                try {
                    return DatabaseAccess.QueryTimeout;
                } catch (InvalidDatabaseAccessException e) {
                    throw new InvalidDBTransactionManagerAccess(e.Message);
                }
            }
        }

        public ConnectionString ConnectionStringObject {
            get { 
                try {
                    return AdaptersUtils.GetConnectionString(
                        GetProviderFromConnectionNameOrMain(null).DatabaseServices);
                } catch (InvalidDatabaseAccessException e) {
                    throw new InvalidDBTransactionManagerAccess(e.Message);
                } 
            }
        }

        public string ConnectionString {
            get {
                try {
                    return ConnectionStringObject.GetConnectionString(); 
                } catch (InvalidDatabaseAccessException e) {
                    throw new InvalidDBTransactionManagerAccess(e.Message);
                }
            }
        }

        public static bool BlockAccess {
            get { return DatabaseAccess.BlockAccess; }
            set { DatabaseAccess.BlockAccess = value; }
        }

        public int PooledBusyTransactionCount {
            get { return DBAccess.MainProvider.TransactionManager.BusyTransactionCount; }
        }
        
        public DBKind GetDatabaseKind(string connectionName) {
            try {
                return AdaptersUtils.GetDBKind(
                    GetProviderFromConnectionNameOrMain(connectionName).DatabaseServices);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public string GetSchema(string connectionName) {
            try {
                return GetProviderFromConnectionNameOrMain(connectionName).DatabaseServices.DatabaseConfiguration.DatabaseIdentifier;
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }
        
        public ConnectionString GetConnectionStringObject(string connectionName) {
            try {
                return AdaptersUtils.GetConnectionString(
                    GetProviderFromConnectionNameOrMain(connectionName).DatabaseServices);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }
        
        public string GetConnectionString(string connectionName) {
            try {
                return GetConnectionStringObject(connectionName).GetConnectionString();
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }
        
        public static void CreateDBTransactionManager() {
            try {
                DatabaseAccess.ResetConfiguration();
            } catch (TransactionException e) {
                throw new DatabaseTransactionException(e.Message, e);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        /// <summary>
        /// Initializes the connection manager based on the configuration.
        /// The number of connection retries given is ignored.
        /// </summary>
        public static void CreateDBTransactionManager(int connectionRetries) {
            CreateDBTransactionManager();
        }

        protected DBTransactionManager(DatabaseAccess transMan) {
            DBAccess = transMan;
        }

        public virtual IDbTransaction GetMainTransaction() {
            try {
                return ADOAdaptersUtils.AdapterTransaction(DBAccess.MainProvider.GetRequestTransaction().DriverTransaction);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public virtual IDbTransaction GetTransaction() {
            try {
                return ADOAdaptersUtils.AdapterTransaction(DBAccess.MainProvider.GetReadOnlyTransaction().DriverTransaction);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public virtual IDbTransaction GetPrivateTransaction() {
            try {
                return ADOAdaptersUtils.AdapterTransaction(DBAccess.MainProvider.GetCommitableTransaction().DriverTransaction);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public IDbTransaction GetMainTransaction(string connectionName) {
            try {
                return ADOAdaptersUtils.AdapterTransaction(GetProviderFromConnectionNameOrMain(connectionName).TransactionManager.GetRequestTransaction());
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public IDbTransaction GetTransaction(string connectionName) {
            try {
                return ADOAdaptersUtils.AdapterTransaction(GetProviderFromConnectionNameOrMain(connectionName).TransactionManager.GetReadOnlyTransaction());
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public IDbTransaction GetPrivateTransaction(string connectionName) {
            try {
                return ADOAdaptersUtils.AdapterTransaction(GetProviderFromConnectionNameOrMain(connectionName).TransactionManager.GetCommitableTransaction());
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }
        
        public virtual void ReleaseTransaction(IDbTransaction transaction) {
            try {
                IDbTransaction trans = ADOAdaptersUtils.GetADOTransaction(transaction);
                GetProviderFromConnectionNameOrMain(null).TransactionManager.ReleaseTransaction(trans);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public virtual void CommitTransaction(IDbTransaction transaction) {
            try {
                IDbTransaction trans = ADOAdaptersUtils.GetADOTransaction(transaction);
                GetProviderFromConnectionNameOrMain(null).TransactionManager.CommitTransaction(trans);
            } catch (InvalidCommitOrRollbackTransactionException e) {
                throw new InvalidCommitOrRollbackException(e.Message);
            }
        }

        public virtual void RollbackTransaction(IDbTransaction transaction) {
            try {
                IDbTransaction trans = ADOAdaptersUtils.GetADOTransaction(transaction);
                GetProviderFromConnectionNameOrMain(null).TransactionManager.RollbackTransaction(trans);
            } catch (InvalidCommitOrRollbackTransactionException e) {
                throw new InvalidCommitOrRollbackException(e.Message);
            }
        }

        public virtual void SafeRollbackTransaction(IDbTransaction transaction) {
            if (transaction != null) {
                RollbackTransaction(transaction);
            }
        }

        public void DisableCommits() {
            DatabaseAccess.DisableCommits = true;
        }

        public void CommitAllTransactions() {
            try {
                DBAccess.InnerCommitAllTransactions();
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public void RollbackAllTransactions() {
            try {
                DBAccess.InnerRollbackAllTransactions();
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public void abortTransaction(IDbTransaction transaction) {
            try {
                ReleaseTransaction(transaction);
            } catch (InvalidReleaseException) {
                RollbackTransaction(transaction);
            }
        }

        public void ReleaseTransaction(string connectionName, IDbTransaction transaction) {
            try {
                IDbTransaction trans = ADOAdaptersUtils.GetADOTransaction(transaction);
                GetProviderFromConnectionNameOrMain(connectionName).TransactionManager.ReleaseTransaction(trans);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public void CommitTransaction(string connectionName, IDbTransaction transaction) {
            try {
                IDbTransaction trans = ADOAdaptersUtils.GetADOTransaction(transaction);
                GetProviderFromConnectionNameOrMain(connectionName).TransactionManager.CommitTransaction(trans);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidCommitOrRollbackTransactionException e) {
                throw new InvalidCommitOrRollbackException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public void RollbackTransaction(string connectionName, IDbTransaction transaction) {
            try {
                IDbTransaction trans = ADOAdaptersUtils.GetADOTransaction(transaction);
                GetProviderFromConnectionNameOrMain(connectionName).TransactionManager.RollbackTransaction(trans);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidCommitOrRollbackTransactionException e) {
                throw new InvalidCommitOrRollbackException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public void abortTransaction(string connectionName, IDbTransaction transaction) {
            try {
                ReleaseTransaction(connectionName, transaction);
            } catch (InvalidReleaseException) {
                RollbackTransaction(connectionName, transaction);
            }
        }

        public IDbTransaction CreateTransaction(string connectionString) {
            try {
                return CreateTransaction(new ConnectionString(connectionString));
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public IDbTransaction CreateTransaction(ConnectionString connectionString) {
            try {
                return SystemConnectionManager.CreateTransaction(connectionString);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public void CloseTransaction(IDbTransaction transaction) {
            IDbTransaction trans = ADOAdaptersUtils.GetADOTransaction(transaction);
            IDatabaseServices databaseServices = DBHelper.GetDatabaseServicesForConnection(trans.Connection);
            databaseServices.TransactionService.CloseTransaction(trans);
        }


        public IDbTransaction CreateTransaction(string connectionName, string connectionString) {
            try {
                if (!String.IsNullOrEmpty(connectionName)) {
                    IDatabaseServices databaseServices = AdaptersUtils.GetDatabaseServices(GetDatabaseKind(connectionName),
                        new ConnectionString(connectionString));

                    ITransactionManager baseTransactionManager = GetProviderFromConnectionNameOrMain(connectionName).TransactionManager;
                    ITransactionService transactionService = databaseServices.TransactionService;

                    IDbConnection connection = transactionService.CreateConnection();

                    return ADOAdaptersUtils.AdapterTransaction(transactionService.CreateTransaction(connection));
                } else {
                    return CreateTransaction(connectionString);
                }
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }
        
        public IDbConnection CreateConnection(string connectionString) {
            try {
                return CreateConnection(new ConnectionString(connectionString));
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }
        
        public IDbConnection CreateConnection(ConnectionString connectionString) {
            try {
                string schema = DBAccess.SystemProvider.DatabaseServices.DatabaseConfiguration.DatabaseIdentifier;
                return AdaptersUtils.GetDatabaseServices(DBKind, connectionString, schema).TransactionService.CreateConnection();
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public IDbConnection GetConnection(string connectionString) {
            try {
                return GetConnection(new ConnectionString(connectionString));
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public IDbConnection GetConnection(ConnectionString connectionString) {
            try {
                return CreateConnection(connectionString);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public IDbConnection GetConnection(DBKind dbKind, string connectionString, string schema) {
            try {
                return GetConnection(dbKind, new ConnectionString(connectionString), schema);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public IDbConnection GetConnection(DBKind dbKind, ConnectionString connectionString, string schema) {
            try {
                return AdaptersUtils.GetDatabaseServices(dbKind, connectionString, schema).TransactionService.CreateConnection();
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public IDbConnection GetConnection(string connectionName, string connectionString) {
            try {
                IDatabaseServices databaseServices = AdaptersUtils.GetDatabaseServices(GetDatabaseKind(connectionName),
                    new ConnectionString(connectionString));        

                return databaseServices.TransactionService.CreateConnection();
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public IDbConnection GetConnectionByName(string connectionName) {
            try {
                IDatabaseServices databaseServices = GetProviderFromConnectionNameOrMain(connectionName).DatabaseServices;                

                return databaseServices.TransactionService.CreateConnection();
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public bool isConnectedUser(string userName) {
            try {
                using (Transaction requestTransaction = DBAccess.MainProvider.GetRequestTransaction()) {
                    // ReSharper disable once JoinDeclarationAndInitializer
                    
                    IDbTransaction trans;
                    trans = ADOAdaptersUtils.AdapterTransaction(requestTransaction.DriverTransaction);
                    return isConnectedUser(trans, userName);
                }
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public static bool isConnectedUser(IDbTransaction transaction, string userName) {
            IDbTransaction trans = ADOAdaptersUtils.GetADOTransaction(transaction);
            IDatabaseServices databaseServices = DBHelper.GetDatabaseServicesForConnection(trans.Connection);
            return DBCompatibilityReflectionUtils.IsConnectedUser(transaction.Connection, userName, databaseServices.ExecutionService);
        }

        public void AssociateReader(IDbTransaction trans, IDataReader reader, string schema) {
            DBAccess.InnerGetProviderForTransaction(ADOAdaptersUtils.GetADOTransaction(trans), schema).TransactionManager.AssociateReader(ADOAdaptersUtils.GetADOTransaction(trans), reader);
        }

        public void AssociateReader(IDbTransaction transaction, IDataReader reader) {
            DBAccess.InnerGetProviderForTransaction(transaction, transaction.Connection.Database.ToUpperInvariant()).TransactionManager.AssociateReader(transaction, reader);
        }
                
        public void FreeupResources(bool commit) {
            try {
                DBAccess.InnerFreeupResources(commit);
            } catch (TransactionException e) {
                throw new DatabaseTransactionException(e.Message, e);
            }
        }

        public IDbDataAdapter CreateDataAdapter() {
            //local database and dblinks
            return CreateDataAdapter(null);
        }

        public IDbDataAdapter CreateDataAdapter(string connectionName) {            
            DBKind kind;
            
            if (!String.IsNullOrEmpty(connectionName)) {
                kind = GetDatabaseKind(connectionName);
            } else {
                //local database and dblinks
                kind = DBKind;
            }

            if (kind == DBKind.Oracle) {
                Assembly.Load("Oracle.ManagedDataAccess.Client");
                return (IDbDataAdapter)Activator.CreateInstance("Oracle.ManagedDataAccess.Client", "Oracle.ManagedDataAccess.Client.OracleDataAdapter").Unwrap();
            } else {
                return new SqlDataAdapter();
            }
        }

        public void CleanParameterSyntax(IDbCommand command) {
            try {
                IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
                DBHelper.TransformParameters(cmd);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public IDbDataParameter AddParameterWithoutReplacements(string connectionName, IDbCommand command, string name, DbType dbType, object paramValue) {
            try {
                IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
                IDatabaseServices databaseServices = GetProviderFromConnectionNameOrMain(connectionName).DatabaseServices;
                Command wrappedCommand = new Command(databaseServices.ExecutionService, cmd);
                return ADOAdaptersUtils.AdapterParameter(wrappedCommand.CreateParameterWithoutReplacements(name, dbType, paramValue).DriverParameter);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public IDbDataParameter AddParameter(string connectionName, IDbCommand command, string name, DbType dbType, object paramValue) {
            try {
                IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
                IDatabaseServices databaseServices = GetProviderFromConnectionNameOrMain(connectionName).DatabaseServices;
                Command wrappedCommand = new Command(databaseServices.ExecutionService, cmd);
                return ADOAdaptersUtils.AdapterParameter(wrappedCommand.CreateParameter(name, dbType, paramValue).DriverParameter);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }
    }

    [Obsolete("No longer used by new APIs")]
    public class DatabaseTransactionException : Exception {
        public DatabaseTransactionException(string message) : base(message) { }
        public DatabaseTransactionException(string message, Exception innerExcep) : base(message, innerExcep) { }
    }

    [Obsolete("No longer used by new APIs")]
    public class InvalidReleaseException : DatabaseTransactionException {
        public InvalidReleaseException(string message) : base(message) { }
    }

    [Obsolete("No longer used by new APIs")]
    public class InvalidCommitOrRollbackException : DatabaseTransactionException {
        public InvalidCommitOrRollbackException(string message) : base(message) { }
    }

    [Obsolete("No longer used by new APIs")]
    public class InvalidTransactionException : DatabaseTransactionException {
        public InvalidTransactionException(string message) : base(message) { }
    }

    [Obsolete("No longer used by new APIs")]
    public class InvalidDBTransactionManagerAccess : Exception {
        public InvalidDBTransactionManagerAccess(string message) : base(message) { }
    }
}
