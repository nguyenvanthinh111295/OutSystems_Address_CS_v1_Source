/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient; // for the XmlReader stuff
using System.Diagnostics;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Xml;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.ExecutionService;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.ExecutionService;
using OutSystems.HubEdition.Extensibility.Data.TransactionService;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.HubEdition.RuntimePlatform.DBCompatibilityProxies.Adapters;
using OutSystems.Internal.Db;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform { 
	/// <summary>
	/// Summary description for DBHelper.
	/// </summary>
    [Obsolete("Use OutSystems.RuntimePublic.Db.DatabaseAccess class to access a database and its services")]
	public class DBHelper {
		// 19-10-2004 MRC When messing around in these connections make sure if you 
		//                change the user id part to update the user id regular expression used
		private const string IntegratedAuthPart = "Integrated Security=SSPI; ";
		private const string DBAuthPart = "user id={0}; password={1}; ";
		private const string ConnString_MSSQL = "data source={2}; initial catalog={3};";
		private const string ConnString_MSSQL_NoDB = "data source={2};";
		private const string ConnString_Oracle = "data source={2};";
		private const string ConnString_OracleJDBC_SID = "jdbc:oracle:thin:{0}/{1}@{2}:{3}:{4}";//integratedSecurity=true
		private const string ConnString_OracleJDBC_ServiceName = "jdbc:oracle:thin:{0}/{1}@//{2}:{3}/{4}";
        private const string ConnString_OracleJDBC_TnsName = "jdbc:oracle:thin:{0}/{1}@{2}";
        
        private static readonly Regex _datasourceRegex = new Regex(@"data source=\s*([^ ;]+)\s*;", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
        private static readonly Regex _datasourceJavaSidRegex = new Regex(@"jdbc:oracle:thin:[^@]*@([^:]*):[^:]*:[^:]*", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
		private static readonly Regex _datasourceJavaServiceNameRegex = new Regex(@"jdbc:oracle:thin:[^@]*@//([^:]*):[^:]*/[^:]*", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
        private static readonly Regex _datasourceJavaTNSNameRegex = new Regex(@"jdbc:oracle:thin:[^@]*@([^/:]+)$", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
        private static readonly Regex _catalogRegex = new Regex(@"initial catalog=\s*([^ ;]+)\s*;", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
        
        public static int QueryTreshold = 200; // this value means nothing as it will be read from the database

        internal static readonly IPlatformDatabaseServices dummyDatabaseServicesForSQLServer 
            = AdaptersUtils.GetDatabaseServices(DBKind.SqlServer, new ConnectionString(String.Empty));

        internal static readonly IPlatformDatabaseServices dummyDatabaseServicesForOracle 
            = AdaptersUtils.GetDatabaseServices(DBKind.Oracle, new ConnectionString(String.Empty));

        internal static IPlatformDatabaseServices GetDatabaseServicesForKind(DBKind kind) {
            switch (kind) {
                case DBKind.Oracle:
                    return dummyDatabaseServicesForOracle;
                case DBKind.SqlServer:
                    return dummyDatabaseServicesForSQLServer;
            }

            throw new InvalidOperationException(); 
        }

        internal static IPlatformExecutionService GetExecutionForKind(DBKind kind) {
            return GetDatabaseServicesForKind(kind).ExecutionService;
        }

        internal static IDatabaseServices GetDatabaseServicesForConnection(IDbConnection connection) {
            if (connection is SqlConnection) {
                return dummyDatabaseServicesForSQLServer;
            } else {
                return dummyDatabaseServicesForOracle;
            }
        }

        internal static IExecutionService GetExecutionForConnection(IDbConnection connection) {
            return GetDatabaseServicesForConnection(connection).ExecutionService;
        }

        public static bool SkipSlowQueries {
            get {
                return DatabaseAccess.SkipSlowQueries;
            }
            set {
                DatabaseAccess.SkipSlowQueries = value;
            }
        }

        public static IDbCommand CreateCommand(IDbTransaction transaction, string sql) {
            try {
                IDbTransaction trans = ADOAdaptersUtils.GetADOTransaction(transaction);
                return ADOAdaptersUtils.AdapterCommand(GetExecutionForConnection(trans.Connection).CreateCommand(trans, sql));
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
		}

        public static IDbCommand CreateCommand (IDbTransaction transaction) {
			try {
                IDbTransaction trans = ADOAdaptersUtils.GetADOTransaction(transaction);
                return ADOAdaptersUtils.AdapterCommand(GetExecutionForConnection(trans.Connection).CreateCommand(trans, ""));

            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
		}

        public static IDbCommand CreateCommand(IDbConnection connection) {
            try {
                DatabaseConnection conn = new DatabaseConnection(GetExecutionForConnection(connection).DatabaseServices, connection);
                return ADOAdaptersUtils.AdapterCommand(conn.CreateCommand().DriverCommand);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public static IDbCommand CreateCommand(IDbConnection connection, string sql) {
            try {
                DatabaseConnection conn = new DatabaseConnection(GetExecutionForConnection(connection).DatabaseServices, connection);
                return ADOAdaptersUtils.AdapterCommand(conn.CreateCommand(sql).DriverCommand);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public static bool IsClosed(IDbConnection connection) {
            
            if (dummyDatabaseServicesForSQLServer.TransactionService.IsClosed(connection)) {
                return true;
            }

            return dummyDatabaseServicesForOracle.TransactionService.IsClosed(connection);
        }

        public static bool isDateTypeParameter(DbType dbType) {
            
            if (GetExecutionForKind(DBKind.SqlServer).IsDateType(dbType)) {
                return true;
            }
            return GetExecutionForKind(DBKind.Oracle).IsDateType(dbType);
		}

        public static bool isUnicodeStringParameter(DbType dbType) {
            
            if (GetExecutionForKind(DBKind.SqlServer).IsUnicodeStringType(dbType)) {
                return true;
            }
            return GetExecutionForKind(DBKind.Oracle).IsUnicodeStringType(dbType);
		}

        public static IDbDataParameter AddParameter(IDbCommand cmd, string name, DbType dbType, object paramValue) {
            try {
                return AddParameter("", cmd, name, dbType, paramValue);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public static IDbDataParameter AddParameterWithoutReplacements(IDbCommand cmd, string name, DbType dbType, object paramValue) {
            try {
                return AddParameterWithoutReplacements("", cmd, name, dbType, paramValue);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public static IDbDataParameter AddParameterWithDirection(IDbCommand command, string name, DbType dbType, ParameterDirection direction) {
			try {
                Command cmd = new Command(DatabaseAccess.ForSystemDatabase.DatabaseServices.ExecutionService, ADOAdaptersUtils.GetADOCommand(command));

                return ADOAdaptersUtils.AdapterParameter(cmd.CreateParameterWithDirection(name, dbType, direction).DriverParameter);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
		}

        public static IDbDataParameter AddParameterWithDirection(string connectionName, IDbCommand cmd, string name, DbType dbType, ParameterDirection direction) {
			try {
                IDatabaseServices databaseServices = String.IsNullOrEmpty(connectionName)? 
                    DatabaseAccess.ForSystemDatabase.DatabaseServices: 
                    DatabaseAccess.ForDBConnection(connectionName).DatabaseServices;
                Command command = new Command(databaseServices.ExecutionService, ADOAdaptersUtils.GetADOCommand(cmd));
                
                return ADOAdaptersUtils.AdapterParameter(command.CreateParameterWithDirection(name, dbType, direction).DriverParameter);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
		}

        public static IDbDataParameter AddParameter(IDbCommand cmd, string name, DbType dbType, ObjectKey key) {
            try {
                return AddParameter(cmd, name, dbType, key, DBTransactionManager.Current.DBKind);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public static IDbDataParameter AddParameter(IDbCommand cmd, string name, DbType dbType, ObjectKey key, DBKind dbKind) {
            Command command = new Command(GetExecutionForKind(dbKind).DatabaseServices.ExecutionService, ADOAdaptersUtils.GetADOCommand(cmd));

            return ADOAdaptersUtils.AdapterParameter(command.CreateParameter(name, dbType, key).DriverParameter);
        }

        public static IDbDataParameter AddParameterWithoutReplacements(string connectionName, IDbCommand cmd, string name, DbType dbType, object paramValue) {
            try {
                return DBTransactionManager.Current.AddParameterWithoutReplacements(connectionName, cmd, name, dbType, paramValue);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public static IDbDataParameter AddParameter(string connectionName, IDbCommand cmd, string name, DbType dbType, object paramValue) {
            try {
                return DBTransactionManager.Current.AddParameter(connectionName, cmd, name, dbType, paramValue);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public static IDbDataParameter AddParameter(IDbCommand cmd, string name, DbType dbType, object paramValue, DBKind dbKind) {
            return AddParameter(cmd, name, dbType, paramValue, dbKind, true);
        }

        public static IDbDataParameter AddParameterWithoutReplacements(IDbCommand cmd, string name, DbType dbType, object paramValue, DBKind dbKind) {
            return AddParameter(cmd, name, dbType, paramValue, dbKind, false);
        }

        public static IDbDataParameter AddParameter(IDbCommand cmd, string name, DbType dbType, object paramValue, DBKind dbKind, bool magicReplace) {
            IExecutionService executionService = GetExecutionForKind(dbKind);
            if (magicReplace) {
                paramValue = executionService.TransformRuntimeToDatabaseValue(dbType, paramValue);
            }
            return ADOAdaptersUtils.AdapterParameter(executionService.CreateParameter(ADOAdaptersUtils.GetADOCommand(cmd), name, dbType, paramValue));
		}

        public static IDbDataParameter AddParameter(IDbCommand cmd, string name, object paramValue) {
			try {
                return AddParameter("", cmd, name, DbType.String, paramValue);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
		}

        public static IDbDataParameter AddParameter(string connectionName, IDbCommand cmd, string name, object paramValue) {
            try {
                return AddParameter(connectionName, cmd, name, DbType.String, paramValue);
            } catch (ConnectionNotFoundException e) {
                throw new DBConnectionNotFoundException(e.Message);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
		}

        public static DataSet CreateAndFillDataSet(IDbCommand command, IDbDataAdapter adapter, string description, bool isApplication) {
            // Save the values before execution because sometimes the drivers clears them from the IDbCommand when an exception occurs
            IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
	        IDbConnection conn = cmd.Connection;
            IDbTransaction trans = cmd.Transaction;

            IDatabaseAccessProvider provider = null;
            bool hasProvider = trans != null && DatabaseAccess.TryGetProviderForTransaction(trans, out provider);

            IExecutionService executionService = hasProvider ? provider.DatabaseServices.ExecutionService : GetExecutionForConnection(conn);
            ITransactionManager manager = provider.TransactionManager;

            try {
                DataSet dataSet;
                
                {
                    dataSet = new DataSet();
                    adapter.SelectCommand = cmd;
                    adapter.Fill(dataSet);
                } 
                return dataSet;
            } catch (DbException e) {
                executionService.OnExecuteException(e, cmd, null, conn, trans, manager);
                throw;
            }
		}

        public static DataSet CreateAndFillDataSet(IDbCommand cmd, IDbDataAdapter adapter) {
            return CreateAndFillDataSet(cmd, adapter, null, false);
		}

        public static IDataReader ExecuteReader(IDbCommand command, string description, bool isApplication, bool transformParameters, bool skipLog) {
            try {
                // Save the values before execution because sometimes the drivers clears them from the IDbCommand when an exception occurs
                IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
    	        IDbConnection conn = cmd.Connection;
                IDbTransaction trans = cmd.Transaction;

                IDatabaseAccessProvider provider = null;
                bool hasProvider = trans != null && DatabaseAccess.TryGetProviderForTransaction(trans, out provider);

                IExecutionService executionService = hasProvider ? provider.DatabaseServices.ExecutionService : GetExecutionForConnection(conn);
                ITransactionManager manager = provider.TransactionManager;

                IDataReader reader = null;
                try {
                    if (transformParameters) { 
                        TransformParameters(cmd);
                    }
                    reader = executionService.ExecuteReader(cmd);
                    // NOTE: This reader will be closed automatically by the transaction manager at the end of the request
                    manager.AssociateReader(trans, reader);
                } catch (DbException e) {
                    executionService.OnExecuteException(e, cmd, reader, conn, trans, manager);
                    throw;
                }
                return reader;
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }
            
        public static bool IsConnectionException(DbException e) {     
            
            if (GetExecutionForKind(DBKind.SqlServer).IsConnectionException(e)) {
                return true;
            }

            return GetExecutionForKind(DBKind.Oracle).IsConnectionException(e);
        }

        public static void ExecuteAdvancedQuery<T>(GenericRecordList<T> rl, IDbCommand cmd, string description) where T : ITypedRecord<T> {
            InnerExecuteQuery(rl, cmd, description, false);
		}

        public static void ExecuteSimpleQuery<T>(GenericRecordList<T> rl, IDbCommand cmd, string description) where T : ITypedRecord<T> {
            InnerExecuteQuery(rl, cmd, description, true);
		}

        public static void NewExecuteSimpleQuery<T>(GenericRecordList<T> rl, IDbCommand cmd, string description) where T : ITypedRecord<T> {
            InnerExecuteQuery(rl, cmd, description, false);
		}

        private static void InnerExecuteQuery<T>(GenericRecordList<T> rl, IDbCommand command, string description, bool transformParameters) where T : ITypedRecord<T> {
            IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
            IDatabaseAccessProvider provider = DatabaseAccess.GetProviderForTransaction(cmd.Transaction);
            provider.ExecuteQuery(new ManagedCommand(provider.TransactionManager, cmd), rl, description, transformParameters, false);
        }


        public static IDataReader ExecuteReader(IDbCommand cmd, string description, bool isApplication) {
			try {
                return ExecuteReader(cmd, description, isApplication, true, false);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
		}

        public static IDataReader ExecuteReader(IDbCommand cmd, string description, bool isApplication, bool skipLog) {
            try {
                return ExecuteReader(cmd, description, isApplication, true, skipLog);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public static IDataReader ExecuteReader(IDbCommand cmd) {
			try {
                return ExecuteReader(cmd, null, false);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
		}

        public static IDataReader ExecuteReader(IDbCommand cmd, bool skipLog) {
            try {
                return ExecuteReader(cmd, null, false, skipLog);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

		public static XmlReader ExecuteXmlReader(SqlCommand cmd, string description, bool isApplication) {
            return DBCompatibilityReflectionUtils.ExecuteXmlReaderMethod(cmd, description, isApplication, GetExecutionForKind(DBKind.SqlServer));
		}

        public static XmlReader ExecuteXmlReader (SqlCommand cmd) {
            return DBCompatibilityReflectionUtils.ExecuteXmlReaderMethod(cmd, GetExecutionForKind(DBKind.SqlServer));
		}

        public static object ExecuteScalar(IDbCommand command, string description, bool isApplication, bool skipLog) {
			try {
                IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
                Command wrapperCommand = new Command(GetExecutionForConnection(cmd.Connection), cmd);

                return wrapperCommand.ExecuteScalar(description, isApplication, skipLog);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
		}


        public static object ExecuteScalar(IDbCommand command, string description, bool isApplication)
        {
            try {
                IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
                Command wrapperCommand = new Command(GetExecutionForConnection(cmd.Connection), cmd);
                return wrapperCommand.ExecuteScalar(description, isApplication);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public static object ExecuteScalarDontCleanParameters(IDbCommand command) {
            IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
            Command wrapperCommand = new Command(GetExecutionForConnection(cmd.Connection), cmd);

            return wrapperCommand.ExecuteScalarWithoutTransformParametersSyntax();
        }

        public static object ExecuteScalarDontCleanParameters(IDbCommand command, string description, bool skipLog) {
            IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
            Command wrapperCommand = new Command(GetExecutionForConnection(cmd.Connection), cmd);
            return wrapperCommand.ExecuteScalarWithoutTransformParametersSyntax(description, skipLog);
		}

        public static object ExecuteScalarDontCleanParameters(IDbCommand command, bool skipLog) {
            IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
            Command wrapperCommand = new Command(GetExecutionForConnection(cmd.Connection), cmd);
            return wrapperCommand.ExecuteScalarWithoutTransformParametersSyntax(skipLog);
		}

        public static object ExecuteScalar(IDbCommand command, bool skipLog) {
			try {
                IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
                Command wrapperCommand = new Command(GetExecutionForConnection(cmd.Connection), cmd);
                return wrapperCommand.ExecuteScalar(skipLog);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
		}

        public static object ExecuteScalar(IDbCommand command) {
            try {
                IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
                Command wrapperCommand = new Command(GetExecutionForConnection(cmd.Connection), cmd);
                return wrapperCommand.ExecuteScalar();
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public static int ExecuteNonQueryDontCleanParameters(IDbCommand command, string description, bool isApplication) {
            IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
            Command wrapperCommand = new Command(GetExecutionForConnection(cmd.Connection), cmd);
            return wrapperCommand.ExecuteNonQueryWithoutTransformParametersSyntax(description, isApplication);
        }

        public static int ExecuteNonQueryDontCleanParameters(IDbCommand command, string description, bool isApplication, bool skipLog) {
            IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
            Command wrapperCommand = new Command(GetExecutionForConnection(cmd.Connection), cmd);
            return wrapperCommand.ExecuteNonQueryWithoutTransformParametersSyntax(description, isApplication, skipLog);
		}

        public static int ExecuteNonQueryWithoutSlowSqlLog(IDbCommand command) {
			try {
                IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
                Command wrapperCommand = new Command(GetExecutionForConnection(cmd.Connection), cmd);
                return wrapperCommand.ExecuteNonQueryWithoutSlowSqlLog();
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
		}

        public static int ExecuteNonQuery(IDbCommand command, string description, bool isApplication) {
			try {
                IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
                Command wrapperCommand = new Command(GetExecutionForConnection(cmd.Connection), cmd);
                return wrapperCommand.ExecuteNonQuery(description, isApplication);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
		}

        public static int ExecuteNonQuery(IDbCommand command) {
			try {
                IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
                Command wrappedCommand = new Command(GetExecutionForConnection(cmd.Connection), cmd);
                return wrappedCommand.ExecuteNonQuery();
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
		}

        public static int ExecuteNonQuery(IDbCommand command, bool skipLog) {
            try {
                IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
                Command wrappedCommand = new Command(GetExecutionForConnection(cmd.Connection), cmd);
                return wrappedCommand.ExecuteNonQuery(skipLog);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
		}

        public static IDataReader ExecuteStoredProcedure(IDbCommand cmd, DBKind dbKind, string readerVarName) {
            try {
                return ExecuteStoredProcedure(cmd, dbKind, readerVarName, false);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        static Regex paramAtRegex = new Regex("@(\"?\\w+\"?)", RegexOptions.Compiled);
        // Code from GotDotNet (NOTE: in java no action is needed, since the command text already uses JDBC syntax)
        // Used only for Oracle database;
        internal static void TransformParameters(IDbCommand cmd) {
            if (cmd.Parameters.Count > 0) {
                var paramNames = new HashSet<string>();
                string paramPrefix = GetDatabaseServicesForConnection(cmd.Connection).ExecutionService.ParameterPrefix;

                foreach (IDataParameter parameter in cmd.Parameters) {
                    // Grab param name without prefix (sometimes prefix is already ":")
                    paramNames.Add(parameter.ParameterName.ToLower().Trim(" @:".ToCharArray()));
                    // This will do nothing in SQLServer since the plugin has the paramPrefix="@" 
                    parameter.ParameterName = parameter.ParameterName.Replace("@", paramPrefix);
                }

                // #115001: Replace only the @foo's that are params to the query so we don't substitute @DBLinks
                if (cmd.CommandType == CommandType.Text) {
                    cmd.CommandText = paramAtRegex.Replace(cmd.CommandText,
                        match => paramNames.Contains(match.Groups[1].Value.ToLower()) ? paramPrefix + match.Groups[1].Value : match.Value);
                }
            }
        }

        public static IDataReader ExecuteStoredProcedure(IDbCommand command, DBKind dbKind, string readerVarName, bool skipLog) {
            try {
                IDbCommand cmd = ADOAdaptersUtils.GetADOCommand(command);
                TransformParameters(cmd);
                IDataReader reader = GetExecutionForKind(dbKind).ExecuteStoredProcedureWithResultSet(cmd, readerVarName);
                DatabaseAccess.GetProviderForTransaction(cmd.Transaction).TransactionManager.AssociateReader(cmd.Transaction, reader);
                return reader;
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
		}

		public static string DbParameterType() {
            try {
                switch (DBTransactionManager.Current.DBKind) {
                    case DBKind.Oracle:
                        return "Oracle.ManagedDataAccess.Client.OracleParameter";
                    case DBKind.SqlServer:
                        return "System.Data.SqlClient.SqlParameter";
                    default:
                        throw new InvalidOperationException("This method is only supported for SqlServer and Oracle");
                }
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
		}

        public static void LogSlowQuery(DateTime startTime, string description, bool isApplication) {
            Command.LogSlowQuery(startTime, description, isApplication);
		}

        public static void LogSlowExtensionCall(DateTime startTime, string description) {
            RuntimePlatformUtils.LogSlowExtensionCall(startTime, description);
        }

		public static string CreateConnectionStringJava(DBKind dbKind, DBDatasourceKind datasourceType, string datasource, string dbServer, string dbPort, string user, string password) {           
#if !JAVA
			throw new InvalidOperationException();
#else
			switch (datasourceType) {
			case DBDatasourceKind.Sid:
				return string.Format(ConnString_OracleJDBC_SID, user, password, dbServer, dbPort, datasource);
			case DBDatasourceKind.ServiceName:
				return string.Format(ConnString_OracleJDBC_ServiceName, user, password, dbServer, dbPort, datasource);
            case DBDatasourceKind.TnsName:
                return string.Format(ConnString_OracleJDBC_TnsName, user, password, datasource);
			default:
				throw new InvalidOperationException("Invalid datasource type: " + datasourceType.ToString());
			}
#endif
		}

        public static string CreateONSConfig(DBKind dbKind, string dbServerScan, string onsPort) {
            if (onsPort == null) {
				return null;
			}

            return "nodes=" + dbServerScan + ":" + onsPort;
        }

	    [Obsolete("Deprecated. Use overload with AuthenticationType.")]
        public static string CreateConnectionStringDotNet(DBKind dbKind, string server, string database, string user, string password) {
            return CreateConnectionStringDotNet(dbKind, server, database, DBAuthenticationType.DBAuth, user, password);
        }

        public static string CreateConnectionStringDotNet(DBKind dbKind, string server, string database, DBAuthenticationType dbAuthType, string user, 
                string password) {

            string connFormat = null;
			switch (dbAuthType) {
				case DBAuthenticationType.IntegratedAuth:
					connFormat = IntegratedAuthPart;
					//Windows Authentication with dbKind == DBKind.Oracle is currently UNTESTED and UNSUPPORTED
					break;
				case DBAuthenticationType.DBAuth:
					connFormat = DBAuthPart;
					break;
				default:
					throw (new InvalidOperationException("Unknown Authentication Type : " + dbAuthType));
			}

			switch (dbKind) {
				case DBKind.SqlServer: 
					connFormat += (database == null ? ConnString_MSSQL_NoDB : ConnString_MSSQL);
					break;
				case DBKind.Oracle:
					connFormat += ConnString_Oracle;
					break;
				default:
					throw (new InvalidOperationException("Unknown Database Kind : " + dbKind));
			}


			var sqlConnectionStringBuilder = new SqlConnectionStringBuilder();
			sqlConnectionStringBuilder["password"] = password ?? string.Empty;
			password = sqlConnectionStringBuilder.ConnectionString.Substring("Password=".Length);
			return string.Format(connFormat, user, password, server, database); 
		}

		public static string GetConnectionStringUsername(ConnectionString connectionString) {
		    return ConnectionStringsHelper.ExtractUsername(connectionString.GetConnectionString());
		}

		public static string GetConnectionStringCatalog(ConnectionString connectionString) {
			string dbCatalog = null;
			if (connectionString != null) {
				Match m = _catalogRegex.Match(connectionString.GetConnectionString());
				if ((m.Success)) {
					if ((m.Groups[1].Success)) {
						dbCatalog = m.Groups[1].Value;
					}
				}
			}
			return dbCatalog;
		}

		public static string GetConnectionStringDatasource(ConnectionString connectionString) {
            if (connectionString != null) {
                // ReSharper disable once JoinDeclarationAndInitializer
				Regex[] datasourceRegexs;
#if JAVA
				datasourceRegexs = new Regex[] { _datasourceJavaSidRegex, _datasourceJavaServiceNameRegex, _datasourceJavaTNSNameRegex };              
#else
                datasourceRegexs = new Regex[] { _datasourceRegex };
#endif

                foreach (Regex re in datasourceRegexs) {
                    Match m = re.Match(connectionString.GetConnectionString());
                    if ((m != null) && (m.Success)) {
                        if ((m.Groups[1] != null) && (m.Groups[1].Success)) {
                            return m.Groups[1].Value;
                        }
                    }
                }
			}

			return null;
		}

        public static bool sqlServerTransactionExists(IDbTransaction trans) {
            try {
                return DBCompatibilityReflectionUtils.ExecuteTransactionExistsMethod(trans, dummyDatabaseServicesForSQLServer.TransactionService);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
		}

		public static string getOracleTimeZoneStr() {
			return "00:00";
		}

        public static void releaseAllConnectionPools( string errorMessage) {
            try {
                releaseAllConnectionPools(DBTransactionManager.Current.DBKind, errorMessage);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

		public static void releaseAllConnectionPools(DBKind dbKind, string errorMessage) {
            GetExecutionForKind(dbKind).DatabaseServices.TransactionService.ReleasePooledConnections(errorMessage);
		}
        
        public static void releaseAllConnectionPools(DBKind dbKind) {
            releaseAllConnectionPools(dbKind, String.Empty);
        }

        public static void releaseAllConnectionPools() {
            releaseAllConnectionPools(DBTransactionManager.Current.DBKind);
        }

        public static bool IsDummyColumn(IDataReader r, int index) {
			
            if (IsIgnorableColumn(r, index)) {
                return true;
            }
            return IsIgnorableColumn(r, index);
		}

        private static bool IsIgnorableColumn(IDataReader reader, int index) {
            string colName = reader.GetName(index);
            return colName == null || colName == "";
        }

        public static DbType ConvertTypeToDbType(Type type) {
            // The dummyExecutionForSQLServer and the dummyExecutionForOracle give the same result
            return GetExecutionForKind(DBKind.Oracle).ConvertToDbType(type);
        }

        public static bool IsTimeoutException(Exception exception) {
            
            if (GetExecutionForKind(DBKind.SqlServer).IsTimeoutException(exception)) {
                return true;
            }

            return GetExecutionForKind(DBKind.Oracle).IsTimeoutException(exception);
        }

        public static void SetParamDirection(IDbDataParameter parameter, ParameterDirection direction) {
            IDbDataParameter param = ADOAdaptersUtils.GetADOParameter(parameter);
            IExecutionService executionToUse = GetExecutionForKind(DBKind.Oracle);
            
            {
                Assembly oracleClient = Assembly.Load("Oracle.ManagedDataAccess.Client");
                Type oracleParameterType = oracleClient.GetType("Oracle.ManagedDataAccess.Client.OracleParameter");
            
                if (!oracleParameterType.IsInstanceOfType(param)) {
                    executionToUse = GetExecutionForKind(DBKind.SqlServer);
                }
            }

            executionToUse.SetParameterDirection(param, direction);
        }
	}
}
