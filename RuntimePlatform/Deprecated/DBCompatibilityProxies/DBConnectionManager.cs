/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.TransactionService;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.HubEdition.RuntimePlatform.DBCompatibilityProxies.Adapters;
using OutSystems.Internal.Db;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform {
    [Obsolete("Use OutSystems.RuntimePublic.Db.DatabaseAccess class to access a database and its services")]
    public abstract class DBConnectionManager : IDBConnectionManager {        
        protected ITransactionManager TransactionManager { get; private set; }

        public DBConnectionManager(ITransactionManager transactionManager) {            
            TransactionManager = transactionManager;
        }

        public DBKind DatabaseKind { get { return AdaptersUtils.GetDBKind(TransactionManager.TransactionService.DatabaseServices); } }

        public virtual DBSqlServerVersion DBServerVersion {
            get {
                try {
                    return AdaptersUtils.GetSqlServerVersion(TransactionManager.TransactionService.DatabaseServices);
                } catch (InvalidDatabaseAccessException e) {
                    throw new InvalidDBTransactionManagerAccess(e.Message);
                } catch (InvalidTransactionReleaseException e) {
                    throw new InvalidReleaseException(e.Message);
                }
            }
        }

        public string Schema {
            get { return TransactionManager.TransactionService.DatabaseServices.DatabaseConfiguration.DatabaseIdentifier; }
        }

        public ConnectionString ConnectionString {
            get { return AdaptersUtils.GetConnectionString(TransactionManager.TransactionService.DatabaseServices); }
            set { TransactionManager.TransactionService = AdaptersUtils.GetDatabaseServices(DatabaseKind, value).TransactionService; }
        }

        public int PooledBusyTransactionCount {
            get { return TransactionManager.BusyTransactionCount; }
        }

        public IDbTransaction CreateTransaction(string connectionString) {
            try {
                return CreateTransaction(new ConnectionString(connectionString));
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public IDbTransaction CreateTransaction(ConnectionString connectionString) {
            try {
                IDatabaseServices databaseServices = AdaptersUtils.GetDatabaseServices(DatabaseKind, connectionString);
                return ADOAdaptersUtils.AdapterTransaction(databaseServices.TransactionService.CreateTransaction(GetConnection(connectionString)));
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public IDbTransaction GetMainTransaction() {
            try {
                return ADOAdaptersUtils.AdapterTransaction(TransactionManager.GetRequestTransaction());
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public IDbTransaction GetPrivateTransaction() {
            try {
                return ADOAdaptersUtils.AdapterTransaction(TransactionManager.GetCommitableTransaction());
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public IDbTransaction GetReadOnlyTransaction() {
            try {
                return ADOAdaptersUtils.AdapterTransaction(TransactionManager.GetReadOnlyTransaction());
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public IDbConnection GetConnection(string connectionString) {
            try {
                return GetConnection(new ConnectionString(connectionString));
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public IDbConnection GetConnection(ConnectionString connectionString) {
            try {
                return AdaptersUtils.GetDatabaseServices(DatabaseKind, connectionString).TransactionService.CreateConnection();
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public void ReleaseTransaction(IDbTransaction trans) {
            try {
                
                TransactionManager.ReleaseTransaction(trans);
            } catch (InvalidTransactionReleaseException e) {
                throw new InvalidReleaseException(e.Message);
            }
        }

        public void CommitTransaction(IDbTransaction trans) {
            try {
                
                TransactionManager.CommitTransaction(trans);
            } catch (InvalidCommitOrRollbackTransactionException e) {
                throw new InvalidCommitOrRollbackException(e.Message);
            }
        }

        public void RollbackTransaction(IDbTransaction trans) {
            try {
                
                TransactionManager.RollbackTransaction(trans);
            } catch (InvalidCommitOrRollbackTransactionException e) {
                throw new InvalidCommitOrRollbackException(e.Message);
            }
        }

        public void SafeRollbackTransaction(IDbTransaction trans) {
            if (trans != null) {
                RollbackTransaction(trans);
            }
        }

        public virtual void CommitAllTransactions() {
            try {
                TransactionManager.CommitAllTransactions();
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public virtual void RollbackAllTransactions() {
            try {
                TransactionManager.RollbackAllTransactions();
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public void abortTransaction(IDbTransaction trans) {
            try {
                ReleaseTransaction(trans);
            } catch (InvalidReleaseException) {
                RollbackTransaction(trans);
            }
        }

        public void FreeupResources(bool commit) {
            TransactionManager.FreeupResources(commit);
        }


        public bool AssociateReader(IDbTransaction trans, IDataReader reader) {
            
            return TransactionManager.AssociateReader(trans, reader);
        }

        public virtual IDbDataParameter AddParameterWithoutReplacements(IDbCommand cmd, string name, DbType dbType, object paramValue) {
            
            Command command = new Command(TransactionManager.TransactionService.DatabaseServices.ExecutionService, cmd);

            return ADOAdaptersUtils.AdapterParameter(command.CreateParameterWithoutReplacements(name, dbType, paramValue).DriverParameter);
        }

        public virtual IDbDataParameter AddParameter(IDbCommand cmd, string name, DbType dbType, object paramValue) {
            
            Command command = new Command(TransactionManager.TransactionService.DatabaseServices.ExecutionService, cmd);

            return ADOAdaptersUtils.AdapterParameter(command.CreateParameter(name, dbType, paramValue).DriverParameter);
        }

        public bool IsFromThisConnectionManager(IDbTransaction trans) {
            
            return TransactionManager.IsManaging(trans);
        }

        public virtual void ForceCSASSetting(IDbTransaction trans) {
            try {
                
                DBCompatibilityReflectionUtils.ForceCSASSetting(trans, TransactionManager.TransactionService.DatabaseServices.ExecutionService);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public virtual void ForceCIAISetting(IDbTransaction trans) {
            try {
                
                DBCompatibilityReflectionUtils.ForceCIAISetting(trans, TransactionManager.TransactionService.DatabaseServices.ExecutionService);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public virtual void RestoreComparationSettings(IDbTransaction trans) {
            try {
                
                DBCompatibilityReflectionUtils.RestoreComparisonSettings(trans, TransactionManager.TransactionService.DatabaseServices.ExecutionService);
            } catch (InvalidDatabaseAccessException e) {
                throw new InvalidDBTransactionManagerAccess(e.Message);
            }
        }

        public virtual DBAuthenticationType AuthenticationType {
            get {
                try {
                    return AdaptersUtils.GetAuthenticationType(TransactionManager.TransactionService.DatabaseServices); 
                } catch (InvalidDatabaseAccessException e) {
                    throw new InvalidDBTransactionManagerAccess(e.Message);
                } catch (InvalidTransactionReleaseException e) {
                    throw new InvalidReleaseException(e.Message);
                }
            }
        }

        private bool isDisposed = false;
        public void Dispose() {
            try {
                if (!isDisposed) {
                    FreeupResources(/*commit*/ false);
                }
            } catch (Exception e) {
                // avoid errors during dispose
#if debug
                throw new Exception("Crashed on dispose, check for leaks!!!!", e);
#else
                OSTrace.Error("Error while disposing", e);
#endif
            } finally {
                isDisposed = true;
            }
        }
    }
}
