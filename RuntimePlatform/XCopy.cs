/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.IO;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform {
    [Serializable()]
    public class XCopyFileInfo {

        private delegate void CopyOrUnpackFileDelegate(string srcFilePath, string dstPath, string destFile);

        #region properties
        private Dictionary<string, string> _files = new Dictionary<string, string>();
        private List<string> _excludeFromLateLoad;
        private string _srcPath = null;

        #region modifiers
        public void Add(string file, string separateSourcePath) {
            _files[file] = separateSourcePath;
        }

        public void SetLateLoadExclusions(List<string> lateLoadExclusions) {
            _excludeFromLateLoad = lateLoadExclusions;
        }

        private DateTime _lastModifiedTimestamp;
        public DateTime LastModifiedTimestamp {
            get {
                return _lastModifiedTimestamp;
            }
            set {
                _lastModifiedTimestamp = value;
            }
        }

        private bool _concurrentChanges;
        public bool ConcurrentChanges {
            get {
                return _concurrentChanges;
            }
            set {
                _concurrentChanges = value;
            }
        }


        #endregion modifiers
        #endregion properties

        #region constructors
        public XCopyFileInfo() : this(null) { }
        public XCopyFileInfo(string srcPath) {
            _srcPath = srcPath;
        }
        #endregion constructors

        #region actions

        /// <summary>
        /// The CopyFiles methods should not be used by the deploy and compiler services... 
        /// Use PoolFile.CopyFiles instead because it knowns how to work with links...
        /// </summary>
        /// <param name="dstPath"></param>
        [Obsolete("Please use CopyFiles(string dstPath, Action<string, string> fileCopyOperation)")]
        public void CopyFiles(string dstPath) {
            CopyFiles(dstPath, FileCopy);
        }

        public void CopyFiles(string dstPath, Action<string, string> fileCopyOperation) {
            if (_srcPath == null) {
                throw new InvalidOperationException("srcPath not defined");
            }

            CopyOrUnpackFiles(_srcPath, dstPath, (srcFilePath, destPath, destFile) => fileCopyOperation(srcFilePath, destPath + destFile));
        }

        public void UnpackFiles(string dstPath) {
            if (_srcPath == null) {
                throw new InvalidOperationException("srcPath not defined");
            }
            CopyOrUnpackFiles(_srcPath, dstPath, (srcFilePath, destPath, destFile) => FileUnpack(srcFilePath, destPath));
        }

        private void CopyOrUnpackFiles(string srcPath, string dstPath, CopyOrUnpackFileDelegate fileAction) {
            if (!dstPath.EndsWith(FileSystemUtils.PathSeparator)) {
                dstPath += FileSystemUtils.PathSeparator;
            }

            string originalSrcPath = srcPath;

            foreach (var kvp in _files) {
                string sourceFile = kvp.Key;
                string destFile = sourceFile;
                if (_excludeFromLateLoad != null &&
                    !_excludeFromLateLoad.Contains(destFile) && destFile.StartsWith("bin\\")) {

                    destFile = RuntimePlatformUtils.LateLoadBinariesDirectory +
                        FileSystemUtils.PathSeparator +
                        destFile.Substring(3);
                }

                if (!kvp.Value.IsEmpty()) {
                    srcPath = kvp.Value;
                }
                fileAction(Path.Combine(srcPath, sourceFile), dstPath, destFile);
                srcPath = originalSrcPath;
            }
        }

        #endregion actions

        #region utils
        public static DirectoryInfo DirectoryCreate(string file) {
            DirectoryInfo info = new DirectoryInfo(file);
            if (!info.Exists) {
                info.Create();
            }
            return info;
        }

        /// <summary>
        /// This method should not be used directly by the deploy and compiler services
        /// Use PoolUtils.CopyFiles to copy files because it knowns how to work with links
        /// </summary>
        /// <param name="fromFile"></param>
        /// <param name="toFile"></param>
        public static void FileCopy(string fromFile, string toFile) {
            FileInfo src = new FileInfo(fromFile);
            String directoryName = Path.GetDirectoryName(toFile);
            if (! directoryName.IsEmpty()) {
                DirectoryCreate(directoryName);
            }
            src.CopyTo(toFile, true);
        }

        private void FileUnpack(string srcFilePath, string dstPath) {
            // only implemented in java
            throw new NotImplementedException();
        }

        #endregion utils
    }
}
