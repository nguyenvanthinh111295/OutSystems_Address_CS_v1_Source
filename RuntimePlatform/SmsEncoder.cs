/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using OutSystems.HubEdition.SMS;

namespace OutSystems.HubEdition.RuntimePlatform.Sms {
 	/// <summary>
	/// Summary description for SmsEncoder.
	/// </summary>
	public class SmsEncoder {
		SmsEncoding _encoding;

		public SmsEncoding Encoding {
			get {
				return _encoding;
			}
			set {
				_encoding = value;
			}
		}

		public SmsEncoder() {
		}

		public SmsEncoder(SmsEncoding encoding) {
			_encoding = encoding;
		}

		public int GetCorrectMessageSize(string message, int maxlen) {
			int result = message.Length;
			try {
				if( result > maxlen) {
					result = maxlen;
				}
				if (_encoding == SmsEncoding.Default7Bit) {
					byte[] _localmessage = System.Text.Encoding.GetEncoding("windows-1252").GetBytes(message);

					result = Latin1ToGSM.GetCorrectMessageSize(_localmessage, maxlen);
				}
			} catch {}
			return result;
		}
	}

	public class Latin1ToGSM {
		static int[] _table = {
			63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */       /*   0 -   7 */
			/* TAB approximates to space */
			/* LF and CR map to self */
			/* Page break maps to escaped LF */
			63, /*  NRP */  32, /*  ' ' */  10, /*   10 */  63, /*  NRP */ -10, /*  -10 */  13, /*   13 */  63, /*  NRP */  63, /*  NRP */       /*   8 -  15 */
			/* 16 18-26 are nonprintable in latin_1 and in GSM are greek
			* characters that are unrepresentable in latin1.  So we let them
			* map to create a way to specify them. */
			16, /*   16 */  63, /*  NRP */  18, /*   18 */  19, /*   19 */  20, /*   20 */  21, /*   21 */  22, /*   22 */  23, /*   23 */       /*  16 -  23 */
			24, /*   24 */  25, /*   25 */  26, /*   26 */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */       /*  24 -  31 */
			/* $ maps to 2 */
			32, /*  ' ' */  33, /*  '!' */  34, /*  '"' */  35, /*  '#' */   2, /*    2 */  37, /*  '%' */  38, /*  '&' */  39, /* '\'' */       /*  32 -  39 */
			40, /*  '(' */  41, /*  ')' */  42, /*  '*' */  43, /*  '+' */  44, /*  ',' */  45, /*  '-' */  46, /*  '.' */  47, /*  '/' */       /*  40 -  47 */
			48, /*  '0' */  49, /*  '1' */  50, /*  '2' */  51, /*  '3' */  52, /*  '4' */  53, /*  '5' */  54, /*  '6' */  55, /*  '7' */       /*  48 -  55 */
			56, /*  '8' */  57, /*  '9' */  58, /*  ':' */  59, /*  ';' */  60, /*  '<' */  61, /*  '=' */  62, /*  '>' */  63, /*  '?' */       /*  56 -  63 */
			/* @ maps to 0 */
			0, /*    0 */  65, /*  'A' */  66, /*  'B' */  67, /*  'C' */  68, /*  'D' */  69, /*  'E' */  70, /*  'F' */  71, /*  'G' */       /*  64 -  71 */
			72, /*  'H' */  73, /*  'I' */  74, /*  'J' */  75, /*  'K' */  76, /*  'L' */  77, /*  'M' */  78, /*  'N' */  79, /*  'O' */       /*  72 -  79 */
			80, /*  'P' */  81, /*  'Q' */  82, /*  'R' */  83, /*  'S' */  84, /*  'T' */  85, /*  'U' */  86, /*  'V' */  87, /*  'W' */       /*  80 -  87 */
			/* [ is an escaped < */
			/* \ is an escaped / */
			/* ] is an escaped > */
			/* ^ is an escaped Greek Lambda */
			/* _ maps to 17 */
			88, /*  'X' */  89, /*  'Y' */  90, /*  'Z' */ -60, /*  -60 */ -47, /*  -47 */ -62, /*  -62 */ -20, /*  -20 */  17, /*   17 */       /*  88 -  95 */
			/* The backquote cannot be represented at all */
			63, /*  NRP */  97, /*  'a' */  98, /*  'b' */  99, /*  'c' */ 100, /*  'd' */ 101, /*  'e' */ 102, /*  'f' */ 103, /*  'g' */       /*  96 - 103 */
			104, /*  'h' */ 105, /*  'i' */ 106, /*  'j' */ 107, /*  'k' */ 108, /*  'l' */ 109, /*  'm' */ 110, /*  'n' */ 111, /*  'o' */       /* 104 - 111 */
			112, /*  'p' */ 113, /*  'q' */ 114, /*  'r' */ 115, /*  's' */ 116, /*  't' */ 117, /*  'u' */ 118, /*  'v' */ 119, /*  'w' */       /* 112 - 119 */
			/* { is an escaped ( */
			/* | is an escaped inverted ! */
			/* } is an escaped ) */
			/* ~ is an escaped = */
			120, /*  'x' */ 121, /*  'y' */ 122, /*  'z' */ -40, /*  -40 */ -64, /*  -64 */ -41, /*  -41 */ -61, /*  -61 */  63, /*  NRP */       /* 120 - 127 */
			-101, /* -101 */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */       /* 128 - 135 */
			63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */       /* 136 - 143 */
			63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */       /* 144 - 151 */
			63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */  63, /*  NRP */       /* 152 - 159 */

			/* 160 - 167 */
			32, /*  ' ' */
			64, /*   64 */ /* Inverted ! */
			99, /*  'c' */ /* approximation of cent marker */
			1, /*    1 */ /* Pounds sterling */
			36, /*   36 */ /* International currency symbol */
			3, /*    3 */ /* Yen */
			64, /*   64 */ /* approximate broken bar as inverted ! */
			95, /*   95 */ /* Section marker */

			/* 168 - 175 */
			34, /*  '"' */ /* approximate dieresis */
			67, /*  'C' */ /* approximate copyright marker */
			97, /*  'a' */ /* approximate ordfeminine */
			60, /*  '<' */ /* approximate french << */
			33, /*  '!' */ /* approximate logical not sign */
			45, /*  '-' */ /* approximate hyphen */
			82, /*  'R' */ /* approximate registered marker */
			45, /*  '-' */ /* approximate macron */

			/* 176 - 183 */
			111, /*  'o' */ /* approximate degree marker */
			63, /*  NRP */ /* plusminus */
			50, /*  '2' */ /* approximate superscript 2 */
			51, /*  '3' */ /* approximate superscript 3 */
			39, /* '\'' */ /* approximate acute accent */
			117, /*  'u' */ /* approximate greek mu */
			63, /*  NRP */ /* paragraph marker */
			46, /*  '.' */ /* approximate bullet */

			/* 184 - 191 */
			44, /*  ',' */ /* approximate cedilla */
			105, /*  'i' */ /* approximate dotless i */
			111, /*  'o' */ /* approximate ordmasculine */
			62, /*  '>' */ /* approximate french >> */
			63, /*  NRP */ /* onequarter */
			63, /*  NRP */ /* onehalf */
			63, /*  NRP */ /* threequarters */
			96, /*   96 */ /* Inverted ? */

			/* 192 - 199 */
			65, /*  'A' */ /* approximate A grave */
			65, /*  'A' */ /* approximate A acute */
			65, /*  'A' */ /* approximate A circumflex */
			65, /*  'A' */ /* approximate A tilde */
			91, /*   91 */ /* A dieresis */
			14, /*   14 */ /* A ring */
			28, /*   28 */ /* AE ligature */
			9, /*    9 */ /* C cedilla */

			/* 200 - 207 */
			69, /*  'E' */ /* approximate E grave */
			31, /*   31 */ /* E acute */
			69, /*  'E' */ /* approximate E circumflex */
			69, /*  'E' */ /* approximate E dieresis */
			73, /*  'I' */ /* approximate I grave */
			73, /*  'I' */ /* approximate I acute */
			73, /*  'I' */ /* approximate I circumflex */
			73, /*  'I' */ /* approximate I dieresis */

			/* 208 - 215 */
			63, /*  NRP */ /* Eth */
			93, /*   93 */ /* N tilde */
			79, /*  'O' */ /* approximate O grave */
			79, /*  'O' */ /* approximate O acute */
			79, /*  'O' */ /* approximate O circumflex */
			79, /*  'O' */ /* approximate O tilde */
			92, /*   92 */ /* O dieresis */
			120, /*  'x' */ /* approximate multiplication sign */

			/* 216 - 223 */
			11, /*   11 */ /* O slash */
			85, /*  'U' */ /* approximate U grave */
			85, /*  'U' */ /* approximate U acute */
			85, /*  'U' */ /* approximate U circumflex */
			94, /*   94 */ /* U dieresis */
			89, /*  'Y' */ /* approximate Y acute */
			63, /*  NRP */ /* approximate Thorn */
			30, /*   30 */ /* german double-s */

			/* 224 - 231 */
			127, /*  127 */ /* a grave */
			97, /*  'a' */ /* approximate a acute */
			97, /*  'a' */ /* approximate a circumflex */
			97, /*  'a' */ /* approximate a tilde */
			123, /*  123 */ /* a dieresis */
			15, /*   15 */ /* a ring */
			29, /*   29 */ /* ae ligature */
			99, /*  'c' */ /* approximate c cedilla as c */

			/* 232 - 239 */
			4, /*    4 */ /* e grave */
			5, /*    5 */ /* e acute */
			101, /*  'e' */ /* approximate e circumflex */
			101, /*  'e' */ /* approximate e dieresis */
			7, /*    7 */ /* i grave */
			105, /*  'i' */ /* approximate i acute */
			105, /*  'i' */ /* approximate i circumflex */
			105, /*  'i' */ /* approximate i dieresis */

			/* 240 - 247 */
			63, /*  NRP */ /* eth */
			125, /*  125 */ /* n tilde */
			8, /*    8 */ /* o grave */
			111, /*  'o' */ /* approximate o acute */
			111, /*  'o' */ /* approximate o circumflex */
			111, /*  'o' */ /* approximate o tilde */
			124, /*  124 */ /* o dieresis */
			63, /*  NRP */ /* division sign */

			/* 248 - 255 */
			12, /*   12 */ /* o slash */
			6, /*    6 */ /* u grave */
			117, /*  'u' */ /* approximate u acute */
			117, /*  'u' */ /* approximate u circumflex */
			126, /*  126 */ /* u dieresis */
			121, /*  'y' */ /* approximate y acute */
			63, /*  NRP */ /* thorn */
			121 /*  'y' */ /* approximate y dieresis */
		};

		/// <summary>
		/// This method calculates the maximum size a message may have in order
		/// to not exceed maxlen when it is encoded in GSM.
		/// </summary>
		/// <param name="message">The message that will be encoded</param>
		/// <param name="maxlen">The maximum size of the message once encoded</param>
		/// <returns>Returns the maximum size of the message that will not exceed 
		/// maxlen when the message is encoded in GSM. If message is null, GetCorrectMessageSize returns 0.
		/// </returns>
		public static int GetCorrectMessageSize(byte[] message, int maxlen) {
			int len=0;

			if ( message == null ) {
				// Just to be safe...
				return 0;
			}

			// Now we start calculating the message length. If we exceed 
			// maxlen, we return our current position in the string.
			int bufsize = message.Length;
			int i;
			for (i = 0; i < bufsize; i++) {
				int inc = 1;
				if ( _table[message[i]] < 0) {
					inc = 2;
				}
				if (len+inc > maxlen) {
					return i;
				}
				len += inc;
			}

			return i;
		}
	}
}