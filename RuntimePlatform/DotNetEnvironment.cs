/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Resources;

namespace OutSystems.HubEdition.RuntimePlatform.Utilities
{
	/// <summary>
	/// Summary description for Environment.
	/// </summary>
	public class DotNetEnvironment
	{
		static protected object m_resMgrLockObject;
		static protected ResourceManager SystemResMgr;
		static protected bool m_loadingResource;
		public DotNetEnvironment() { }

		private static ResourceManager InitResourceManager() {
			if (SystemResMgr == null)
				lock (typeof(Environment))
					if (SystemResMgr == null) {
						m_resMgrLockObject = new Object();
						SystemResMgr = new ResourceManager("mscorlib", typeof(String).Assembly);
					}
			return SystemResMgr;
		}
		public static string GetResourceString(string key) {
			string local1;

			if (SystemResMgr == null)
				InitResourceManager();
			lock (m_resMgrLockObject) {
				if (m_loadingResource) {
					local1 = "[Resource lookup failed - infinite recursion detected.  Resource name: " + key + 93;
				} else {
					m_loadingResource = true;
					local1 = SystemResMgr.GetString(key, null);
					m_loadingResource = false;
				}
			}
			return local1;
		}
		public static string GetResourceString(string key, object[] values) {
			string local0;
			string local1;

			if (SystemResMgr == null)
				InitResourceManager();
			lock (m_resMgrLockObject) {
				if (m_loadingResource) {
					local1 = "[Resource lookup failed - infinite recursion detected.  Resource name: " + key + 93;
					return local1;
				} else {
					m_loadingResource = true;
					local0 = SystemResMgr.GetString(key, null);
					m_loadingResource = false;
				}
			}
			return String.Format(local0, values);
		}
	}
}
