/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Configuration;
using System.Diagnostics;
using System.Data;
using System.Collections;
using System.ComponentModel;
using System.IO;
using System.Web;
using System.Web.SessionState;
using System.Globalization;
using System.Resources;
using System.Security.AccessControl;
using System.Reflection;
using System.Threading;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Log;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Extensibility;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.SMS;

namespace ssAddress_CS {

	public class Global: System.Web.HttpApplication {

		private static object _initLock = new object();
		private static bool _initialized = false;

		public const int eSpaceId = 391;

		private static object databaseResourceManagerLock = new object();
		private static object embeddedResourceManagerLock = new object();
		private static volatile IResourceManager databaseResourceManager;
		private static volatile IResourceManager embeddedResourceManager;



		public static AppInfo App {
			get {
				return AppInfo.GetAppInfo();
			}
		}

		public static SitePropertiesInfo SiteProperties {
			get {
				return App.Espace(eSpaceId).EspaceSiteProperties;
			}
		}
		// Global.SiteProperties["name"]

		private static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		protected string RequestPtaName {
			get {
				return AppInfo.GetRequestPtaName(HttpRuntime.AppDomainAppVirtualPath);
			}
		}

		protected string RequestPtaUserName {
			get {
				// User name associated with pta
				string ptaName = RequestPtaName;
				if (ptaName == OutSystems.RuntimeCommon.Constants.COMMON_PERSONAL_AREA_NAME)
				return "";
				else
				return ptaName;
			}
		}

		public Global() {
			InitializeComponent();
		}

		static Global() {
			// Log
			OutSystems.RuntimeCommon.Log.EventLogger.SetUp(OutSystems.RuntimeCommon.Log.EventLogger.DefaultSource, "Message generated by eSpace Address_CS.");
			// Late load
			_sharedPath = Path.Combine(AppDomain.CurrentDomain.SetupInformation.ApplicationBase, "bin2");
			AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);
			AppDomain.CurrentDomain.SetShadowCopyPath(AppDomain.CurrentDomain.SetupInformation.ShadowCopyDirectories + ";" + _sharedPath);
			// Session
			SessionDefaults.SessionDefaultFunctions += new GetSessionDefaultDelegate(GetSessionDefault);
		}

		protected static string _sharedPath;

		// Assembly.LoadFrom fails in webgarden scenario(2 processes), the mutex is cross process and avoids the error
		// Note: LoadFrom only fails because it needs to implicity do copy the dll to temp folder(shadow copy)
		// if in the future we decide to drop the use of shadow copy, we can remove the mutexes
		protected static Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args) {
			string asmName = new AssemblyName(args.Name).Name;
			string assemblyToLoad = Path.Combine(_sharedPath, asmName + ".DLL");

			if (File.Exists(assemblyToLoad)) {
				Mutex mutex = MutexHelper.CreateMutex("OSMutex-{" + assemblyToLoad.GetHashCode().ToString() + "}",/*globalMutex*/ true);

				bool adquired = false;
				try {
					adquired = mutex.WaitOne();
					Assembly assembly = Assembly.LoadFrom(assemblyToLoad);
					return assembly;
				} catch (IOException) {
					// Ignore IO Exceptions. AssemblyResolve should not fail on those errors.
					return null;
				} finally {
					if (adquired) {
						mutex.ReleaseMutex();
					}
				}
			}
			return null;
		}

		protected static object GetSessionDefault(string varName) {
			if (varName == "UserName")
			return "";
			if (varName == "TerminalType")
			return "";
			if (varName == "MSISDN")
			return "";

			return null;
		}

		#region Web Form Designer generated code

		private void InitializeComponent() {
			lock(_initLock) {
				if (!_initialized) {
					RuntimeLogger.SetUp("eSpace Address_CS", true);
					this.AcquireRequestState += Application_AcquireRequestState;
					SessionInfo.SessionStart += RunOnSessionStart;
				}
				_initialized = true;
			}
		}

		#endregion

		protected void Application_Start(Object sender, EventArgs e) {
			try {
				Application["ApplicationStartError"] = null;
				Application["EspaceName"] = "Address_CS";

				// Workaround: Force first access to HeContext to correctly save CurrentCulture
				var firstAccess = HeContext.UnknownEntryPoint;

				// Set default date/time format
				FormatInfo.SetDefaultDateAndDateTimeFormatString("yyyy-M-d", "yyyy-MM-dd");
				// Set decimal and group separator
				FormatInfo.SetInputDecimalSeparator(".");
				FormatInfo.SetInputGroupSeparator("");

				SMSInterface.Init();
				ESpaceInfoForAppStart eSpaceInfo = new ESpaceInfoForAppStart();

				// Check the eSpaceName from the begining of the path
				eSpaceInfo.ESpaceName = "Address_CS";
				eSpaceInfo.ESpaceId = eSpaceId;
				eSpaceInfo.ESpaceVersionId = int.Parse(ConfigurationManager.AppSettings["OutSystems.HubEdition.EspaceVersionID"]);
				eSpaceInfo.ESpaceJQueryVersion = JQueryVersion.JQuery183;

				AppInfo App = new AppInfo(eSpaceInfo);
				if (!forTestAction) {
					App.SetupInvalidateCallbackCache();
					App.InjectionCache.RunCallbacks(App, null, OutSystems.HubEdition.RuntimePlatform.Callbacks.CallbackEvent.ApplicationStart);
				}
				OutSystems.HubEdition.WebWidgets.OSPage.ValidationMessagesInstance = new ValidationMessages();
				OutSystems.HubEdition.WebWidgets.OSUserControl.ValidationMessagesInstance = new ValidationMessages();
				System.Net.ServicePointManager.Expect100Continue = Settings.GetBool(Settings.Configs.Runtime_Expect100Continue);

				LifecyleListenerManager.RegisterListener("OutSystems.RESTService.ServiceConfiguration", new System.Reflection.AssemblyName("OutSystems.RESTService.Runtime"));

				LifecyleListenerManager.OnApplicationStart();
			} catch (Exception excep) {
				Application["ApplicationStartError"] = excep;
				AppInfo.SetAppInfo(HttpContext.Current, null);
				ErrorLog.LogApplicationError(excep,/*context*/ null, "Global");
			}
		}

		protected void Session_Start(Object sender, EventArgs e) {
		}
		protected void Application_PostAcquireRequestState(Object sender, EventArgs e) {
			RequestTracer perfTracer = RuntimePlatformUtils.GetRequestTracer();
			if (perfTracer != null) {
				perfTracer.RegisterSessionAcquisitionTime();
			}

		}

		protected void Application_AcquireRequestState(Object sender, EventArgs e) {
			Context.Items["osCurrentPTAName"] = RequestPtaName;
			Context.Items["osCurrentPTAUserName"] = RequestPtaUserName;
			Context.Items["osIsLoadingScreen"] = false;
			RunningInfo.InitializeRunningInfo();
			RunningInfo.ESpaceHash = ConfigurationManager.AppSettings["OutSystems.HubEdition.EspaceCompilationHash"];
			RunningInfo.ESpaceVersionToken = ConfigurationManager.AppSettings["OutSystems.HubEdition.EspaceVersionToken"];
			RunningInfo.ESpaceVersionId = int.Parse(ConfigurationManager.AppSettings["OutSystems.HubEdition.EspaceVersionID"]);
			RunningInfo.DebugMode = false;
			// Skips internal pages
			if (Request.FilePath.ToLowerInvariant().EndsWith("/_ping.aspx") || Request.FilePath.ToLowerInvariant().EndsWith("/_queriescoverage.aspx") || Request.FilePath.ToLower().EndsWith("/_debugger.asmx") || Request.FilePath.ToLower().EndsWith("/_debuggerevents.ashx")) {
				return;
			}

			if (App == null) {
				// Try again
				Application_Start(sender, e);
				if (Application["ApplicationStartError"] != null) {
					ApplicationStartErrorRedirect();
				}
			}

			if (App.Tenant.PhoneConfigException != null) {
				Application["ApplicationStartError"] = App.Tenant.PhoneConfigException;
				ApplicationStartErrorRedirect();
			}

			// Session Start
			HeContext heContext = Global.App.OsContext;
			heContext.InitSession();

			var sessionCookieKey = Response.Cookies.AllKeys.FirstIfSingleOrDefault(c => c == CookieActions.GetSessionCookieName());
			if (sessionCookieKey != null) {
				var sessionCookie = Response.Cookies.Get(sessionCookieKey);
				if (sessionCookie != null && Settings.GetBool(Settings.Configs.EnforceSessionCookiesSecure)) {
					sessionCookie.Secure = true;
				}
			}

			if (Context.Session == null || heContext.Session.NeedsSessionStart(App.eSpaceName)) {
				if (Request.Path.ToLowerInvariant().EndsWith("_SmsHandler.aspx")) {
					Global.App.OsContext.Session["TerminalType"] = "SMS";
					Global.App.OsContext.Session["MSISDN"] = Global.App.OsContext.MOMsg.MSISDN;
				} else if (Request.Path.ToLowerInvariant().EndsWith("smshandler.asmx")) {
					Global.App.OsContext.Session["TerminalType"] = "SMS";
					Global.App.OsContext.Session["MSISDN"] = Request.Headers["MSISDN"];
				} else {
					Global.App.OsContext.Session["TerminalType"] = "WEB";
					Global.App.OsContext.Session["MSISDN"] = "";
				}

				if (Application["ApplicationStartError"] != null) {
					// Try again
					Application_Start(sender, e);
				}

				if (Application["ApplicationStartError"] != null) {
					ApplicationStartErrorRedirect();
				}
				if (Context.Session != null) {
					ExtendedActions.AutoLogin(App, App.OsContext.Session);
					RunOnSessionStart();
				}
			}/*
			   else {

			   } */

			// Process visit cookies
			if (RuntimePlatformUtils.ShouldCreateCookieForRequest()) {
				if (Request.CurrentExecutionFilePath.ToLowerInvariant().EndsWith(".aspx")) {

					var osVisitorCookie = Request.Cookies["osVisitor"];
					var osVisitCookie = Request.Cookies["osVisit"];

					if (osVisitorCookie == null || !GuidUtils.IsGuid(osVisitorCookie.Value)) {
						osVisitorCookie = new HttpCookie("osVisitor", Guid.NewGuid().ToString());
						osVisitorCookie.Expires = DateTime.Now.AddYears(100); // forever
						SecureCookieUtils.setSecureCookie(osVisitorCookie, heContext.Context.Response);
					}

					if (osVisitCookie == null || !GuidUtils.IsGuid(osVisitCookie.Value)) {
						osVisitCookie = new HttpCookie("osVisit", Guid.NewGuid().ToString());
						heContext.Session["osIsNewVisit"] = true;
					}
					osVisitCookie.Expires = DateTime.Now.AddMinutes(30);
					SecureCookieUtils.setSecureCookie(osVisitCookie, heContext.Context.Response);

					Context.Items["osVisitor"] = osVisitorCookie.Value;
					Context.Items["osVisit"] = osVisitCookie.Value;
				}
			}

			App.OsContext.Session[GenericExtendedActions.ReqAuditCountSessionName] = 0;

			// Default Multilingual state
			if (!App.MultilingualEnabled) {
				GenericExtendedActions.SetCurrentLocale(heContext, "");
			} else {
				string localeHeader = heContext.OsISAPIFilter.GetLocale(Request);
				if (localeHeader != null) {
					try {
						GenericExtendedActions.SetCurrentLocale(heContext, localeHeader); 
					} catch {}
				}
			}
		}

		private void RunOnSessionStart() {
			if (HttpContext.Current.Session == null) {
				return;
			}

			AppInfo info = AppInfo.GetAppInfo();
			HeContext heContext = info.OsContext;
			if (heContext == null || !heContext.Session.TestAndSetNeedsSessionStart(info.eSpaceName)) {
				return;
			}

			bool processedOk = false;
			try {
				Actions.ActionOnSessionStart(heContext);
				processedOk = true;
			} finally {
				if (processedOk) {
					DatabaseAccess.CommitAllTransactions();
				} else {
					DatabaseAccess.RollbackAllTransactions();
				}
			}


			if (!forTestAction) {
				App.InjectionCache.RunCallbacks(info, heContext.Session, OutSystems.HubEdition.RuntimePlatform.Callbacks.CallbackEvent.SessionStart);
			}
		}

		protected void ApplicationStartErrorRedirect() {
			if (Request.FilePath.ToLowerInvariant().EndsWith("_smshandler.aspx") || (App != null && App.OsContext.Session.TerminalType == "SMS")) {
				defaultExceptionNode nd = new defaultExceptionNode();
				nd.Execute(App.OsContext);
				if (Context.Session != null) Session[App.eSpaceName + App.Tenant.Id] = null;
				Response.End();
			} else {
				Exception excep = (Exception) Application["ApplicationStartError"];
				if (excep is LicensingException) {
					HandleLicensingError((LicensingException) excep);
				} else {
					Server.Transfer("_WebErrorPage.aspx");
				}
			}
			if (Context.Session != null) Session[App.eSpaceName + App.Tenant.Id] = null;
		}

		protected void Application_BeginRequest(Object sender, EventArgs e) {
			var appInfo = App;
			if (appInfo == null) {
				// Try again
				Application_Start(sender, e);
			}

			appInfo = App;
			if (appInfo != null) {
				RequestTracer perfTracer = new RequestTracer(appInfo.ApplicationUID, appInfo.ApplicationName, appInfo.eSpaceUID, App.eSpaceName,
				appInfo.Tenant.Id_Guid, appInfo.Tenant.Name, appInfo.EnvironmentKey, appInfo.EnvironmentName, appInfo.FrontendName);
				perfTracer.RegisterBeginRequest(DateTime.Now);
				appInfo.OsContext.RequestTracer = perfTracer;
				HttpCompressionModule.OnBeginRequest(sender, e);
				appInfo.NotifyBeginRequest();
			}
			if (!forTestAction) {
				const string PreferredEncoding = "preferredEncoding";
				if (Request.Browser[PreferredEncoding] != null) {
					Request.ContentEncoding = System.Text.Encoding.GetEncoding(Request.Browser[PreferredEncoding]);
					Response.ContentEncoding = System.Text.Encoding.GetEncoding(Request.Browser[PreferredEncoding]);
				}

			}
		}

		protected void Application_EndRequest(Object sender, EventArgs e) {
			RequestTracer perfTracer = RuntimePlatformUtils.GetRequestTracer();
			if (perfTracer != null) {
				perfTracer.RegisterViewStateSize();
			}

			if (App != null && App.OsContext != null) {
				App.OsContext.OnEndRequest();
			}

			DatabaseAccess.FreeupResources(true);
			HttpCompressionModule.OnEndRequest(sender, e);

			if (perfTracer != null) {
				perfTracer.RegisterEndRequest();
				perfTracer.CreateEvents();
				perfTracer.EmitEvents();
			}
		}

		protected void Application_AuthenticateRequest(Object sender, EventArgs e) {
		}

		private void HandleLicensingError(LicensingException excep) {
			string contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
			string errorCode = "APPLICATION_LICENSING_ERROR";
			string errorDetail = BuiltInFunction.EncodeUrl(excep.Detail.IsEmpty() ? excep.Message: excep.Detail);
			Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=" + errorCode + "&errorDetail=" + errorDetail);
		}

		protected void Application_Error(Object sender, EventArgs e) {
			HeContext context = null;
			try {
				context = App.OsContext; 
			} catch {}
			try {
				Exception excep = Server.GetLastError();
				// LicensingException is already logged by RuntimePlatform
				if (excep != null && !(excep is LicensingException)) {
					ErrorLog.LogApplicationError(excep, context, "Global");
				}
				while (excep != null) {
					if (excep is LicensingException) {
						HandleLicensingError((LicensingException) excep);
						break;
					}
					excep = excep.InnerException;
				}
			} finally {
				// rollback transactions
				DatabaseAccess.FreeupResources(false);
			}
		}

		protected void Session_End(Object sender, EventArgs e) {
			// don't use, this is only invoked when using in-memory sessions
		}

		protected void Application_End(Object sender, EventArgs e) {
		}


		class SmartErrorLog {
			private DateTime lastLogTime;
			private int countLogs;
			private bool waitUntilLogAgain;

			private SmartErrorLog() {
				countLogs = 0;
				lastLogTime = DateTime.Now;
				waitUntilLogAgain = false;
			}

			private void Log(Exception exception, string stackTrace, string key, int retries) {
				bool shouldLog = true;

				if (countLogs >= 1000) {
					waitUntilLogAgain = true;
					countLogs = 0;
				}
				if (waitUntilLogAgain) {
					TimeSpan difftime = DateTime.Now.Subtract(lastLogTime);
					shouldLog = difftime.TotalHours >= 1;
				}

				if (shouldLog) {
					waitUntilLogAgain = false;
					string message = "Error getting resource " + key +
					 "\r\nretry: " + (5 - retries) +
					 "\r\n" + exception.Message;
					ErrorLog.LogApplicationError(message, stackTrace, App.OsContext, "Global");
					lastLogTime = DateTime.Now;
					countLogs++;
				}
			}


			private static SmartErrorLog singleton = null;

			public static void LogError(Exception e, string stackTrace, string key, int retries) {
				if (singleton == null)
				singleton = new SmartErrorLog();
				singleton.Log(e, stackTrace, key, retries);
			}
		}

		public static string GetStringResource(string key, string defaultValue) {
			// set current thread's culture
			Thread.CurrentThread.CurrentUICulture = AppInfo.GetAppInfo().OsContext.CurrentCulture;



			// get resource manager
			if (embeddedResourceManager == null) {
				lock(embeddedResourceManagerLock) {
					if (embeddedResourceManager == null) {
						string baseResourceName = "Address_CS" + "Language";
						embeddedResourceManager = new EmbeddedResourceManager(
						baseResourceName,
						Assembly.GetExecutingAssembly(),
						delegate(Exception exception, int retries, string k) {
							SmartErrorLog.LogError(exception, new StackTrace().ToString(), k, retries);
						});
					}
				}
			}

			// get resource
			return embeddedResourceManager.GetString(key) ?? defaultValue;
		}

		public static string GetEffectiveLocale() {
			return GetStringResource("EffectiveLocale", "");
		}

		private bool forTestAction;
		public void TestActionInit() {
			forTestAction = true;

			ConstructorInfo ctor = typeof(HttpApplicationState).GetConstructor(BindingFlags.Instance | BindingFlags.NonPublic, null, new Type[] {}
			, new ParameterModifier[] {});
			HttpApplicationState applicationState = (HttpApplicationState) ctor.Invoke(new object[] {});

			FieldInfo stateProp = typeof(HttpApplication).GetField("_state", BindingFlags.Instance | BindingFlags.NonPublic);
			stateProp.SetValue(this, applicationState);

			FieldInfo contextProp = typeof(HttpApplication).GetField("_context", BindingFlags.Instance | BindingFlags.NonPublic);
			contextProp.SetValue(this, HttpContext.Current);

			Application_Start(this, EventArgs.Empty);
			Request.Browser = new HttpBrowserCapabilities();
			App.OsContext.CurrentExecutionFileName = Request.FilePath.Substring(Request.FilePath.LastIndexOf('/') + 1);
			Application_BeginRequest(this, EventArgs.Empty);
			Application_AuthenticateRequest(this, EventArgs.Empty);
			Application_AcquireRequestState(this, EventArgs.Empty);
		}
	}
}
