/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;

namespace ssAddress_CS {

	public sealed partial class ENCountryEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceBusiness_CS.ENCountryEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceBusiness_CS.ENCountryEntity.eSpaceId;
		public static System.Collections.Generic.Dictionary<string, string> AttributesToDatabaseNamesMap() {
			return new System.Collections.Generic.Dictionary<string, string>() {
				{ "id", "Id"
				}
				, { "iso", "ISO"
				}
				, { "name", "Name"
				}
				, { "active", "Active"
				}
				, { "createddate", "CreatedDate"
				}
				, { "createdby", "CreatedBy"
				}
				, { "lastupdateddate", "LastUpdatedDate"
				}
				, { "lastupdatedby", "LastUpdatedBy"
				}
			};
		}
	} // ENCountryEntity

	/// <summary>
	/// Entity <code>ENCountryEntityRecord</code> that represents the Service Studio entity
	///  <code>Country</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Country", "qInE8d+sJ0qK+mfAcBtSwg", "2B5_Z3+gKEKsHPxr4ivA_Q", 0, "OSUSR_b63_Country", "")]
	[Serializable()]
	public partial struct ENCountryEntityRecord: ISerializable, ITypedRecord<ENCountryEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("2B5_Z3+gKEKsHPxr4ivA_Q*dsXhnT7NJU2F3YMSbokGBQ");
		private static readonly GlobalObjectKey IdISO = GlobalObjectKey.Parse("2B5_Z3+gKEKsHPxr4ivA_Q*rShgXZLq4ESgjqHIevLeNQ");
		private static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("2B5_Z3+gKEKsHPxr4ivA_Q*LcAWK69PLk+vzF2V5GHZlg");
		private static readonly GlobalObjectKey IdActive = GlobalObjectKey.Parse("2B5_Z3+gKEKsHPxr4ivA_Q*Jox_3WUWy02lK33dqScR_Q");
		private static readonly GlobalObjectKey IdCreatedDate = GlobalObjectKey.Parse("2B5_Z3+gKEKsHPxr4ivA_Q*SJVEmtMBTEaMnSJrYMOmUQ");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("2B5_Z3+gKEKsHPxr4ivA_Q*etRlaPL1h0i0q42Tb_PcSg");
		private static readonly GlobalObjectKey IdLastUpdatedDate = GlobalObjectKey.Parse("2B5_Z3+gKEKsHPxr4ivA_Q*ibclQprt3UWD_fBAVJIIog");
		private static readonly GlobalObjectKey IdLastUpdatedBy = GlobalObjectKey.Parse("2B5_Z3+gKEKsHPxr4ivA_Q*bTEwVoXdrEa_HZ0TQGx5uw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false, true)]
		[System.Xml.Serialization.XmlElement("Id")]
		private long _ssId;
		public long ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(8, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ISO", 50, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("ISO")]
		private string _ssISO;
		public string ssISO {
			get {
				return _ssISO;
			}
			set {
				if ((_ssISO!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssISO = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NAME", 50, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Name")]
		private string _ssName;
		public string ssName {
			get {
				return _ssName;
			}
			set {
				if ((_ssName!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ACTIVE", 0, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Active")]
		private bool _ssActive;
		public bool ssActive {
			get {
				return _ssActive;
			}
			set {
				if ((_ssActive!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssActive = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDDATE", 0, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedDate")]
		private DateTime _ssCreatedDate;
		public DateTime ssCreatedDate {
			get {
				return _ssCreatedDate;
			}
			set {
				if ((_ssCreatedDate!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssCreatedDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true, false)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDDATE", 0, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("LastUpdatedDate")]
		private DateTime _ssLastUpdatedDate;
		public DateTime ssLastUpdatedDate {
			get {
				return _ssLastUpdatedDate;
			}
			set {
				if ((_ssLastUpdatedDate!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssLastUpdatedDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDBY", 0, false, false, true, false)]
		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		private int _ssLastUpdatedBy;
		public int ssLastUpdatedBy {
			get {
				return _ssLastUpdatedBy;
			}
			set {
				if ((_ssLastUpdatedBy!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssLastUpdatedBy = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENCountryEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(8, true);
			OptimizedAttributes = new BitArray(8, false);
			_ssId = 0L;
			_ssISO = "";
			_ssName = "";
			_ssActive = true;
			_ssCreatedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssLastUpdatedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLastUpdatedBy = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadLongInteger(index++, "Country.Id", 0L);
			ssISO = r.ReadText(index++, "Country.ISO", "");
			ssName = r.ReadText(index++, "Country.Name", "");
			ssActive = r.ReadBoolean(index++, "Country.Active", false);
			ssCreatedDate = r.ReadDateTime(index++, "Country.CreatedDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCreatedBy = r.ReadEntityReference(index++, "Country.CreatedBy", 0);
			ssLastUpdatedDate = r.ReadDateTime(index++, "Country.LastUpdatedDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssLastUpdatedBy = r.ReadEntityReference(index++, "Country.LastUpdatedBy", 0);
			ChangedAttributes = new BitArray(8, false);
			OptimizedAttributes = new BitArray(8, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENCountryEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENCountryEntityRecord a, ENCountryEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssISO != b.ssISO) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssActive != b.ssActive) return false;
			if (a.ssCreatedDate != b.ssCreatedDate) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssLastUpdatedDate != b.ssLastUpdatedDate) return false;
			if (a.ssLastUpdatedBy != b.ssLastUpdatedBy) return false;
			return true;
		}

		public static bool operator != (ENCountryEntityRecord a, ENCountryEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENCountryEntityRecord)) return false;
			return (this == (ENCountryEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssISO.GetHashCode()
				^ ssName.GetHashCode()
				^ ssActive.GetHashCode()
				^ ssCreatedDate.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssLastUpdatedDate.GetHashCode()
				^ ssLastUpdatedBy.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENCountryEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(8, true);
			OptimizedAttributes = new BitArray(8, false);
			_ssId = 0L;
			_ssISO = "";
			_ssName = "";
			_ssActive = true;
			_ssCreatedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssLastUpdatedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLastUpdatedBy = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (long) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssISO = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssName = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssActive = (bool) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssCreatedDate = (DateTime) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssLastUpdatedDate = (DateTime) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssLastUpdatedBy = (int) info.GetValue(fields[7] .Name, fields[7] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENCountryEntityRecord Duplicate() {
			ENCountryEntityRecord t;
			t._ssId = this._ssId;
			t._ssISO = this._ssISO;
			t._ssName = this._ssName;
			t._ssActive = this._ssActive;
			t._ssCreatedDate = this._ssCreatedDate;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssLastUpdatedDate = this._ssLastUpdatedDate;
			t._ssLastUpdatedBy = this._ssLastUpdatedBy;
			t.ChangedAttributes = new BitArray(8);
			t.OptimizedAttributes = new BitArray(8);
			for (int i = 0; i < 8; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.LongInteger); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ISO")) VarValue.AppendAttribute(recordElem, "ISO", ssISO, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ISO");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Active")) VarValue.AppendAttribute(recordElem, "Active", ssActive, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Active");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedDate")) VarValue.AppendAttribute(recordElem, "CreatedDate", ssCreatedDate, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedDate")) VarValue.AppendAttribute(recordElem, "LastUpdatedDate", ssLastUpdatedDate, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedBy")) VarValue.AppendAttribute(recordElem, "LastUpdatedBy", ssLastUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedBy");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ISO")) variable.Value = ssISO; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "active") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Active")) variable.Value = ssActive; else variable.Optimized = true;
			} else if (head == "createddate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedDate")) variable.Value = ssCreatedDate; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "lastupdateddate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedDate")) variable.Value = ssLastUpdatedDate; else variable.Optimized = true;
			} else if (head == "lastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedBy")) variable.Value = ssLastUpdatedBy; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdISO)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdName)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdActive)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdCreatedDate)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdLastUpdatedDate)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return ChangedAttributes[7];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdISO)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdName)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdActive)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdCreatedDate)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdLastUpdatedDate)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return OptimizedAttributes[7];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdISO) {
				return ssISO;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdActive) {
				return ssActive;
			} else if (key == IdCreatedDate) {
				return ssCreatedDate;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdLastUpdatedDate) {
				return ssLastUpdatedDate;
			} else if (key == IdLastUpdatedBy) {
				return ssLastUpdatedBy;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(8);
			OptimizedAttributes = new BitArray(8);
			if (other == null) return;
			ssId = (long) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssISO = (string) other.AttributeGet(IdISO);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdISO);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdISO);
			ssName = (string) other.AttributeGet(IdName);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdName);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdName);
			ssActive = (bool) other.AttributeGet(IdActive);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdActive);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdActive);
			ssCreatedDate = (DateTime) other.AttributeGet(IdCreatedDate);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdCreatedDate);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdCreatedDate);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdCreatedBy);
			ssLastUpdatedDate = (DateTime) other.AttributeGet(IdLastUpdatedDate);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdLastUpdatedDate);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdLastUpdatedDate);
			ssLastUpdatedBy = (int) other.AttributeGet(IdLastUpdatedBy);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdLastUpdatedBy);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdLastUpdatedBy);
		}
	} // ENCountryEntityRecord
	/// <summary>
	/// Structure <code>RCCountryRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCountryRecord: ISerializable, ITypedRecord<RCCountryRecord> {
		private static readonly GlobalObjectKey IdCountry = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*hdvpykw49hcfU4euUKH9fg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Country")]
		public ENCountryEntityRecord ssENCountry;


		public static implicit operator ENCountryEntityRecord(RCCountryRecord r) {
			return r.ssENCountry;
		}

		public static implicit operator RCCountryRecord(ENCountryEntityRecord r) {
			RCCountryRecord res = new RCCountryRecord(null);
			res.ssENCountry = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENCountry.ChangedAttributes = value;
			}
			get {
				return ssENCountry.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCCountryRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENCountry = new ENCountryEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(8, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENCountry.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENCountry.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENCountry.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENCountry.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCountryRecord r) {
			this = r;
		}


		public static bool operator == (RCCountryRecord a, RCCountryRecord b) {
			if (a.ssENCountry != b.ssENCountry) return false;
			return true;
		}

		public static bool operator != (RCCountryRecord a, RCCountryRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCountryRecord)) return false;
			return (this == (RCCountryRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENCountry.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCountryRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENCountry = new ENCountryEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENCountry = (ENCountryEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENCountry.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENCountry.InternalRecursiveSave();
		}


		public RCCountryRecord Duplicate() {
			RCCountryRecord t;
			t.ssENCountry = (ENCountryEntityRecord) this.ssENCountry.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENCountry.ToXml(this, recordElem, "Country", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "country") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Country")) variable.Value = ssENCountry; else variable.Optimized = true;
				variable.SetFieldName("country");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENCountry.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENCountry.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCountry) {
				return ssENCountry;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENCountry.FillFromOther((IRecord) other.AttributeGet(IdCountry));
		}
	} // RCCountryRecord
	/// <summary>
	/// RecordList type <code>RLCountryRecordList</code> that represents a record list of
	///  <code>Country</code>
	/// </summary>
	[Serializable()]
	public partial class RLCountryRecordList: GenericRecordList<RCCountryRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCountryRecord GetElementDefaultValue() {
			return new RCCountryRecord("");
		}

		public T[] ToArray<T>(Func<RCCountryRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCountryRecordList recordlist, Func<RCCountryRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}

		public static RLCountryRecordList ToList<T>(T[] array, Func <T, RCCountryRecord> converter) {
			RLCountryRecordList result = new RLCountryRecordList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLCountryRecordList FromRestList<T>(RestList<T> restList, Func <T, RCCountryRecord> converter) {
			RLCountryRecordList result = new RLCountryRecordList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCountryRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCountryRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCountryRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCountryRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(8, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCountryRecord> NewList() {
			return new RLCountryRecordList();
		}


	} // RLCountryRecordList

	/// <summary>
	/// RecordList type <code>RLCountryList</code> that represents a record list of <code>Country</code>
	/// </summary>
	[Serializable()]
	public partial class RLCountryList: GenericRecordList<ENCountryEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENCountryEntityRecord GetElementDefaultValue() {
			return new ENCountryEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENCountryEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCountryList recordlist, Func<ENCountryEntityRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}

		public static RLCountryList ToList<T>(T[] array, Func <T, ENCountryEntityRecord> converter) {
			RLCountryList result = new RLCountryList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLCountryList FromRestList<T>(RestList<T> restList, Func <T, ENCountryEntityRecord> converter) {
			RLCountryList result = new RLCountryList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCountryList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCountryList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCountryList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCountryList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENCountryEntityRecord> NewList() {
			return new RLCountryList();
		}


	} // RLCountryList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: GetCountry
		/// </summary>

		public static void GetCountry(HeContext heContext, long inParamId, out RCCountryRecord outParamRecord) {
			outParamRecord = new RCCountryRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENCountryEntity.eSpaceId;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [ISO]" +
					 ", [NAME]" +
					 ", [ACTIVE]" +
					 ", [CREATEDDATE]" +
					 ", [CREATEDBY]" +
					 ", [LASTUPDATEDDATE]" +
					 ", [LASTUPDATEDBY]" +
					 " FROM " + ENCountryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int64, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetCountry", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(8, false)
							};
						} else
						throw new DataBaseException(ENCountryEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssAddress_CS {
	[XmlType("Country")]
	public class WORCCountryRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public long varWSId;

		[System.Xml.Serialization.XmlElement("ISO")]
		public string varWSISO;

		[System.Xml.Serialization.XmlElement("Name")]
		public string varWSName;

		[System.Xml.Serialization.XmlElement("Active")]
		public bool varWSActive;

		[System.Xml.Serialization.XmlElement("CreatedDate")]
		public DateTime varWSCreatedDate;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("LastUpdatedDate")]
		public DateTime varWSLastUpdatedDate;

		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		public int varWSLastUpdatedBy;

		public WORCCountryRecord() {
			varWSId = (long) 0L;
			varWSISO = (string) "";
			varWSName = (string) "";
			varWSActive = (bool) true;
			varWSCreatedDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCreatedBy = (int) 0;
			varWSLastUpdatedDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSLastUpdatedBy = (int) 0;
		}

		public WORCCountryRecord(ENCountryEntityRecord r) {
			varWSId = (long) r.ssId;
			varWSISO = BaseAppUtils.RemoveControlChars(r.ssISO);
			varWSName = BaseAppUtils.RemoveControlChars(r.ssName);
			varWSActive = (bool) r.ssActive;
			varWSCreatedDate = (DateTime) r.ssCreatedDate;
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSLastUpdatedDate = (DateTime) r.ssLastUpdatedDate;
			varWSLastUpdatedBy = (int) r.ssLastUpdatedBy;
		}

		public static RLCountryList ToRecordList(WORCCountryRecord[] array) {
			RLCountryList rl = new RLCountryList();
			if (array != null) {
				foreach(WORCCountryRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCCountryRecord[] FromRecordList(RLCountryList rl) {
			WORCCountryRecord[] array = new WORCCountryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssAddress_CS {
	partial struct RCCountryRecord {
		public static implicit operator WORCCountryRecord(RCCountryRecord r) {
			return new WORCCountryRecord(r.ssENCountry);
		}

		public static implicit operator RCCountryRecord(WORCCountryRecord w) {
			RCCountryRecord r = new RCCountryRecord("");
			if (w != null) {
				r.ssENCountry = w;
			}
			return r;
		}

	}

	partial struct ENCountryEntityRecord {
		public static implicit operator WORCCountryRecord(ENCountryEntityRecord r) {
			return new WORCCountryRecord(r);
		}

		public static implicit operator ENCountryEntityRecord(WORCCountryRecord w) {
			ENCountryEntityRecord r = new ENCountryEntityRecord("");
			if (w != null) {
				r.ssId = (long) w.varWSId;
				r.ssISO = ((string) w.varWSISO ?? "");
				r.ssName = ((string) w.varWSName ?? "");
				r.ssActive = (bool) w.varWSActive;
				r.ssCreatedDate = (DateTime) w.varWSCreatedDate;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssLastUpdatedDate = (DateTime) w.varWSLastUpdatedDate;
				r.ssLastUpdatedBy = (int) w.varWSLastUpdatedBy;
			}
			return r;
		}

	}
}


namespace ssAddress_CS {
	[Serializable()]
	public partial class WORLCountryRecordList {
		public WORCCountryRecord[] Array;


		public WORLCountryRecordList(WORCCountryRecord[] r) {
			if (r == null)
			Array = new WORCCountryRecord[0];
			else
			Array = r;
		}
		public WORLCountryRecordList() {
			Array = new WORCCountryRecord[0];
		}

		public WORLCountryRecordList(RLCountryRecordList rl) {
			rl=(RLCountryRecordList) rl.Duplicate();
			Array = new WORCCountryRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCCountryRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssAddress_CS {
	partial class RLCountryRecordList {
		public static implicit operator RLCountryRecordList(WORCCountryRecord[] array) {
			RLCountryRecordList rl = new RLCountryRecordList();
			if (array != null) {
				foreach(WORCCountryRecord val in array) {
					rl.Append((RCCountryRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCountryRecord[](RLCountryRecordList rl) {
			WORCCountryRecord[] array = new WORCCountryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCCountryRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssAddress_CS {
	partial class WORLCountryRecordList {
		public static implicit operator RLCountryRecordList(WORLCountryRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLCountryRecordList(RLCountryRecordList rl) {
			return new WORLCountryRecordList(rl);
		}
		public static implicit operator WORCCountryRecord[](WORLCountryRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCountryRecordList(WORCCountryRecord[] array) {
			return new WORLCountryRecordList(array);
		}
	}
}

