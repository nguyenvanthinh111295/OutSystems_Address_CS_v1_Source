/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;

namespace ssAddress_CS {

	public sealed partial class ENAddressEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase(391), "OSUSR_fx0_Address");
		}
		public static System.Collections.Generic.Dictionary<string, string> AttributesToDatabaseNamesMap() {
			return new System.Collections.Generic.Dictionary<string, string>() {
				{ "id", "Id"
				}
				, { "addressline1", "AddressLine1"
				}
				, { "addressline2", "AddressLine2"
				}
				, { "addressline3", "AddressLine3"
				}
				, { "addressline4", "AddressLine4"
				}
				, { "addressline5", "AddressLine5"
				}
				, { "city", "City"
				}
				, { "county", "County"
				}
				, { "postcode", "Postcode"
				}
				, { "countryid", "CountryId"
				}
				, { "addresstypeid", "AddressTypeId"
				}
				, { "active", "Active"
				}
				, { "createddate", "CreatedDate"
				}
				, { "createdby", "CreatedBy"
				}
				, { "lastupdateddate", "LastUpdatedDate"
				}
				, { "lastupdatedby", "LastUpdatedBy"
				}
			};
		}
	} // ENAddressEntity

	/// <summary>
	/// Entity <code>ENAddressEntityRecord</code> that represents the Service Studio entity
	///  <code>Address</code> <p> Description: Address table holding minimum address line details</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Address", "hIWpySV1SUqfbfcJA4FVQg", "XNcOB2dV_Uyr7HxSWwrycw", 0, "OSUSR_fx0_Address", null)]
	[Serializable()]
	public partial struct ENAddressEntityRecord: ISerializable, ITypedRecord<ENAddressEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*gWpKefPfn0muD2jZPe6TKQ");
		private static readonly GlobalObjectKey IdAddressLine1 = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*4+reXvKat0ieBX5vcZZZ+Q");
		private static readonly GlobalObjectKey IdAddressLine2 = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*j5C7VCwj60qy0+IDIvMl3w");
		private static readonly GlobalObjectKey IdAddressLine3 = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*HaGU2_Mry0e7gWfYq4xl8Q");
		private static readonly GlobalObjectKey IdAddressLine4 = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*bYDCnSP6nUSMcPCNyR4qVw");
		private static readonly GlobalObjectKey IdAddressLine5 = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*HOyfytL110aSFv5jOm0uIA");
		private static readonly GlobalObjectKey IdCity = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*mJa6sbKa4kOfOJbP6epaJg");
		private static readonly GlobalObjectKey IdCounty = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*F1jdCNVl+kacLcCszYnmoQ");
		private static readonly GlobalObjectKey IdPostcode = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*QiSijR2qXEWzG0UzFy4TZA");
		private static readonly GlobalObjectKey IdCountryId = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*jVTt1G3uUka3QY4+9tG7cw");
		private static readonly GlobalObjectKey IdAddressTypeId = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*LFzJiJM0lkWsywbpwEHEQw");
		private static readonly GlobalObjectKey IdActive = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*FT9yFqjUgkaajj49f6Ddmg");
		private static readonly GlobalObjectKey IdCreatedDate = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*BWod4+kWS0y2IzWvHNpE8w");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*+++ImnWCEUaR232yjyYqMA");
		private static readonly GlobalObjectKey IdLastUpdatedDate = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*uSu37m5SqE+fmgYacphSZQ");
		private static readonly GlobalObjectKey IdLastUpdatedBy = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*uusP+zoVeEy+zbQAjaRJlA");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false, true)]
		[System.Xml.Serialization.XmlElement("Id")]
		private long _ssId;
		public long ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(16, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ADDRESSLINE1", 100, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("AddressLine1")]
		private string _ssAddressLine1;
		public string ssAddressLine1 {
			get {
				return _ssAddressLine1;
			}
			set {
				if ((_ssAddressLine1!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssAddressLine1 = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ADDRESSLINE2", 100, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("AddressLine2")]
		private string _ssAddressLine2;
		public string ssAddressLine2 {
			get {
				return _ssAddressLine2;
			}
			set {
				if ((_ssAddressLine2!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssAddressLine2 = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ADDRESSLINE3", 100, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("AddressLine3")]
		private string _ssAddressLine3;
		public string ssAddressLine3 {
			get {
				return _ssAddressLine3;
			}
			set {
				if ((_ssAddressLine3!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssAddressLine3 = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ADDRESSLINE4", 100, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("AddressLine4")]
		private string _ssAddressLine4;
		public string ssAddressLine4 {
			get {
				return _ssAddressLine4;
			}
			set {
				if ((_ssAddressLine4!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssAddressLine4 = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ADDRESSLINE5", 100, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("AddressLine5")]
		private string _ssAddressLine5;
		public string ssAddressLine5 {
			get {
				return _ssAddressLine5;
			}
			set {
				if ((_ssAddressLine5!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssAddressLine5 = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CITY", 100, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("City")]
		private string _ssCity;
		public string ssCity {
			get {
				return _ssCity;
			}
			set {
				if ((_ssCity!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssCity = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COUNTY", 100, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("County")]
		private string _ssCounty;
		public string ssCounty {
			get {
				return _ssCounty;
			}
			set {
				if ((_ssCounty!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssCounty = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("POSTCODE", 50, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Postcode")]
		private string _ssPostcode;
		public string ssPostcode {
			get {
				return _ssPostcode;
			}
			set {
				if ((_ssPostcode!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssPostcode = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("COUNTRYID", 0, false, false, true, false)]
		[System.Xml.Serialization.XmlElement("CountryId")]
		private long _ssCountryId;
		public long ssCountryId {
			get {
				return _ssCountryId;
			}
			set {
				if ((_ssCountryId!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssCountryId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ADDRESSTYPEID", 0, false, false, true, false)]
		[System.Xml.Serialization.XmlElement("AddressTypeId")]
		private long _ssAddressTypeId;
		public long ssAddressTypeId {
			get {
				return _ssAddressTypeId;
			}
			set {
				if ((_ssAddressTypeId!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssAddressTypeId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ACTIVE", 0, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("Active")]
		private bool _ssActive;
		public bool ssActive {
			get {
				return _ssActive;
			}
			set {
				if ((_ssActive!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssActive = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDDATE", 0, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedDate")]
		private DateTime _ssCreatedDate;
		public DateTime ssCreatedDate {
			get {
				return _ssCreatedDate;
			}
			set {
				if ((_ssCreatedDate!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssCreatedDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDDATE", 0, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("LastUpdatedDate")]
		private DateTime _ssLastUpdatedDate;
		public DateTime ssLastUpdatedDate {
			get {
				return _ssLastUpdatedDate;
			}
			set {
				if ((_ssLastUpdatedDate!=value) || OptimizedAttributes[14]) {
					ChangedAttributes[14] = true;
					_ssLastUpdatedDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDBY", 0, false, false, true, true)]
		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		private int _ssLastUpdatedBy;
		public int ssLastUpdatedBy {
			get {
				return _ssLastUpdatedBy;
			}
			set {
				if ((_ssLastUpdatedBy!=value) || OptimizedAttributes[15]) {
					ChangedAttributes[15] = true;
					_ssLastUpdatedBy = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENAddressEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(16, true);
			OptimizedAttributes = new BitArray(16, false);
			_ssId = 0L;
			_ssAddressLine1 = "";
			_ssAddressLine2 = "";
			_ssAddressLine3 = "";
			_ssAddressLine4 = "";
			_ssAddressLine5 = "";
			_ssCity = "";
			_ssCounty = "";
			_ssPostcode = "";
			_ssCountryId = 0L;
			_ssAddressTypeId = 0L;
			_ssActive = true;
			_ssCreatedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssLastUpdatedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLastUpdatedBy = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadLongInteger(index++, "Address.Id", 0L);
			ssAddressLine1 = r.ReadText(index++, "Address.AddressLine1", "");
			ssAddressLine2 = r.ReadText(index++, "Address.AddressLine2", "");
			ssAddressLine3 = r.ReadText(index++, "Address.AddressLine3", "");
			ssAddressLine4 = r.ReadText(index++, "Address.AddressLine4", "");
			ssAddressLine5 = r.ReadText(index++, "Address.AddressLine5", "");
			ssCity = r.ReadText(index++, "Address.City", "");
			ssCounty = r.ReadText(index++, "Address.County", "");
			ssPostcode = r.ReadText(index++, "Address.Postcode", "");
			ssCountryId = r.ReadEntityReferenceLongInteger(index++, "Address.CountryId", 0L);
			ssAddressTypeId = r.ReadEntityReferenceLongInteger(index++, "Address.AddressTypeId", 0L);
			ssActive = r.ReadBoolean(index++, "Address.Active", false);
			ssCreatedDate = r.ReadDateTime(index++, "Address.CreatedDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCreatedBy = r.ReadEntityReference(index++, "Address.CreatedBy", 0);
			ssLastUpdatedDate = r.ReadDateTime(index++, "Address.LastUpdatedDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssLastUpdatedBy = r.ReadEntityReference(index++, "Address.LastUpdatedBy", 0);
			ChangedAttributes = new BitArray(16, false);
			OptimizedAttributes = new BitArray(16, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENAddressEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENAddressEntityRecord a, ENAddressEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssAddressLine1 != b.ssAddressLine1) return false;
			if (a.ssAddressLine2 != b.ssAddressLine2) return false;
			if (a.ssAddressLine3 != b.ssAddressLine3) return false;
			if (a.ssAddressLine4 != b.ssAddressLine4) return false;
			if (a.ssAddressLine5 != b.ssAddressLine5) return false;
			if (a.ssCity != b.ssCity) return false;
			if (a.ssCounty != b.ssCounty) return false;
			if (a.ssPostcode != b.ssPostcode) return false;
			if (a.ssCountryId != b.ssCountryId) return false;
			if (a.ssAddressTypeId != b.ssAddressTypeId) return false;
			if (a.ssActive != b.ssActive) return false;
			if (a.ssCreatedDate != b.ssCreatedDate) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssLastUpdatedDate != b.ssLastUpdatedDate) return false;
			if (a.ssLastUpdatedBy != b.ssLastUpdatedBy) return false;
			return true;
		}

		public static bool operator != (ENAddressEntityRecord a, ENAddressEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENAddressEntityRecord)) return false;
			return (this == (ENAddressEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssAddressLine1.GetHashCode()
				^ ssAddressLine2.GetHashCode()
				^ ssAddressLine3.GetHashCode()
				^ ssAddressLine4.GetHashCode()
				^ ssAddressLine5.GetHashCode()
				^ ssCity.GetHashCode()
				^ ssCounty.GetHashCode()
				^ ssPostcode.GetHashCode()
				^ ssCountryId.GetHashCode()
				^ ssAddressTypeId.GetHashCode()
				^ ssActive.GetHashCode()
				^ ssCreatedDate.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssLastUpdatedDate.GetHashCode()
				^ ssLastUpdatedBy.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENAddressEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(16, true);
			OptimizedAttributes = new BitArray(16, false);
			_ssId = 0L;
			_ssAddressLine1 = "";
			_ssAddressLine2 = "";
			_ssAddressLine3 = "";
			_ssAddressLine4 = "";
			_ssAddressLine5 = "";
			_ssCity = "";
			_ssCounty = "";
			_ssPostcode = "";
			_ssCountryId = 0L;
			_ssAddressTypeId = 0L;
			_ssActive = true;
			_ssCreatedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssLastUpdatedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLastUpdatedBy = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (long) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssAddressLine1 = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssAddressLine2 = (string) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssAddressLine3 = (string) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssAddressLine4 = (string) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssAddressLine5 = (string) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssCity = (string) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssCounty = (string) info.GetValue(fields[7] .Name, fields[7] .FieldType);
			if (fields[8] .FieldType.IsSerializable)
			_ssPostcode = (string) info.GetValue(fields[8] .Name, fields[8] .FieldType);
			if (fields[9] .FieldType.IsSerializable)
			_ssCountryId = (long) info.GetValue(fields[9] .Name, fields[9] .FieldType);
			if (fields[10] .FieldType.IsSerializable)
			_ssAddressTypeId = (long) info.GetValue(fields[10] .Name, fields[10] .FieldType);
			if (fields[11] .FieldType.IsSerializable)
			_ssActive = (bool) info.GetValue(fields[11] .Name, fields[11] .FieldType);
			if (fields[12] .FieldType.IsSerializable)
			_ssCreatedDate = (DateTime) info.GetValue(fields[12] .Name, fields[12] .FieldType);
			if (fields[13] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[13] .Name, fields[13] .FieldType);
			if (fields[14] .FieldType.IsSerializable)
			_ssLastUpdatedDate = (DateTime) info.GetValue(fields[14] .Name, fields[14] .FieldType);
			if (fields[15] .FieldType.IsSerializable)
			_ssLastUpdatedBy = (int) info.GetValue(fields[15] .Name, fields[15] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENAddressEntityRecord Duplicate() {
			ENAddressEntityRecord t;
			t._ssId = this._ssId;
			t._ssAddressLine1 = this._ssAddressLine1;
			t._ssAddressLine2 = this._ssAddressLine2;
			t._ssAddressLine3 = this._ssAddressLine3;
			t._ssAddressLine4 = this._ssAddressLine4;
			t._ssAddressLine5 = this._ssAddressLine5;
			t._ssCity = this._ssCity;
			t._ssCounty = this._ssCounty;
			t._ssPostcode = this._ssPostcode;
			t._ssCountryId = this._ssCountryId;
			t._ssAddressTypeId = this._ssAddressTypeId;
			t._ssActive = this._ssActive;
			t._ssCreatedDate = this._ssCreatedDate;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssLastUpdatedDate = this._ssLastUpdatedDate;
			t._ssLastUpdatedBy = this._ssLastUpdatedBy;
			t.ChangedAttributes = new BitArray(16);
			t.OptimizedAttributes = new BitArray(16);
			for (int i = 0; i < 16; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.LongInteger); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AddressLine1")) VarValue.AppendAttribute(recordElem, "AddressLine1", ssAddressLine1, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "AddressLine1");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AddressLine2")) VarValue.AppendAttribute(recordElem, "AddressLine2", ssAddressLine2, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "AddressLine2");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AddressLine3")) VarValue.AppendAttribute(recordElem, "AddressLine3", ssAddressLine3, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "AddressLine3");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AddressLine4")) VarValue.AppendAttribute(recordElem, "AddressLine4", ssAddressLine4, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "AddressLine4");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AddressLine5")) VarValue.AppendAttribute(recordElem, "AddressLine5", ssAddressLine5, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "AddressLine5");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".City")) VarValue.AppendAttribute(recordElem, "City", ssCity, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "City");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".County")) VarValue.AppendAttribute(recordElem, "County", ssCounty, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "County");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Postcode")) VarValue.AppendAttribute(recordElem, "Postcode", ssPostcode, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Postcode");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CountryId")) VarValue.AppendAttribute(recordElem, "CountryId", ssCountryId, detailLevel, TypeKind.EntityReferenceLongInteger); else VarValue.AppendOptimizedAttribute(recordElem, "CountryId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AddressTypeId")) VarValue.AppendAttribute(recordElem, "AddressTypeId", ssAddressTypeId, detailLevel, TypeKind.EntityReferenceLongInteger); else VarValue.AppendOptimizedAttribute(recordElem, "AddressTypeId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Active")) VarValue.AppendAttribute(recordElem, "Active", ssActive, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Active");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedDate")) VarValue.AppendAttribute(recordElem, "CreatedDate", ssCreatedDate, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedDate")) VarValue.AppendAttribute(recordElem, "LastUpdatedDate", ssLastUpdatedDate, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedBy")) VarValue.AppendAttribute(recordElem, "LastUpdatedBy", ssLastUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedBy");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "addressline1") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AddressLine1")) variable.Value = ssAddressLine1; else variable.Optimized = true;
			} else if (head == "addressline2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AddressLine2")) variable.Value = ssAddressLine2; else variable.Optimized = true;
			} else if (head == "addressline3") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AddressLine3")) variable.Value = ssAddressLine3; else variable.Optimized = true;
			} else if (head == "addressline4") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AddressLine4")) variable.Value = ssAddressLine4; else variable.Optimized = true;
			} else if (head == "addressline5") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AddressLine5")) variable.Value = ssAddressLine5; else variable.Optimized = true;
			} else if (head == "city") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".City")) variable.Value = ssCity; else variable.Optimized = true;
			} else if (head == "county") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".County")) variable.Value = ssCounty; else variable.Optimized = true;
			} else if (head == "postcode") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Postcode")) variable.Value = ssPostcode; else variable.Optimized = true;
			} else if (head == "countryid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CountryId")) variable.Value = ssCountryId; else variable.Optimized = true;
			} else if (head == "addresstypeid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AddressTypeId")) variable.Value = ssAddressTypeId; else variable.Optimized = true;
			} else if (head == "active") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Active")) variable.Value = ssActive; else variable.Optimized = true;
			} else if (head == "createddate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedDate")) variable.Value = ssCreatedDate; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "lastupdateddate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedDate")) variable.Value = ssLastUpdatedDate; else variable.Optimized = true;
			} else if (head == "lastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedBy")) variable.Value = ssLastUpdatedBy; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdAddressLine1)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdAddressLine2)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdAddressLine3)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdAddressLine4)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdAddressLine5)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdCity)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdCounty)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdPostcode)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdCountryId)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdAddressTypeId)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdActive)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdCreatedDate)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[13];
			} else if (key.Equals(IdLastUpdatedDate)) {
				return ChangedAttributes[14];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return ChangedAttributes[15];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdAddressLine1)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdAddressLine2)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdAddressLine3)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdAddressLine4)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdAddressLine5)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdCity)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdCounty)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdPostcode)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdCountryId)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdAddressTypeId)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdActive)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdCreatedDate)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[13];
			} else if (key.Equals(IdLastUpdatedDate)) {
				return OptimizedAttributes[14];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return OptimizedAttributes[15];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdAddressLine1) {
				return ssAddressLine1;
			} else if (key == IdAddressLine2) {
				return ssAddressLine2;
			} else if (key == IdAddressLine3) {
				return ssAddressLine3;
			} else if (key == IdAddressLine4) {
				return ssAddressLine4;
			} else if (key == IdAddressLine5) {
				return ssAddressLine5;
			} else if (key == IdCity) {
				return ssCity;
			} else if (key == IdCounty) {
				return ssCounty;
			} else if (key == IdPostcode) {
				return ssPostcode;
			} else if (key == IdCountryId) {
				return ssCountryId;
			} else if (key == IdAddressTypeId) {
				return ssAddressTypeId;
			} else if (key == IdActive) {
				return ssActive;
			} else if (key == IdCreatedDate) {
				return ssCreatedDate;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdLastUpdatedDate) {
				return ssLastUpdatedDate;
			} else if (key == IdLastUpdatedBy) {
				return ssLastUpdatedBy;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(16);
			OptimizedAttributes = new BitArray(16);
			if (other == null) return;
			ssId = (long) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssAddressLine1 = (string) other.AttributeGet(IdAddressLine1);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdAddressLine1);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdAddressLine1);
			ssAddressLine2 = (string) other.AttributeGet(IdAddressLine2);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdAddressLine2);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdAddressLine2);
			ssAddressLine3 = (string) other.AttributeGet(IdAddressLine3);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdAddressLine3);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdAddressLine3);
			ssAddressLine4 = (string) other.AttributeGet(IdAddressLine4);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdAddressLine4);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdAddressLine4);
			ssAddressLine5 = (string) other.AttributeGet(IdAddressLine5);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdAddressLine5);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdAddressLine5);
			ssCity = (string) other.AttributeGet(IdCity);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdCity);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdCity);
			ssCounty = (string) other.AttributeGet(IdCounty);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdCounty);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdCounty);
			ssPostcode = (string) other.AttributeGet(IdPostcode);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdPostcode);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdPostcode);
			ssCountryId = (long) other.AttributeGet(IdCountryId);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdCountryId);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdCountryId);
			ssAddressTypeId = (long) other.AttributeGet(IdAddressTypeId);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdAddressTypeId);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdAddressTypeId);
			ssActive = (bool) other.AttributeGet(IdActive);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdActive);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdActive);
			ssCreatedDate = (DateTime) other.AttributeGet(IdCreatedDate);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdCreatedDate);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdCreatedDate);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdCreatedBy);
			ssLastUpdatedDate = (DateTime) other.AttributeGet(IdLastUpdatedDate);
			ChangedAttributes[14] = other.ChangedAttributeGet(IdLastUpdatedDate);
			OptimizedAttributes[14] = other.OptimizedAttributeGet(IdLastUpdatedDate);
			ssLastUpdatedBy = (int) other.AttributeGet(IdLastUpdatedBy);
			ChangedAttributes[15] = other.ChangedAttributeGet(IdLastUpdatedBy);
			OptimizedAttributes[15] = other.OptimizedAttributeGet(IdLastUpdatedBy);
		}
	} // ENAddressEntityRecord
	/// <summary>
	/// Structure <code>RCAddressRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCAddressRecord: ISerializable, ITypedRecord<RCAddressRecord> {
		private static readonly GlobalObjectKey IdAddress = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*24CcwKG4cxPqXOxza9KzEA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Address")]
		public ENAddressEntityRecord ssENAddress;


		public static implicit operator ENAddressEntityRecord(RCAddressRecord r) {
			return r.ssENAddress;
		}

		public static implicit operator RCAddressRecord(ENAddressEntityRecord r) {
			RCAddressRecord res = new RCAddressRecord(null);
			res.ssENAddress = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENAddress.ChangedAttributes = value;
			}
			get {
				return ssENAddress.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCAddressRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENAddress = new ENAddressEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(16, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENAddress.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENAddress.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENAddress.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENAddress.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCAddressRecord r) {
			this = r;
		}


		public static bool operator == (RCAddressRecord a, RCAddressRecord b) {
			if (a.ssENAddress != b.ssENAddress) return false;
			return true;
		}

		public static bool operator != (RCAddressRecord a, RCAddressRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCAddressRecord)) return false;
			return (this == (RCAddressRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENAddress.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCAddressRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENAddress = new ENAddressEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENAddress = (ENAddressEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENAddress.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENAddress.InternalRecursiveSave();
		}


		public RCAddressRecord Duplicate() {
			RCAddressRecord t;
			t.ssENAddress = (ENAddressEntityRecord) this.ssENAddress.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENAddress.ToXml(this, recordElem, "Address", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "address") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Address")) variable.Value = ssENAddress; else variable.Optimized = true;
				variable.SetFieldName("address");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENAddress.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENAddress.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAddress) {
				return ssENAddress;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENAddress.FillFromOther((IRecord) other.AttributeGet(IdAddress));
		}
	} // RCAddressRecord
	/// <summary>
	/// RecordList type <code>RLAddressRecordList</code> that represents a record list of
	///  <code>Address</code>
	/// </summary>
	[Serializable()]
	public partial class RLAddressRecordList: GenericRecordList<RCAddressRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCAddressRecord GetElementDefaultValue() {
			return new RCAddressRecord("");
		}

		public T[] ToArray<T>(Func<RCAddressRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAddressRecordList recordlist, Func<RCAddressRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}

		public static RLAddressRecordList ToList<T>(T[] array, Func <T, RCAddressRecord> converter) {
			RLAddressRecordList result = new RLAddressRecordList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLAddressRecordList FromRestList<T>(RestList<T> restList, Func <T, RCAddressRecord> converter) {
			RLAddressRecordList result = new RLAddressRecordList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAddressRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAddressRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAddressRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAddressRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(16, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCAddressRecord> NewList() {
			return new RLAddressRecordList();
		}


	} // RLAddressRecordList

	/// <summary>
	/// RecordList type <code>RLAddressList</code> that represents a record list of <code>Address</code>
	/// </summary>
	[Serializable()]
	public partial class RLAddressList: GenericRecordList<ENAddressEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENAddressEntityRecord GetElementDefaultValue() {
			return new ENAddressEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENAddressEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAddressList recordlist, Func<ENAddressEntityRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}

		public static RLAddressList ToList<T>(T[] array, Func <T, ENAddressEntityRecord> converter) {
			RLAddressList result = new RLAddressList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLAddressList FromRestList<T>(RestList<T> restList, Func <T, ENAddressEntityRecord> converter) {
			RLAddressList result = new RLAddressList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAddressList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAddressList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAddressList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAddressList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENAddressEntityRecord> NewList() {
			return new RLAddressList();
		}


	} // RLAddressList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateAddress
		/// </summary>

		public static void CreateAddress(HeContext heContext, RCAddressRecord inParamSource, out long outParamId) {
			outParamId = 0L;

			ENAddressEntityRecord ssENAddress = inParamSource;
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string insertSql =
				 "SET NOCOUNT ON; INSERT INTO " + ENAddressEntity.LocalViewName(null, null) + " (" +
				 " [ADDRESSLINE1]" +
				 ", [ADDRESSLINE2]" +
				 ", [ADDRESSLINE3]" +
				 ", [ADDRESSLINE4]" +
				 ", [ADDRESSLINE5]" +
				 ", [CITY]" +
				 ", [COUNTY]" +
				 ", [POSTCODE]" +
				 ", [COUNTRYID]" +
				 ", [ADDRESSTYPEID]" +
				 ", [ACTIVE]" +
				 ", [CREATEDDATE]" +
				 ", [CREATEDBY]" +
				 ", [LASTUPDATEDDATE]" +
				 ", [LASTUPDATEDBY]" +
				 " ) VALUES (" +
				 " @ssAddressLine1" +
				 ", @ssAddressLine2" +
				 ", @ssAddressLine3" +
				 ", @ssAddressLine4" +
				 ", @ssAddressLine5" +
				 ", @ssCity" +
				 ", @ssCounty" +
				 ", @ssPostcode" +
				 ", @ssCountryId" +
				 ", @ssAddressTypeId" +
				 ", @ssActive" +
				 ", @ssCreatedDate" +
				 ", @ssCreatedBy" +
				 ", @ssLastUpdatedDate" +
				 ", @ssLastUpdatedBy" +
				 " ) ; SELECT SCOPE_IDENTITY();";
				Command insertSqlCmd = trans.CreateCommand(insertSql);
				insertSqlCmd.CreateParameter("@ssAddressLine1", DbType.String, ssENAddress.ssAddressLine1);
				insertSqlCmd.CreateParameter("@ssAddressLine2", DbType.String, ssENAddress.ssAddressLine2);
				insertSqlCmd.CreateParameter("@ssAddressLine3", DbType.String, ssENAddress.ssAddressLine3);
				insertSqlCmd.CreateParameter("@ssAddressLine4", DbType.String, ssENAddress.ssAddressLine4);
				insertSqlCmd.CreateParameter("@ssAddressLine5", DbType.String, ssENAddress.ssAddressLine5);
				insertSqlCmd.CreateParameter("@ssCity", DbType.String, ssENAddress.ssCity);
				insertSqlCmd.CreateParameter("@ssCounty", DbType.String, ssENAddress.ssCounty);
				insertSqlCmd.CreateParameter("@ssPostcode", DbType.String, ssENAddress.ssPostcode);
				if ((ssENAddress.ssCountryId==0L)) {
					insertSqlCmd.CreateParameter("@ssCountryId", DBNull.Value);
				} else {
					insertSqlCmd.CreateParameter("@ssCountryId", DbType.Int64, ssENAddress.ssCountryId);
				}
				if ((ssENAddress.ssAddressTypeId==0L)) {
					insertSqlCmd.CreateParameter("@ssAddressTypeId", DBNull.Value);
				} else {
					insertSqlCmd.CreateParameter("@ssAddressTypeId", DbType.Int64, ssENAddress.ssAddressTypeId);
				}
				insertSqlCmd.CreateParameter("@ssActive", DbType.Boolean, ssENAddress.ssActive);
				insertSqlCmd.CreateParameter("@ssCreatedDate", DbType.DateTime, ssENAddress.ssCreatedDate);
				insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENAddress.ssCreatedBy);
				insertSqlCmd.CreateParameter("@ssLastUpdatedDate", DbType.DateTime, ssENAddress.ssLastUpdatedDate);
				insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENAddress.ssLastUpdatedBy);
				outParamId = (long) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateAddress", true), typeof(long));
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateAddress
		/// </summary>

		public static void CreateOrUpdateAddress(HeContext heContext, BitArray usedFields, RCAddressRecord inParamSource, out long outParamId) {
			outParamId = 0L;

			ENAddressEntityRecord ssENAddress = inParamSource;
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				if (usedFields == null) {
					usedFields = new BitArray(16, true);
				}
				string updateSet = "SET NOCOUNT OFF; UPDATE " + ENAddressEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
				string parameters = "";
				parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDRESSLINE1] = @ssAddressLine1"): parameters);
				parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDRESSLINE2] = @ssAddressLine2"): parameters);
				parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDRESSLINE3] = @ssAddressLine3"): parameters);
				parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDRESSLINE4] = @ssAddressLine4"): parameters);
				parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDRESSLINE5] = @ssAddressLine5"): parameters);
				parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CITY] = @ssCity"): parameters);
				parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COUNTY] = @ssCounty"): parameters);
				parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[POSTCODE] = @ssPostcode"): parameters);
				parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COUNTRYID] = @ssCountryId"): parameters);
				parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDRESSTYPEID] = @ssAddressTypeId"): parameters);
				parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACTIVE] = @ssActive"): parameters);
				parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDDATE] = @ssCreatedDate"): parameters);
				parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
				parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDDATE] = @ssLastUpdatedDate"): parameters);
				parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDBY] = @ssLastUpdatedBy"): parameters);
				string whereCondition = " WHERE [ID] = @ssENAddressssId";
				string sql = updateSet + parameters + whereCondition;
				Command sqlCmd = trans.CreateCommand(sql);
				int counter = 0;
				if (usedFields[1]) {
					sqlCmd.CreateParameter("@ssAddressLine1", DbType.String, ssENAddress.ssAddressLine1);
					counter++;
				}
				if (usedFields[2]) {
					sqlCmd.CreateParameter("@ssAddressLine2", DbType.String, ssENAddress.ssAddressLine2);
					counter++;
				}
				if (usedFields[3]) {
					sqlCmd.CreateParameter("@ssAddressLine3", DbType.String, ssENAddress.ssAddressLine3);
					counter++;
				}
				if (usedFields[4]) {
					sqlCmd.CreateParameter("@ssAddressLine4", DbType.String, ssENAddress.ssAddressLine4);
					counter++;
				}
				if (usedFields[5]) {
					sqlCmd.CreateParameter("@ssAddressLine5", DbType.String, ssENAddress.ssAddressLine5);
					counter++;
				}
				if (usedFields[6]) {
					sqlCmd.CreateParameter("@ssCity", DbType.String, ssENAddress.ssCity);
					counter++;
				}
				if (usedFields[7]) {
					sqlCmd.CreateParameter("@ssCounty", DbType.String, ssENAddress.ssCounty);
					counter++;
				}
				if (usedFields[8]) {
					sqlCmd.CreateParameter("@ssPostcode", DbType.String, ssENAddress.ssPostcode);
					counter++;
				}
				if (usedFields[9]) {
					if ((ssENAddress.ssCountryId==0L)) {
						sqlCmd.CreateParameter("@ssCountryId", DBNull.Value);
					} else {
						sqlCmd.CreateParameter("@ssCountryId", DbType.Int64, ssENAddress.ssCountryId);
					}
					counter++;
				}
				if (usedFields[10]) {
					if ((ssENAddress.ssAddressTypeId==0L)) {
						sqlCmd.CreateParameter("@ssAddressTypeId", DBNull.Value);
					} else {
						sqlCmd.CreateParameter("@ssAddressTypeId", DbType.Int64, ssENAddress.ssAddressTypeId);
					}
					counter++;
				}
				if (usedFields[11]) {
					sqlCmd.CreateParameter("@ssActive", DbType.Boolean, ssENAddress.ssActive);
					counter++;
				}
				if (usedFields[12]) {
					sqlCmd.CreateParameter("@ssCreatedDate", DbType.DateTime, ssENAddress.ssCreatedDate);
					counter++;
				}
				if (usedFields[13]) {
					sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENAddress.ssCreatedBy);
					counter++;
				}
				if (usedFields[14]) {
					sqlCmd.CreateParameter("@ssLastUpdatedDate", DbType.DateTime, ssENAddress.ssLastUpdatedDate);
					counter++;
				}
				if (usedFields[15]) {
					sqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENAddress.ssLastUpdatedBy);
					counter++;
				}
				if (counter == 0) {
					string dummyUpdate = "[ACTIVE] = [ACTIVE]";
					string noUpdate = updateSet + dummyUpdate + whereCondition;
					sqlCmd = trans.CreateCommand(noUpdate);
				}
				sqlCmd.CreateParameter("@ssENAddressssId", DbType.Int64, ssENAddress.ssId);
				counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateAddress (update)", true);
				if (counter == 0) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENAddressEntity.LocalViewName(null, null) + " (" +
					 " [ADDRESSLINE1]" +
					 ", [ADDRESSLINE2]" +
					 ", [ADDRESSLINE3]" +
					 ", [ADDRESSLINE4]" +
					 ", [ADDRESSLINE5]" +
					 ", [CITY]" +
					 ", [COUNTY]" +
					 ", [POSTCODE]" +
					 ", [COUNTRYID]" +
					 ", [ADDRESSTYPEID]" +
					 ", [ACTIVE]" +
					 ", [CREATEDDATE]" +
					 ", [CREATEDBY]" +
					 ", [LASTUPDATEDDATE]" +
					 ", [LASTUPDATEDBY]" +
					 " ) VALUES (" +
					 " @ssAddressLine1" +
					 ", @ssAddressLine2" +
					 ", @ssAddressLine3" +
					 ", @ssAddressLine4" +
					 ", @ssAddressLine5" +
					 ", @ssCity" +
					 ", @ssCounty" +
					 ", @ssPostcode" +
					 ", @ssCountryId" +
					 ", @ssAddressTypeId" +
					 ", @ssActive" +
					 ", @ssCreatedDate" +
					 ", @ssCreatedBy" +
					 ", @ssLastUpdatedDate" +
					 ", @ssLastUpdatedBy" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssAddressLine1", DbType.String, ssENAddress.ssAddressLine1);
					insertSqlCmd.CreateParameter("@ssAddressLine2", DbType.String, ssENAddress.ssAddressLine2);
					insertSqlCmd.CreateParameter("@ssAddressLine3", DbType.String, ssENAddress.ssAddressLine3);
					insertSqlCmd.CreateParameter("@ssAddressLine4", DbType.String, ssENAddress.ssAddressLine4);
					insertSqlCmd.CreateParameter("@ssAddressLine5", DbType.String, ssENAddress.ssAddressLine5);
					insertSqlCmd.CreateParameter("@ssCity", DbType.String, ssENAddress.ssCity);
					insertSqlCmd.CreateParameter("@ssCounty", DbType.String, ssENAddress.ssCounty);
					insertSqlCmd.CreateParameter("@ssPostcode", DbType.String, ssENAddress.ssPostcode);
					if ((ssENAddress.ssCountryId==0L)) {
						insertSqlCmd.CreateParameter("@ssCountryId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssCountryId", DbType.Int64, ssENAddress.ssCountryId);
					}
					if ((ssENAddress.ssAddressTypeId==0L)) {
						insertSqlCmd.CreateParameter("@ssAddressTypeId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssAddressTypeId", DbType.Int64, ssENAddress.ssAddressTypeId);
					}
					insertSqlCmd.CreateParameter("@ssActive", DbType.Boolean, ssENAddress.ssActive);
					insertSqlCmd.CreateParameter("@ssCreatedDate", DbType.DateTime, ssENAddress.ssCreatedDate);
					insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENAddress.ssCreatedBy);
					insertSqlCmd.CreateParameter("@ssLastUpdatedDate", DbType.DateTime, ssENAddress.ssLastUpdatedDate);
					insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENAddress.ssLastUpdatedBy);
					outParamId = (long) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateAddress", true), typeof(long));
				} else {
					outParamId = ssENAddress.ssId;
				}
			}
		}

		/// <summary>
		/// Action: DeleteAddress
		/// </summary>

		public static void DeleteAddress(HeContext heContext, long inParamId) {
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string sql =
				 "DELETE " +
				 "FROM " + ENAddressEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
				 "WHERE [ID] = @inParamId";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@inParamId", DbType.Int64, inParamId);
				sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteAddress", true);
			}
		}

		/// <summary>
		/// Action: GetAddress
		/// </summary>

		public static void GetAddress(HeContext heContext, long inParamId, out RCAddressRecord outParamRecord) {
			outParamRecord = new RCAddressRecord(null);

			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string sql =
				 "SELECT " +
				 " [ID]" +
				 ", [ADDRESSLINE1]" +
				 ", [ADDRESSLINE2]" +
				 ", [ADDRESSLINE3]" +
				 ", [ADDRESSLINE4]" +
				 ", [ADDRESSLINE5]" +
				 ", [CITY]" +
				 ", [COUNTY]" +
				 ", [POSTCODE]" +
				 ", [COUNTRYID]" +
				 ", [ADDRESSTYPEID]" +
				 ", [ACTIVE]" +
				 ", [CREATEDDATE]" +
				 ", [CREATEDBY]" +
				 ", [LASTUPDATEDDATE]" +
				 ", [LASTUPDATEDBY]" +
				 " FROM " + ENAddressEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
				 "WHERE [ID] = @inParamId";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@inParamId", DbType.Int64, inParamId);
				using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetAddress", true, false, false)) {
					if (reader.Read()) {
						outParamRecord.ReadDB(reader);
						outParamRecord.AllOptimizedAttributes = new BitArray[] {
							new BitArray(16, false)
						};
					} else
					throw new DataBaseException(ENAddressEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
				}
			}
		}

		/// <summary>
		/// Action: GetAddressForUpdate
		/// </summary>

		public static void GetAddressForUpdate(HeContext heContext, long inParamId, out RCAddressRecord outParamRecord) {
			outParamRecord = new RCAddressRecord(null);

			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string sql =
				 "SELECT " +
				 " [ID]" +
				 ", [ADDRESSLINE1]" +
				 ", [ADDRESSLINE2]" +
				 ", [ADDRESSLINE3]" +
				 ", [ADDRESSLINE4]" +
				 ", [ADDRESSLINE5]" +
				 ", [CITY]" +
				 ", [COUNTY]" +
				 ", [POSTCODE]" +
				 ", [COUNTRYID]" +
				 ", [ADDRESSTYPEID]" +
				 ", [ACTIVE]" +
				 ", [CREATEDDATE]" +
				 ", [CREATEDBY]" +
				 ", [LASTUPDATEDDATE]" +
				 ", [LASTUPDATEDBY]" +
				 "FROM " + ENAddressEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
				 "WHERE [ID] = @inParamId ";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@inParamId", DbType.Int64, inParamId);
				using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetAddressForUpdate", true, false, false)) {
					if (reader.Read()) {
						outParamRecord.ReadDB(reader);
						outParamRecord.AllOptimizedAttributes = new BitArray[] {
							new BitArray(16, false)
						};
					} else
					throw new DataBaseException(ENAddressEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
				}
			}
		}

		/// <summary>
		/// Action: UpdateAddress
		/// </summary>

		public static void UpdateAddress(HeContext heContext, BitArray usedFields, RCAddressRecord inParamSource) {
			ENAddressEntityRecord ssENAddress = inParamSource;
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				if (usedFields == null) {
					usedFields = new BitArray(16, true);
				}
				string updateSet = "SET NOCOUNT OFF; UPDATE " + ENAddressEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
				string parameters = "";
				parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDRESSLINE1] = @ssAddressLine1"): parameters);
				parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDRESSLINE2] = @ssAddressLine2"): parameters);
				parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDRESSLINE3] = @ssAddressLine3"): parameters);
				parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDRESSLINE4] = @ssAddressLine4"): parameters);
				parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDRESSLINE5] = @ssAddressLine5"): parameters);
				parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CITY] = @ssCity"): parameters);
				parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COUNTY] = @ssCounty"): parameters);
				parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[POSTCODE] = @ssPostcode"): parameters);
				parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[COUNTRYID] = @ssCountryId"): parameters);
				parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ADDRESSTYPEID] = @ssAddressTypeId"): parameters);
				parameters = (usedFields[11] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACTIVE] = @ssActive"): parameters);
				parameters = (usedFields[12] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDDATE] = @ssCreatedDate"): parameters);
				parameters = (usedFields[13] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
				parameters = (usedFields[14] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDDATE] = @ssLastUpdatedDate"): parameters);
				parameters = (usedFields[15] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDBY] = @ssLastUpdatedBy"): parameters);
				string whereCondition = " WHERE [ID] = @ssENAddressssId";
				string sql = updateSet + parameters + whereCondition;
				Command sqlCmd = trans.CreateCommand(sql);
				int counter = 0;
				if (usedFields[1]) {
					sqlCmd.CreateParameter("@ssAddressLine1", DbType.String, ssENAddress.ssAddressLine1);
					counter++;
				}
				if (usedFields[2]) {
					sqlCmd.CreateParameter("@ssAddressLine2", DbType.String, ssENAddress.ssAddressLine2);
					counter++;
				}
				if (usedFields[3]) {
					sqlCmd.CreateParameter("@ssAddressLine3", DbType.String, ssENAddress.ssAddressLine3);
					counter++;
				}
				if (usedFields[4]) {
					sqlCmd.CreateParameter("@ssAddressLine4", DbType.String, ssENAddress.ssAddressLine4);
					counter++;
				}
				if (usedFields[5]) {
					sqlCmd.CreateParameter("@ssAddressLine5", DbType.String, ssENAddress.ssAddressLine5);
					counter++;
				}
				if (usedFields[6]) {
					sqlCmd.CreateParameter("@ssCity", DbType.String, ssENAddress.ssCity);
					counter++;
				}
				if (usedFields[7]) {
					sqlCmd.CreateParameter("@ssCounty", DbType.String, ssENAddress.ssCounty);
					counter++;
				}
				if (usedFields[8]) {
					sqlCmd.CreateParameter("@ssPostcode", DbType.String, ssENAddress.ssPostcode);
					counter++;
				}
				if (usedFields[9]) {
					if ((ssENAddress.ssCountryId==0L)) {
						sqlCmd.CreateParameter("@ssCountryId", DBNull.Value);
					} else {
						sqlCmd.CreateParameter("@ssCountryId", DbType.Int64, ssENAddress.ssCountryId);
					}
					counter++;
				}
				if (usedFields[10]) {
					if ((ssENAddress.ssAddressTypeId==0L)) {
						sqlCmd.CreateParameter("@ssAddressTypeId", DBNull.Value);
					} else {
						sqlCmd.CreateParameter("@ssAddressTypeId", DbType.Int64, ssENAddress.ssAddressTypeId);
					}
					counter++;
				}
				if (usedFields[11]) {
					sqlCmd.CreateParameter("@ssActive", DbType.Boolean, ssENAddress.ssActive);
					counter++;
				}
				if (usedFields[12]) {
					sqlCmd.CreateParameter("@ssCreatedDate", DbType.DateTime, ssENAddress.ssCreatedDate);
					counter++;
				}
				if (usedFields[13]) {
					sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENAddress.ssCreatedBy);
					counter++;
				}
				if (usedFields[14]) {
					sqlCmd.CreateParameter("@ssLastUpdatedDate", DbType.DateTime, ssENAddress.ssLastUpdatedDate);
					counter++;
				}
				if (usedFields[15]) {
					sqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENAddress.ssLastUpdatedBy);
					counter++;
				}
				if (counter == 0) {
					string dummyUpdate = "[ACTIVE] = [ACTIVE]";
					string noUpdate = updateSet + dummyUpdate + whereCondition;
					sqlCmd = trans.CreateCommand(noUpdate);
				}
				sqlCmd.CreateParameter("@ssENAddressssId", DbType.Int64, ssENAddress.ssId);
				if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateAddress", true) <= 0)
				throw new DataBaseException(ENAddressEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENAddress.ssId + " was not updated");
			}
		}

	}
}

namespace ssAddress_CS {
	[XmlType("Address")]
	public class WORCAddressRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public long varWSId;

		[System.Xml.Serialization.XmlElement("AddressLine1")]
		public string varWSAddressLine1;

		[System.Xml.Serialization.XmlElement("AddressLine2")]
		public string varWSAddressLine2;

		[System.Xml.Serialization.XmlElement("AddressLine3")]
		public string varWSAddressLine3;

		[System.Xml.Serialization.XmlElement("AddressLine4")]
		public string varWSAddressLine4;

		[System.Xml.Serialization.XmlElement("AddressLine5")]
		public string varWSAddressLine5;

		[System.Xml.Serialization.XmlElement("City")]
		public string varWSCity;

		[System.Xml.Serialization.XmlElement("County")]
		public string varWSCounty;

		[System.Xml.Serialization.XmlElement("Postcode")]
		public string varWSPostcode;

		[System.Xml.Serialization.XmlElement("CountryId")]
		public long varWSCountryId;

		[System.Xml.Serialization.XmlElement("AddressTypeId")]
		public long varWSAddressTypeId;

		[System.Xml.Serialization.XmlElement("Active")]
		public bool varWSActive;

		[System.Xml.Serialization.XmlElement("CreatedDate")]
		public DateTime varWSCreatedDate;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("LastUpdatedDate")]
		public DateTime varWSLastUpdatedDate;

		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		public int varWSLastUpdatedBy;

		public WORCAddressRecord() {
			varWSId = (long) 0L;
			varWSAddressLine1 = (string) "";
			varWSAddressLine2 = (string) "";
			varWSAddressLine3 = (string) "";
			varWSAddressLine4 = (string) "";
			varWSAddressLine5 = (string) "";
			varWSCity = (string) "";
			varWSCounty = (string) "";
			varWSPostcode = (string) "";
			varWSCountryId = (long) 0L;
			varWSAddressTypeId = (long) 0L;
			varWSActive = (bool) true;
			varWSCreatedDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCreatedBy = (int) 0;
			varWSLastUpdatedDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSLastUpdatedBy = (int) 0;
		}

		public WORCAddressRecord(ENAddressEntityRecord r) {
			varWSId = (long) r.ssId;
			varWSAddressLine1 = BaseAppUtils.RemoveControlChars(r.ssAddressLine1);
			varWSAddressLine2 = BaseAppUtils.RemoveControlChars(r.ssAddressLine2);
			varWSAddressLine3 = BaseAppUtils.RemoveControlChars(r.ssAddressLine3);
			varWSAddressLine4 = BaseAppUtils.RemoveControlChars(r.ssAddressLine4);
			varWSAddressLine5 = BaseAppUtils.RemoveControlChars(r.ssAddressLine5);
			varWSCity = BaseAppUtils.RemoveControlChars(r.ssCity);
			varWSCounty = BaseAppUtils.RemoveControlChars(r.ssCounty);
			varWSPostcode = BaseAppUtils.RemoveControlChars(r.ssPostcode);
			varWSCountryId = (long) r.ssCountryId;
			varWSAddressTypeId = (long) r.ssAddressTypeId;
			varWSActive = (bool) r.ssActive;
			varWSCreatedDate = (DateTime) r.ssCreatedDate;
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSLastUpdatedDate = (DateTime) r.ssLastUpdatedDate;
			varWSLastUpdatedBy = (int) r.ssLastUpdatedBy;
		}

		public static RLAddressList ToRecordList(WORCAddressRecord[] array) {
			RLAddressList rl = new RLAddressList();
			if (array != null) {
				foreach(WORCAddressRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCAddressRecord[] FromRecordList(RLAddressList rl) {
			WORCAddressRecord[] array = new WORCAddressRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssAddress_CS {
	partial struct RCAddressRecord {
		public static implicit operator WORCAddressRecord(RCAddressRecord r) {
			return new WORCAddressRecord(r.ssENAddress);
		}

		public static implicit operator RCAddressRecord(WORCAddressRecord w) {
			RCAddressRecord r = new RCAddressRecord("");
			if (w != null) {
				r.ssENAddress = w;
			}
			return r;
		}

	}

	partial struct ENAddressEntityRecord {
		public static implicit operator WORCAddressRecord(ENAddressEntityRecord r) {
			return new WORCAddressRecord(r);
		}

		public static implicit operator ENAddressEntityRecord(WORCAddressRecord w) {
			ENAddressEntityRecord r = new ENAddressEntityRecord("");
			if (w != null) {
				r.ssId = (long) w.varWSId;
				r.ssAddressLine1 = ((string) w.varWSAddressLine1 ?? "");
				r.ssAddressLine2 = ((string) w.varWSAddressLine2 ?? "");
				r.ssAddressLine3 = ((string) w.varWSAddressLine3 ?? "");
				r.ssAddressLine4 = ((string) w.varWSAddressLine4 ?? "");
				r.ssAddressLine5 = ((string) w.varWSAddressLine5 ?? "");
				r.ssCity = ((string) w.varWSCity ?? "");
				r.ssCounty = ((string) w.varWSCounty ?? "");
				r.ssPostcode = ((string) w.varWSPostcode ?? "");
				r.ssCountryId = (long) w.varWSCountryId;
				r.ssAddressTypeId = (long) w.varWSAddressTypeId;
				r.ssActive = (bool) w.varWSActive;
				r.ssCreatedDate = (DateTime) w.varWSCreatedDate;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssLastUpdatedDate = (DateTime) w.varWSLastUpdatedDate;
				r.ssLastUpdatedBy = (int) w.varWSLastUpdatedBy;
			}
			return r;
		}

	}
}


namespace ssAddress_CS {
	[Serializable()]
	public partial class WORLAddressRecordList {
		public WORCAddressRecord[] Array;


		public WORLAddressRecordList(WORCAddressRecord[] r) {
			if (r == null)
			Array = new WORCAddressRecord[0];
			else
			Array = r;
		}
		public WORLAddressRecordList() {
			Array = new WORCAddressRecord[0];
		}

		public WORLAddressRecordList(RLAddressRecordList rl) {
			rl=(RLAddressRecordList) rl.Duplicate();
			Array = new WORCAddressRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCAddressRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssAddress_CS {
	partial class RLAddressRecordList {
		public static implicit operator RLAddressRecordList(WORCAddressRecord[] array) {
			RLAddressRecordList rl = new RLAddressRecordList();
			if (array != null) {
				foreach(WORCAddressRecord val in array) {
					rl.Append((RCAddressRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAddressRecord[](RLAddressRecordList rl) {
			WORCAddressRecord[] array = new WORCAddressRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCAddressRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssAddress_CS {
	partial class WORLAddressRecordList {
		public static implicit operator RLAddressRecordList(WORLAddressRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLAddressRecordList(RLAddressRecordList rl) {
			return new WORLAddressRecordList(rl);
		}
		public static implicit operator WORCAddressRecord[](WORLAddressRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAddressRecordList(WORCAddressRecord[] array) {
			return new WORLAddressRecordList(array);
		}
	}
}

