/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;

namespace ssAddress_CS {

	public sealed partial class ENAddressTypeEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase(391), "OSUSR_fx0_AddressType");
		}
		public static System.Collections.Generic.Dictionary<string, string> AttributesToDatabaseNamesMap() {
			return new System.Collections.Generic.Dictionary<string, string>() {
				{ "id", "Id"
				}
				, { "label", "Label"
				}
				, { "order", "Order"
				}
				, { "active", "Active"
				}
				, { "createddate", "CreatedDate"
				}
				, { "createdby", "CreatedBy"
				}
				, { "lastupdateddate", "LastUpdatedDate"
				}
				, { "lastupdatedby", "LastUpdatedBy"
				}
			};
		}
	} // ENAddressTypeEntity

	/// <summary>
	/// Entity <code>ENAddressTypeEntityRecord</code> that represents the Service Studio entity
	///  <code>AddressType</code> <p> Description: List of various address types, for example: Invoic
	/// e address, statement address, delivery address, etc.</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("AddressType", "4Mq+Y8Ogz0ijgylaJ7wVkQ", "XNcOB2dV_Uyr7HxSWwrycw", 0, "OSUSR_fx0_AddressType", null)]
	[Serializable()]
	public partial struct ENAddressTypeEntityRecord: ISerializable, ITypedRecord<ENAddressTypeEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*P6C+FoiwC0Wd8vOGRQzdGw");
		private static readonly GlobalObjectKey IdLabel = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*HGyWgFUQhEax7q4TNNO55Q");
		private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*m3h4I+QjR0uSWmSkDTzLWA");
		private static readonly GlobalObjectKey IdActive = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*DRSKwqq7C0CymlcnHZXnqg");
		private static readonly GlobalObjectKey IdCreatedDate = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*sXimO6Q1h0iNZHn_Kx67Ww");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*hNDz3Vto7kajNJWGQsWMbg");
		private static readonly GlobalObjectKey IdLastUpdatedDate = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*CEQfQSLG3kCREWsy__n7Dw");
		private static readonly GlobalObjectKey IdLastUpdatedBy = GlobalObjectKey.Parse("XNcOB2dV_Uyr7HxSWwrycw*6atPnis5Wk2rgcDQZ9iRmg");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false, true)]
		[System.Xml.Serialization.XmlElement("Id")]
		private long _ssId;
		public long ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(8, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LABEL", 50, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("Label")]
		private string _ssLabel;
		public string ssLabel {
			get {
				return _ssLabel;
			}
			set {
				if ((_ssLabel!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssLabel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Order")]
		private int _ssOrder;
		public int ssOrder {
			get {
				return _ssOrder;
			}
			set {
				if ((_ssOrder!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssOrder = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ACTIVE", 0, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("Active")]
		private bool _ssActive;
		public bool ssActive {
			get {
				return _ssActive;
			}
			set {
				if ((_ssActive!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssActive = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDDATE", 0, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("CreatedDate")]
		private DateTime _ssCreatedDate;
		public DateTime ssCreatedDate {
			get {
				return _ssCreatedDate;
			}
			set {
				if ((_ssCreatedDate!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssCreatedDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true, true)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDDATE", 0, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("LastUpdatedDate")]
		private DateTime _ssLastUpdatedDate;
		public DateTime ssLastUpdatedDate {
			get {
				return _ssLastUpdatedDate;
			}
			set {
				if ((_ssLastUpdatedDate!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssLastUpdatedDate = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LASTUPDATEDBY", 0, false, false, true, false)]
		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		private int _ssLastUpdatedBy;
		public int ssLastUpdatedBy {
			get {
				return _ssLastUpdatedBy;
			}
			set {
				if ((_ssLastUpdatedBy!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssLastUpdatedBy = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENAddressTypeEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(8, true);
			OptimizedAttributes = new BitArray(8, false);
			_ssId = 0L;
			_ssLabel = "";
			_ssOrder = 0;
			_ssActive = true;
			_ssCreatedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssLastUpdatedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLastUpdatedBy = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadLongInteger(index++, "AddressType.Id", 0L);
			ssLabel = r.ReadText(index++, "AddressType.Label", "");
			ssOrder = r.ReadInteger(index++, "AddressType.Order", 0);
			ssActive = r.ReadBoolean(index++, "AddressType.Active", false);
			ssCreatedDate = r.ReadDateTime(index++, "AddressType.CreatedDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCreatedBy = r.ReadEntityReference(index++, "AddressType.CreatedBy", 0);
			ssLastUpdatedDate = r.ReadDateTime(index++, "AddressType.LastUpdatedDate", new DateTime(1900, 1, 1, 0, 0, 0));
			ssLastUpdatedBy = r.ReadEntityReference(index++, "AddressType.LastUpdatedBy", 0);
			ChangedAttributes = new BitArray(8, false);
			OptimizedAttributes = new BitArray(8, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENAddressTypeEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENAddressTypeEntityRecord a, ENAddressTypeEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssLabel != b.ssLabel) return false;
			if (a.ssOrder != b.ssOrder) return false;
			if (a.ssActive != b.ssActive) return false;
			if (a.ssCreatedDate != b.ssCreatedDate) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssLastUpdatedDate != b.ssLastUpdatedDate) return false;
			if (a.ssLastUpdatedBy != b.ssLastUpdatedBy) return false;
			return true;
		}

		public static bool operator != (ENAddressTypeEntityRecord a, ENAddressTypeEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENAddressTypeEntityRecord)) return false;
			return (this == (ENAddressTypeEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssLabel.GetHashCode()
				^ ssOrder.GetHashCode()
				^ ssActive.GetHashCode()
				^ ssCreatedDate.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssLastUpdatedDate.GetHashCode()
				^ ssLastUpdatedBy.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENAddressTypeEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(8, true);
			OptimizedAttributes = new BitArray(8, false);
			_ssId = 0L;
			_ssLabel = "";
			_ssOrder = 0;
			_ssActive = true;
			_ssCreatedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssCreatedBy = 0;
			_ssLastUpdatedDate = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLastUpdatedBy = 0;
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			_ssId = (long) info.GetValue(fields[0] .Name, fields[0] .FieldType);
			if (fields[1] .FieldType.IsSerializable)
			_ssLabel = (string) info.GetValue(fields[1] .Name, fields[1] .FieldType);
			if (fields[2] .FieldType.IsSerializable)
			_ssOrder = (int) info.GetValue(fields[2] .Name, fields[2] .FieldType);
			if (fields[3] .FieldType.IsSerializable)
			_ssActive = (bool) info.GetValue(fields[3] .Name, fields[3] .FieldType);
			if (fields[4] .FieldType.IsSerializable)
			_ssCreatedDate = (DateTime) info.GetValue(fields[4] .Name, fields[4] .FieldType);
			if (fields[5] .FieldType.IsSerializable)
			_ssCreatedBy = (int) info.GetValue(fields[5] .Name, fields[5] .FieldType);
			if (fields[6] .FieldType.IsSerializable)
			_ssLastUpdatedDate = (DateTime) info.GetValue(fields[6] .Name, fields[6] .FieldType);
			if (fields[7] .FieldType.IsSerializable)
			_ssLastUpdatedBy = (int) info.GetValue(fields[7] .Name, fields[7] .FieldType);
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENAddressTypeEntityRecord Duplicate() {
			ENAddressTypeEntityRecord t;
			t._ssId = this._ssId;
			t._ssLabel = this._ssLabel;
			t._ssOrder = this._ssOrder;
			t._ssActive = this._ssActive;
			t._ssCreatedDate = this._ssCreatedDate;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssLastUpdatedDate = this._ssLastUpdatedDate;
			t._ssLastUpdatedBy = this._ssLastUpdatedBy;
			t.ChangedAttributes = new BitArray(8);
			t.OptimizedAttributes = new BitArray(8);
			for (int i = 0; i < 8; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.LongInteger); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label")) VarValue.AppendAttribute(recordElem, "Label", ssLabel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Active")) VarValue.AppendAttribute(recordElem, "Active", ssActive, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Active");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedDate")) VarValue.AppendAttribute(recordElem, "CreatedDate", ssCreatedDate, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedDate")) VarValue.AppendAttribute(recordElem, "LastUpdatedDate", ssLastUpdatedDate, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedDate");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LastUpdatedBy")) VarValue.AppendAttribute(recordElem, "LastUpdatedBy", ssLastUpdatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "LastUpdatedBy");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "label") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Label")) variable.Value = ssLabel; else variable.Optimized = true;
			} else if (head == "order") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
			} else if (head == "active") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Active")) variable.Value = ssActive; else variable.Optimized = true;
			} else if (head == "createddate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedDate")) variable.Value = ssCreatedDate; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "lastupdateddate") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedDate")) variable.Value = ssLastUpdatedDate; else variable.Optimized = true;
			} else if (head == "lastupdatedby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LastUpdatedBy")) variable.Value = ssLastUpdatedBy; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdLabel)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdOrder)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdActive)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdCreatedDate)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdLastUpdatedDate)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return ChangedAttributes[7];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdLabel)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdOrder)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdActive)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdCreatedDate)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdLastUpdatedDate)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdLastUpdatedBy)) {
				return OptimizedAttributes[7];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdLabel) {
				return ssLabel;
			} else if (key == IdOrder) {
				return ssOrder;
			} else if (key == IdActive) {
				return ssActive;
			} else if (key == IdCreatedDate) {
				return ssCreatedDate;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdLastUpdatedDate) {
				return ssLastUpdatedDate;
			} else if (key == IdLastUpdatedBy) {
				return ssLastUpdatedBy;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(8);
			OptimizedAttributes = new BitArray(8);
			if (other == null) return;
			ssId = (long) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssLabel = (string) other.AttributeGet(IdLabel);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdLabel);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdLabel);
			ssOrder = (int) other.AttributeGet(IdOrder);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdOrder);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdOrder);
			ssActive = (bool) other.AttributeGet(IdActive);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdActive);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdActive);
			ssCreatedDate = (DateTime) other.AttributeGet(IdCreatedDate);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdCreatedDate);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdCreatedDate);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdCreatedBy);
			ssLastUpdatedDate = (DateTime) other.AttributeGet(IdLastUpdatedDate);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdLastUpdatedDate);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdLastUpdatedDate);
			ssLastUpdatedBy = (int) other.AttributeGet(IdLastUpdatedBy);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdLastUpdatedBy);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdLastUpdatedBy);
		}
	} // ENAddressTypeEntityRecord
	/// <summary>
	/// Structure <code>RCAddressTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCAddressTypeRecord: ISerializable, ITypedRecord<RCAddressTypeRecord> {
		private static readonly GlobalObjectKey IdAddressType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*wijkUMH_FDjAArI9D6v6fw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("AddressType")]
		public ENAddressTypeEntityRecord ssENAddressType;


		public static implicit operator ENAddressTypeEntityRecord(RCAddressTypeRecord r) {
			return r.ssENAddressType;
		}

		public static implicit operator RCAddressTypeRecord(ENAddressTypeEntityRecord r) {
			RCAddressTypeRecord res = new RCAddressTypeRecord(null);
			res.ssENAddressType = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENAddressType.ChangedAttributes = value;
			}
			get {
				return ssENAddressType.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCAddressTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENAddressType = new ENAddressTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(8, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENAddressType.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENAddressType.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENAddressType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENAddressType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCAddressTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCAddressTypeRecord a, RCAddressTypeRecord b) {
			if (a.ssENAddressType != b.ssENAddressType) return false;
			return true;
		}

		public static bool operator != (RCAddressTypeRecord a, RCAddressTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCAddressTypeRecord)) return false;
			return (this == (RCAddressTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENAddressType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCAddressTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENAddressType = new ENAddressTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fields[0] .FieldType.IsSerializable)
			ssENAddressType = (ENAddressTypeEntityRecord) info.GetValue(fields[0] .Name, fields[0] .FieldType);
		}

		public void RecursiveReset() {
			ssENAddressType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENAddressType.InternalRecursiveSave();
		}


		public RCAddressTypeRecord Duplicate() {
			RCAddressTypeRecord t;
			t.ssENAddressType = (ENAddressTypeEntityRecord) this.ssENAddressType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENAddressType.ToXml(this, recordElem, "AddressType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "addresstype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AddressType")) variable.Value = ssENAddressType; else variable.Optimized = true;
				variable.SetFieldName("addresstype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENAddressType.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENAddressType.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAddressType) {
				return ssENAddressType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENAddressType.FillFromOther((IRecord) other.AttributeGet(IdAddressType));
		}
	} // RCAddressTypeRecord
	/// <summary>
	/// RecordList type <code>RLAddressTypeRecordList</code> that represents a record list of
	///  <code>AddressType</code>
	/// </summary>
	[Serializable()]
	public partial class RLAddressTypeRecordList: GenericRecordList<RCAddressTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCAddressTypeRecord GetElementDefaultValue() {
			return new RCAddressTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCAddressTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAddressTypeRecordList recordlist, Func<RCAddressTypeRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}

		public static RLAddressTypeRecordList ToList<T>(T[] array, Func <T, RCAddressTypeRecord> converter) {
			RLAddressTypeRecordList result = new RLAddressTypeRecordList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLAddressTypeRecordList FromRestList<T>(RestList<T> restList, Func <T, RCAddressTypeRecord> converter) {
			RLAddressTypeRecordList result = new RLAddressTypeRecordList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAddressTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAddressTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAddressTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAddressTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(8, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCAddressTypeRecord> NewList() {
			return new RLAddressTypeRecordList();
		}


	} // RLAddressTypeRecordList

	/// <summary>
	/// RecordList type <code>RLAddressTypeList</code> that represents a record list of
	///  <code>AddressType</code>
	/// </summary>
	[Serializable()]
	public partial class RLAddressTypeList: GenericRecordList<ENAddressTypeEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENAddressTypeEntityRecord GetElementDefaultValue() {
			return new ENAddressTypeEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENAddressTypeEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAddressTypeList recordlist, Func<ENAddressTypeEntityRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}

		public static RLAddressTypeList ToList<T>(T[] array, Func <T, ENAddressTypeEntityRecord> converter) {
			RLAddressTypeList result = new RLAddressTypeList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLAddressTypeList FromRestList<T>(RestList<T> restList, Func <T, ENAddressTypeEntityRecord> converter) {
			RLAddressTypeList result = new RLAddressTypeList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAddressTypeList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAddressTypeList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAddressTypeList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAddressTypeList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENAddressTypeEntityRecord> NewList() {
			return new RLAddressTypeList();
		}


	} // RLAddressTypeList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateAddressType
		/// </summary>

		public static void CreateAddressType(HeContext heContext, RCAddressTypeRecord inParamSource, out long outParamId) {
			outParamId = 0L;

			ENAddressTypeEntityRecord ssENAddressType = inParamSource;
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string insertSql =
				 "SET NOCOUNT ON; INSERT INTO " + ENAddressTypeEntity.LocalViewName(null, null) + " (" +
				 " [LABEL]" +
				 ", [ORDER]" +
				 ", [ACTIVE]" +
				 ", [CREATEDDATE]" +
				 ", [CREATEDBY]" +
				 ", [LASTUPDATEDDATE]" +
				 ", [LASTUPDATEDBY]" +
				 " ) VALUES (" +
				 " @ssLabel" +
				 ", @ssOrder" +
				 ", @ssActive" +
				 ", @ssCreatedDate" +
				 ", @ssCreatedBy" +
				 ", @ssLastUpdatedDate" +
				 ", @ssLastUpdatedBy" +
				 " ) ; SELECT SCOPE_IDENTITY();";
				Command insertSqlCmd = trans.CreateCommand(insertSql);
				insertSqlCmd.CreateParameter("@ssLabel", DbType.String, ssENAddressType.ssLabel);
				insertSqlCmd.CreateParameter("@ssOrder", DbType.Int32, ssENAddressType.ssOrder);
				insertSqlCmd.CreateParameter("@ssActive", DbType.Boolean, ssENAddressType.ssActive);
				insertSqlCmd.CreateParameter("@ssCreatedDate", DbType.DateTime, ssENAddressType.ssCreatedDate);
				insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENAddressType.ssCreatedBy);
				insertSqlCmd.CreateParameter("@ssLastUpdatedDate", DbType.DateTime, ssENAddressType.ssLastUpdatedDate);
				if ((ssENAddressType.ssLastUpdatedBy==0)) {
					insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
				} else {
					insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENAddressType.ssLastUpdatedBy);
				}
				outParamId = (long) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateAddressType", true), typeof(long));
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateAddressType
		/// </summary>

		public static void CreateOrUpdateAddressType(HeContext heContext, BitArray usedFields, RCAddressTypeRecord inParamSource, out long outParamId) {
			outParamId = 0L;

			ENAddressTypeEntityRecord ssENAddressType = inParamSource;
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				if (usedFields == null) {
					usedFields = new BitArray(8, true);
				}
				string updateSet = "SET NOCOUNT OFF; UPDATE " + ENAddressTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
				string parameters = "";
				parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LABEL] = @ssLabel"): parameters);
				parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ORDER] = @ssOrder"): parameters);
				parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACTIVE] = @ssActive"): parameters);
				parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDDATE] = @ssCreatedDate"): parameters);
				parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
				parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDDATE] = @ssLastUpdatedDate"): parameters);
				parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDBY] = @ssLastUpdatedBy"): parameters);
				string whereCondition = " WHERE [ID] = @ssENAddressTypessId";
				string sql = updateSet + parameters + whereCondition;
				Command sqlCmd = trans.CreateCommand(sql);
				int counter = 0;
				if (usedFields[1]) {
					sqlCmd.CreateParameter("@ssLabel", DbType.String, ssENAddressType.ssLabel);
					counter++;
				}
				if (usedFields[2]) {
					sqlCmd.CreateParameter("@ssOrder", DbType.Int32, ssENAddressType.ssOrder);
					counter++;
				}
				if (usedFields[3]) {
					sqlCmd.CreateParameter("@ssActive", DbType.Boolean, ssENAddressType.ssActive);
					counter++;
				}
				if (usedFields[4]) {
					sqlCmd.CreateParameter("@ssCreatedDate", DbType.DateTime, ssENAddressType.ssCreatedDate);
					counter++;
				}
				if (usedFields[5]) {
					sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENAddressType.ssCreatedBy);
					counter++;
				}
				if (usedFields[6]) {
					sqlCmd.CreateParameter("@ssLastUpdatedDate", DbType.DateTime, ssENAddressType.ssLastUpdatedDate);
					counter++;
				}
				if (usedFields[7]) {
					if ((ssENAddressType.ssLastUpdatedBy==0)) {
						sqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
					} else {
						sqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENAddressType.ssLastUpdatedBy);
					}
					counter++;
				}
				if (counter == 0) {
					string dummyUpdate = "[ACTIVE] = [ACTIVE]";
					string noUpdate = updateSet + dummyUpdate + whereCondition;
					sqlCmd = trans.CreateCommand(noUpdate);
				}
				sqlCmd.CreateParameter("@ssENAddressTypessId", DbType.Int64, ssENAddressType.ssId);
				counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateAddressType (update)", true);
				if (counter == 0) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENAddressTypeEntity.LocalViewName(null, null) + " (" +
					 " [LABEL]" +
					 ", [ORDER]" +
					 ", [ACTIVE]" +
					 ", [CREATEDDATE]" +
					 ", [CREATEDBY]" +
					 ", [LASTUPDATEDDATE]" +
					 ", [LASTUPDATEDBY]" +
					 " ) VALUES (" +
					 " @ssLabel" +
					 ", @ssOrder" +
					 ", @ssActive" +
					 ", @ssCreatedDate" +
					 ", @ssCreatedBy" +
					 ", @ssLastUpdatedDate" +
					 ", @ssLastUpdatedBy" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssLabel", DbType.String, ssENAddressType.ssLabel);
					insertSqlCmd.CreateParameter("@ssOrder", DbType.Int32, ssENAddressType.ssOrder);
					insertSqlCmd.CreateParameter("@ssActive", DbType.Boolean, ssENAddressType.ssActive);
					insertSqlCmd.CreateParameter("@ssCreatedDate", DbType.DateTime, ssENAddressType.ssCreatedDate);
					insertSqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENAddressType.ssCreatedBy);
					insertSqlCmd.CreateParameter("@ssLastUpdatedDate", DbType.DateTime, ssENAddressType.ssLastUpdatedDate);
					if ((ssENAddressType.ssLastUpdatedBy==0)) {
						insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENAddressType.ssLastUpdatedBy);
					}
					outParamId = (long) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateAddressType", true), typeof(long));
				} else {
					outParamId = ssENAddressType.ssId;
				}
			}
		}

		/// <summary>
		/// Action: DeleteAddressType
		/// </summary>

		public static void DeleteAddressType(HeContext heContext, long inParamId) {
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string sql =
				 "DELETE " +
				 "FROM " + ENAddressTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
				 "WHERE [ID] = @inParamId";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@inParamId", DbType.Int64, inParamId);
				sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteAddressType", true);
			}
		}

		/// <summary>
		/// Action: GetAddressType
		/// </summary>

		public static void GetAddressType(HeContext heContext, long inParamId, out RCAddressTypeRecord outParamRecord) {
			outParamRecord = new RCAddressTypeRecord(null);

			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string sql =
				 "SELECT " +
				 " [ID]" +
				 ", [LABEL]" +
				 ", [ORDER]" +
				 ", [ACTIVE]" +
				 ", [CREATEDDATE]" +
				 ", [CREATEDBY]" +
				 ", [LASTUPDATEDDATE]" +
				 ", [LASTUPDATEDBY]" +
				 " FROM " + ENAddressTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
				 "WHERE [ID] = @inParamId";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@inParamId", DbType.Int64, inParamId);
				using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetAddressType", true, false, false)) {
					if (reader.Read()) {
						outParamRecord.ReadDB(reader);
						outParamRecord.AllOptimizedAttributes = new BitArray[] {
							new BitArray(8, false)
						};
					} else
					throw new DataBaseException(ENAddressTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
				}
			}
		}

		/// <summary>
		/// Action: GetAddressTypeForUpdate
		/// </summary>

		public static void GetAddressTypeForUpdate(HeContext heContext, long inParamId, out RCAddressTypeRecord outParamRecord) {
			outParamRecord = new RCAddressTypeRecord(null);

			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string sql =
				 "SELECT " +
				 " [ID]" +
				 ", [LABEL]" +
				 ", [ORDER]" +
				 ", [ACTIVE]" +
				 ", [CREATEDDATE]" +
				 ", [CREATEDBY]" +
				 ", [LASTUPDATEDDATE]" +
				 ", [LASTUPDATEDBY]" +
				 "FROM " + ENAddressTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
				 "WHERE [ID] = @inParamId ";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@inParamId", DbType.Int64, inParamId);
				using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetAddressTypeForUpdate", true, false, false)) {
					if (reader.Read()) {
						outParamRecord.ReadDB(reader);
						outParamRecord.AllOptimizedAttributes = new BitArray[] {
							new BitArray(8, false)
						};
					} else
					throw new DataBaseException(ENAddressTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
				}
			}
		}

		/// <summary>
		/// Action: UpdateAddressType
		/// </summary>

		public static void UpdateAddressType(HeContext heContext, BitArray usedFields, RCAddressTypeRecord inParamSource) {
			ENAddressTypeEntityRecord ssENAddressType = inParamSource;
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				if (usedFields == null) {
					usedFields = new BitArray(8, true);
				}
				string updateSet = "SET NOCOUNT OFF; UPDATE " + ENAddressTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
				string parameters = "";
				parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LABEL] = @ssLabel"): parameters);
				parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ORDER] = @ssOrder"): parameters);
				parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[ACTIVE] = @ssActive"): parameters);
				parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDDATE] = @ssCreatedDate"): parameters);
				parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATEDBY] = @ssCreatedBy"): parameters);
				parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDDATE] = @ssLastUpdatedDate"): parameters);
				parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LASTUPDATEDBY] = @ssLastUpdatedBy"): parameters);
				string whereCondition = " WHERE [ID] = @ssENAddressTypessId";
				string sql = updateSet + parameters + whereCondition;
				Command sqlCmd = trans.CreateCommand(sql);
				int counter = 0;
				if (usedFields[1]) {
					sqlCmd.CreateParameter("@ssLabel", DbType.String, ssENAddressType.ssLabel);
					counter++;
				}
				if (usedFields[2]) {
					sqlCmd.CreateParameter("@ssOrder", DbType.Int32, ssENAddressType.ssOrder);
					counter++;
				}
				if (usedFields[3]) {
					sqlCmd.CreateParameter("@ssActive", DbType.Boolean, ssENAddressType.ssActive);
					counter++;
				}
				if (usedFields[4]) {
					sqlCmd.CreateParameter("@ssCreatedDate", DbType.DateTime, ssENAddressType.ssCreatedDate);
					counter++;
				}
				if (usedFields[5]) {
					sqlCmd.CreateParameter("@ssCreatedBy", DbType.Int32, ssENAddressType.ssCreatedBy);
					counter++;
				}
				if (usedFields[6]) {
					sqlCmd.CreateParameter("@ssLastUpdatedDate", DbType.DateTime, ssENAddressType.ssLastUpdatedDate);
					counter++;
				}
				if (usedFields[7]) {
					if ((ssENAddressType.ssLastUpdatedBy==0)) {
						sqlCmd.CreateParameter("@ssLastUpdatedBy", DBNull.Value);
					} else {
						sqlCmd.CreateParameter("@ssLastUpdatedBy", DbType.Int32, ssENAddressType.ssLastUpdatedBy);
					}
					counter++;
				}
				if (counter == 0) {
					string dummyUpdate = "[ACTIVE] = [ACTIVE]";
					string noUpdate = updateSet + dummyUpdate + whereCondition;
					sqlCmd = trans.CreateCommand(noUpdate);
				}
				sqlCmd.CreateParameter("@ssENAddressTypessId", DbType.Int64, ssENAddressType.ssId);
				if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateAddressType", true) <= 0)
				throw new DataBaseException(ENAddressTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENAddressType.ssId + " was not updated");
			}
		}

	}
}

namespace ssAddress_CS {
	[XmlType("AddressType")]
	public class WORCAddressTypeRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public long varWSId;

		[System.Xml.Serialization.XmlElement("Label")]
		public string varWSLabel;

		[System.Xml.Serialization.XmlElement("Order")]
		public int varWSOrder;

		[System.Xml.Serialization.XmlElement("Active")]
		public bool varWSActive;

		[System.Xml.Serialization.XmlElement("CreatedDate")]
		public DateTime varWSCreatedDate;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("LastUpdatedDate")]
		public DateTime varWSLastUpdatedDate;

		[System.Xml.Serialization.XmlElement("LastUpdatedBy")]
		public int varWSLastUpdatedBy;

		public WORCAddressTypeRecord() {
			varWSId = (long) 0L;
			varWSLabel = (string) "";
			varWSOrder = (int) 0;
			varWSActive = (bool) true;
			varWSCreatedDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCreatedBy = (int) 0;
			varWSLastUpdatedDate = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSLastUpdatedBy = (int) 0;
		}

		public WORCAddressTypeRecord(ENAddressTypeEntityRecord r) {
			varWSId = (long) r.ssId;
			varWSLabel = BaseAppUtils.RemoveControlChars(r.ssLabel);
			varWSOrder = (int) r.ssOrder;
			varWSActive = (bool) r.ssActive;
			varWSCreatedDate = (DateTime) r.ssCreatedDate;
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSLastUpdatedDate = (DateTime) r.ssLastUpdatedDate;
			varWSLastUpdatedBy = (int) r.ssLastUpdatedBy;
		}

		public static RLAddressTypeList ToRecordList(WORCAddressTypeRecord[] array) {
			RLAddressTypeList rl = new RLAddressTypeList();
			if (array != null) {
				foreach(WORCAddressTypeRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCAddressTypeRecord[] FromRecordList(RLAddressTypeList rl) {
			WORCAddressTypeRecord[] array = new WORCAddressTypeRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssAddress_CS {
	partial struct RCAddressTypeRecord {
		public static implicit operator WORCAddressTypeRecord(RCAddressTypeRecord r) {
			return new WORCAddressTypeRecord(r.ssENAddressType);
		}

		public static implicit operator RCAddressTypeRecord(WORCAddressTypeRecord w) {
			RCAddressTypeRecord r = new RCAddressTypeRecord("");
			if (w != null) {
				r.ssENAddressType = w;
			}
			return r;
		}

	}

	partial struct ENAddressTypeEntityRecord {
		public static implicit operator WORCAddressTypeRecord(ENAddressTypeEntityRecord r) {
			return new WORCAddressTypeRecord(r);
		}

		public static implicit operator ENAddressTypeEntityRecord(WORCAddressTypeRecord w) {
			ENAddressTypeEntityRecord r = new ENAddressTypeEntityRecord("");
			if (w != null) {
				r.ssId = (long) w.varWSId;
				r.ssLabel = ((string) w.varWSLabel ?? "");
				r.ssOrder = (int) w.varWSOrder;
				r.ssActive = (bool) w.varWSActive;
				r.ssCreatedDate = (DateTime) w.varWSCreatedDate;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssLastUpdatedDate = (DateTime) w.varWSLastUpdatedDate;
				r.ssLastUpdatedBy = (int) w.varWSLastUpdatedBy;
			}
			return r;
		}

	}
}


namespace ssAddress_CS {
	[Serializable()]
	public partial class WORLAddressTypeRecordList {
		public WORCAddressTypeRecord[] Array;


		public WORLAddressTypeRecordList(WORCAddressTypeRecord[] r) {
			if (r == null)
			Array = new WORCAddressTypeRecord[0];
			else
			Array = r;
		}
		public WORLAddressTypeRecordList() {
			Array = new WORCAddressTypeRecord[0];
		}

		public WORLAddressTypeRecordList(RLAddressTypeRecordList rl) {
			rl=(RLAddressTypeRecordList) rl.Duplicate();
			Array = new WORCAddressTypeRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCAddressTypeRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssAddress_CS {
	partial class RLAddressTypeRecordList {
		public static implicit operator RLAddressTypeRecordList(WORCAddressTypeRecord[] array) {
			RLAddressTypeRecordList rl = new RLAddressTypeRecordList();
			if (array != null) {
				foreach(WORCAddressTypeRecord val in array) {
					rl.Append((RCAddressTypeRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAddressTypeRecord[](RLAddressTypeRecordList rl) {
			WORCAddressTypeRecord[] array = new WORCAddressTypeRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCAddressTypeRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssAddress_CS {
	partial class WORLAddressTypeRecordList {
		public static implicit operator RLAddressTypeRecordList(WORLAddressTypeRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLAddressTypeRecordList(RLAddressTypeRecordList rl) {
			return new WORLAddressTypeRecordList(rl);
		}
		public static implicit operator WORCAddressTypeRecord[](WORLAddressTypeRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAddressTypeRecordList(WORCAddressTypeRecord[] array) {
			return new WORLAddressTypeRecordList(array);
		}
	}
}

