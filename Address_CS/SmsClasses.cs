/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Runtime.Serialization;
using System.Web.UI;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.SMS;
using OutSystems.ObjectKeys;
using System.Web;
using System.Xml.Serialization;
using OutSystems.HubEdition.RuntimePlatform.Web;

namespace ssAddress_CS {
	[Serializable()]
	
	public abstract class SmsNode : ISerializable, IScreen, IVarsBag {

		protected string _key;
		protected string _expectedPatterns="";
		protected int _smsmaxlength=160;

		public string Key  {
			get {return _key;}
		}
		
		public string ExpectedPatterns {
			get {return _expectedPatterns;}
		}
		
		public MobileTerminatedMessage MTMsg = new MobileTerminatedMessage();
		protected string _Name;
		
		public abstract bool MatchTest(HeContext heContext);
		public abstract SmsNode Match (HeContext heContext);
		protected abstract void Render(HeContext heContext);
		
		protected virtual void LoadDefaultLargeAccount( HeContext heContext) {
			heContext.MTMsg = MTMsg;
			if (heContext.MOMsg != null) {
				MTMsg.LargeAccount = heContext.MOMsg.LargeAccount;
			}
		}
		
		public virtual SmsNode Execute (HeContext heContext) {
			try {
				heContext.AppInfo.CheckIsApplicationEnabled();
				LoadDefaultLargeAccount(heContext);
				CheckPermissions(heContext);
				Render(heContext);
				ScreenLog.StaticWrite(heContext.StartInstant, (int)((TimeSpan)(DateTime.Now-heContext.StartInstant)).TotalMilliseconds,  (_Name!=null)?_Name:"" , heContext.Session.SessionID, heContext.AppInfo.eSpaceId,  heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) (heContext.MOMsg != null ? heContext.MOMsg.MSISDN : ""), "SMS", "Screen", Environment.MachineName, 
                    RuntimePlatformUtils.GetViewstateSize(), 
                    RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				return this;
			}
			catch (Exception e) {
				return HandleException (heContext, e);
			}
		}

		protected void ReplyISms (HeContext heContext, string message) {
			SmsEncoder enc = new SmsEncoder(MTMsg.Encoding);
			int len = enc.GetCorrectMessageSize(message, _smsmaxlength);

			if (len != message.Length) {
				message = message.Remove(len, message.Length-len);
			}
			if (len > 160) {
				MTMsg.Pid = -1;
			} 
			MTMsg.MaximumParts = 1;
			MTMsg.Message = message;
			AppUtils.DoOnMobileTerminatedMessage( heContext, ref MTMsg );
			SMSInterface.QueueOutboundSMS(MTMsg);
			
		}

		protected void SendSms (HeContext heContext, string message) {
			SendSms (heContext, message, MTMsg.LargeAccount);
		}
		
		protected void SendSms (HeContext heContext, string message, string largeAccount) {
			SendSms (heContext, message, largeAccount, MTMsg.MSISDN, 1);
		}

		protected void SendSms (HeContext heContext, string message, string largeAccount, string msisdn) {
			SendSms (heContext, message, largeAccount, msisdn, 1);
		}
		
		protected void SendSms (HeContext heContext, string message, string largeAccount, string msisdn, int count) {
			SmsEncoder enc = new SmsEncoder(MTMsg.Encoding);
			int len = enc.GetCorrectMessageSize(message, _smsmaxlength);
			if (len != message.Length) {
				message = message.Remove(len, message.Length-len);
			}
			if (len > 160) {
				MTMsg.Pid = -1;
			}
			MTMsg.LargeAccount = largeAccount;
			MTMsg.MaximumParts = count;
			MTMsg.Message = message;
			MTMsg.MSISDN = msisdn;
			AppUtils.DoOnMobileTerminatedMessage( heContext, ref MTMsg );
            SMSInterface.QueueOutboundSMS(MTMsg);
		}

		protected abstract void CheckPermissions (HeContext heContext);

		public abstract SmsNode HandleException (HeContext heContext, Exception e);		

		protected bool TestExpression (string input, string expression, out Match regexMatch) {
			regexMatch = Regex.Match (input, expression, RegexOptions.IgnoreCase | RegexOptions.Singleline );
			return regexMatch.Success;
		}

		public SmsNode () {
			MobileOriginatedMessage mo = AppInfo.GetAppInfo().OsContext.MOMsg;
			if (mo != null) {
				MTMsg.Connection = mo.Connection;
				MTMsg.OperatorCode = mo.OperatorCode;
				MTMsg.MSISDN = mo.MSISDN;
				MTMsg.LargeAccount = mo.LargeAccount;
				MTMsg.OriginalMessageId = mo.MessageId;
				MTMsg.Custom1 = mo.Custom1;
				MTMsg.Custom2 = mo.Custom2;
				MTMsg.Custom3 = mo.Custom3;
			}
            var appInfo = AppInfo.GetAppInfo();

            MTMsg.TenantId = appInfo.Tenant.Id;
			MTMsg.TenantPath = appInfo.eSpaceName;
			MTMsg.eSpaceId = appInfo.eSpaceId;
			MTMsg.UserId = appInfo.OsContext.Session.UserId;
		}

		// TODO: Optimize this code. Each object should serialize itself, and avoid the
		// use of reflection.
        [System.Security.SecurityCritical]
		public SmsNode (SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++) {
				if (fields[i].FieldType.IsSerializable) {
					fields[i].SetValue(this, info.GetValue(fields[i].Name, fields[i].FieldType));
				}
			}				
		}

        [System.Security.SecurityCritical]
		public void GetObjectData (SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++) {
				if (fields[i].FieldType.IsSerializable) {
					info.AddValue (fields[i].Name, fields[i].GetValue(this));
				}
			}
		}

        #region IVarsBag Members

		protected VarsBag localVars = new VarsBag();

		public void EvaluateFields(VarValue variable, object parent, string baseName, string fields) {
			localVars.EvaluateFields(variable, parent, baseName, fields);
		}

		public object GetVariableValue(string varName) {
			return localVars.GetVariableValue(varName);
		}

		public bool HasVariable(string varName) {
			return localVars.HasVariable(varName);
		}

		public void ToXml(object parent, System.Xml.XmlElement baseElem, string fieldName, int detailLevel) {
			localVars.ToXml(parent, baseElem, fieldName, detailLevel);
		}

		public string[] VarNames {
			get { return localVars.VarNames; }
		}

		public void SetNewOrigin(object origin) {
			localVars.SetNewOrigin(origin);
		}

		public void InitVars(string[] varNames, string[] varRtNames) {
			localVars.InitVars(varNames, varRtNames);
			SetNewOrigin(this);
		}

		#endregion

        #region IScreen members
        public virtual Control FindControlByName(string name) {
            return null;
        }
        #endregion
	}

	public class DynamicSmsPattern {
		public ObjectKey Key;
		public string RawPattern;
		public string Pattern;
		public int[] GroupIndex; // takes zero-based group indexes
		public DynamicSmsPattern(ObjectKey key, string rawPattern, int groups) {
			Key = key;
			RawPattern = rawPattern;
			GroupIndex = new int[groups];
		}
	}

}
