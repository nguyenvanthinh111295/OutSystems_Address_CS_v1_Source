/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Linq;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;

using System.Text;
using System.Data;
using System.Collections.Generic;
using Newtonsoft.Json;
using OutSystems.RESTService;
using OutSystems.RESTService.Behaviors;
using OutSystems.RESTService.Controllers;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;


namespace ssAddress_CS.RestRecords {

	public class JSONRCCountryRecord: AbstractRESTStructure<RCCountryRecord> {
		[JsonProperty("Country")]
		public ssAddress_CS.RestRecords.JSONENCountryEntityRecord AttrCountry;

		public JSONRCCountryRecord() {}

		public JSONRCCountryRecord(RCCountryRecord s, IBehaviorsConfiguration config) {
			if (config.DefaultValuesBehavior == DefaultValuesBehavior.DontSend) {
				AttrCountry = ssAddress_CS.RestRecords.JSONENCountryEntityRecord.FromStructure(s.ssENCountry, config);
			} else {
				AttrCountry = ssAddress_CS.RestRecords.JSONENCountryEntityRecord.FromStructure(s.ssENCountry, config);
			}
		}

		public static Func<ssAddress_CS.RestRecords.JSONRCCountryRecord, RCCountryRecord> ToStructureDelegate(IBehaviorsConfiguration config) {
			return (ssAddress_CS.RestRecords.JSONRCCountryRecord s) => ToStructure(s, config);
		}
		public static RCCountryRecord ToStructure(ssAddress_CS.RestRecords.JSONRCCountryRecord obj, IBehaviorsConfiguration config) {
			RCCountryRecord s = new RCCountryRecord(null);
			if (obj != null) {
				s.ssENCountry = ssAddress_CS.RestRecords.JSONENCountryEntityRecord.ToStructure(obj.AttrCountry, config);
			}
			return s;
		}

		public static Func<RCCountryRecord, ssAddress_CS.RestRecords.JSONRCCountryRecord> FromStructureDelegate(IBehaviorsConfiguration config) {
			return (RCCountryRecord s) => FromStructure(s, config);
		}
		public static ssAddress_CS.RestRecords.JSONRCCountryRecord FromStructure(RCCountryRecord s, IBehaviorsConfiguration config) {
			return new ssAddress_CS.RestRecords.JSONRCCountryRecord(s, config);
		}

	}

	public class JSONRCAddressTypeRecord: AbstractRESTStructure<RCAddressTypeRecord> {
		[JsonProperty("AddressType")]
		public ssAddress_CS.RestRecords.JSONENAddressTypeEntityRecord AttrAddressType;

		public JSONRCAddressTypeRecord() {}

		public JSONRCAddressTypeRecord(RCAddressTypeRecord s, IBehaviorsConfiguration config) {
			if (config.DefaultValuesBehavior == DefaultValuesBehavior.DontSend) {
				AttrAddressType = ssAddress_CS.RestRecords.JSONENAddressTypeEntityRecord.FromStructure(s.ssENAddressType, config);
			} else {
				AttrAddressType = ssAddress_CS.RestRecords.JSONENAddressTypeEntityRecord.FromStructure(s.ssENAddressType, config);
			}
		}

		public static Func<ssAddress_CS.RestRecords.JSONRCAddressTypeRecord, RCAddressTypeRecord> ToStructureDelegate(IBehaviorsConfiguration config) {
			return (ssAddress_CS.RestRecords.JSONRCAddressTypeRecord s) => ToStructure(s, config);
		}
		public static RCAddressTypeRecord ToStructure(ssAddress_CS.RestRecords.JSONRCAddressTypeRecord obj, IBehaviorsConfiguration config) {
			RCAddressTypeRecord s = new RCAddressTypeRecord(null);
			if (obj != null) {
				s.ssENAddressType = ssAddress_CS.RestRecords.JSONENAddressTypeEntityRecord.ToStructure(obj.AttrAddressType, config);
			}
			return s;
		}

		public static Func<RCAddressTypeRecord, ssAddress_CS.RestRecords.JSONRCAddressTypeRecord> FromStructureDelegate(IBehaviorsConfiguration config) {
			return (RCAddressTypeRecord s) => FromStructure(s, config);
		}
		public static ssAddress_CS.RestRecords.JSONRCAddressTypeRecord FromStructure(RCAddressTypeRecord s, IBehaviorsConfiguration config) {
			return new ssAddress_CS.RestRecords.JSONRCAddressTypeRecord(s, config);
		}

	}

	public class JSONRCAddressRecord: AbstractRESTStructure<RCAddressRecord> {
		[JsonProperty("Address")]
		public ssAddress_CS.RestRecords.JSONENAddressEntityRecord AttrAddress;

		public JSONRCAddressRecord() {}

		public JSONRCAddressRecord(RCAddressRecord s, IBehaviorsConfiguration config) {
			if (config.DefaultValuesBehavior == DefaultValuesBehavior.DontSend) {
				AttrAddress = ssAddress_CS.RestRecords.JSONENAddressEntityRecord.FromStructure(s.ssENAddress, config);
			} else {
				AttrAddress = ssAddress_CS.RestRecords.JSONENAddressEntityRecord.FromStructure(s.ssENAddress, config);
			}
		}

		public static Func<ssAddress_CS.RestRecords.JSONRCAddressRecord, RCAddressRecord> ToStructureDelegate(IBehaviorsConfiguration config) {
			return (ssAddress_CS.RestRecords.JSONRCAddressRecord s) => ToStructure(s, config);
		}
		public static RCAddressRecord ToStructure(ssAddress_CS.RestRecords.JSONRCAddressRecord obj, IBehaviorsConfiguration config) {
			RCAddressRecord s = new RCAddressRecord(null);
			if (obj != null) {
				s.ssENAddress = ssAddress_CS.RestRecords.JSONENAddressEntityRecord.ToStructure(obj.AttrAddress, config);
			}
			return s;
		}

		public static Func<RCAddressRecord, ssAddress_CS.RestRecords.JSONRCAddressRecord> FromStructureDelegate(IBehaviorsConfiguration config) {
			return (RCAddressRecord s) => FromStructure(s, config);
		}
		public static ssAddress_CS.RestRecords.JSONRCAddressRecord FromStructure(RCAddressRecord s, IBehaviorsConfiguration config) {
			return new ssAddress_CS.RestRecords.JSONRCAddressRecord(s, config);
		}

	}

	public class JSONRCUserRecord: AbstractRESTStructure<RCUserRecord> {
		[JsonProperty("User")]
		public ssAddress_CS.RestRecords.JSONENUserEntityRecord AttrUser;

		public JSONRCUserRecord() {}

		public JSONRCUserRecord(RCUserRecord s, IBehaviorsConfiguration config) {
			if (config.DefaultValuesBehavior == DefaultValuesBehavior.DontSend) {
				AttrUser = ssAddress_CS.RestRecords.JSONENUserEntityRecord.FromStructure(s.ssENUser, config);
			} else {
				AttrUser = ssAddress_CS.RestRecords.JSONENUserEntityRecord.FromStructure(s.ssENUser, config);
			}
		}

		public static Func<ssAddress_CS.RestRecords.JSONRCUserRecord, RCUserRecord> ToStructureDelegate(IBehaviorsConfiguration config) {
			return (ssAddress_CS.RestRecords.JSONRCUserRecord s) => ToStructure(s, config);
		}
		public static RCUserRecord ToStructure(ssAddress_CS.RestRecords.JSONRCUserRecord obj, IBehaviorsConfiguration config) {
			RCUserRecord s = new RCUserRecord(null);
			if (obj != null) {
				s.ssENUser = ssAddress_CS.RestRecords.JSONENUserEntityRecord.ToStructure(obj.AttrUser, config);
			}
			return s;
		}

		public static Func<RCUserRecord, ssAddress_CS.RestRecords.JSONRCUserRecord> FromStructureDelegate(IBehaviorsConfiguration config) {
			return (RCUserRecord s) => FromStructure(s, config);
		}
		public static ssAddress_CS.RestRecords.JSONRCUserRecord FromStructure(RCUserRecord s, IBehaviorsConfiguration config) {
			return new ssAddress_CS.RestRecords.JSONRCUserRecord(s, config);
		}

	}



}