/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.SMS;
using System.Xml.Serialization;

namespace ssAddress_CS {
	public class iSmsHandler : System.Web.Services.WebService {
		public iSmsHandler() {
			//CODEGEN: This call is required by the ASP.NET Web Services Designer
			InitializeComponent();
		}

		#region Component Designer generated code

		//Required by the Web Services Designer 
		private IContainer components = null;

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
		}

		/// Clean up any resources being used.
		protected override void Dispose( bool disposing ) {
			if(disposing && components != null) {
				components.Dispose();
			}
			base.Dispose(disposing);		
		}
		
		#endregion

		[WebMethod(true)]
		public int SendSms (SmsNode node, string largeAccount, string msisdn) {
            OutSystems.ObjectKeys.ObjectKey nodeKey = OutSystems.ObjectKeys.ObjectKey.Parse(node.Key);
			if (HttpContext.Current == null) {
				GeneralLog log = new GeneralLog();
				log.Write( DateTime.Now, "", 0, 0, 0, "SendSms Called (Context is null)", GeneralLogType.WARNING.ToString(), "", "");
			} else if (HttpContext.Current.Session == null) {
				GeneralLog log = new GeneralLog();
				log.Write( DateTime.Now, "", 0, 0, 0, "SendSms Called (Session is null)", GeneralLogType.WARNING.ToString(), "", "");
			} else {
				HeContext context = Global.App.OsContext;
				if (!NetworkInterfaceUtils.IsLoopbackAddress(HttpContext.Current.Request.UserHostAddress)) {
                    ErrorLog.LogApplicationError("Access to iSmsHandler with invalid IP: " + HttpContext.Current.Request.UserHostAddress, 
						"The iSmsHandler can only be accessed by the 127.0.0.1 IP", context, "ExecuteTimer");
					return 0;
				}
				GeneralLog log = new GeneralLog();
				log.Write( DateTime.Now, context.Session.SessionID, context.AppInfo.eSpaceId,
					context.AppInfo.Tenant.Id, context.Session.UserId, 
					"SendSms Called, The node received has type " + node.GetType().ToString() + ", Large Account: " + largeAccount + " MSISDN: " + msisdn, 
					GeneralLogType.INFO.ToString(), "", "");
				node.MTMsg.LargeAccount = largeAccount;
				node.MTMsg.MSISDN = msisdn;
				context.Session["MSISDN"] = node.MTMsg.MSISDN;
				bool ok = false;
				try {
					node.Execute (context);
					ok = true;
				} finally {
					DatabaseAccess.FreeupResources(ok);
				}
			}
			return 1;
		}

		[WebMethod(true)]		
		public int SendInteractiveSms (SmsNode node, string largeAccount, string msisdn) {
			SmsHandler.setState (node);
			iSmsNotificationHandlerClient handler = new iSmsNotificationHandlerClient();
			handler.SetupInteractiveSmsHandling(largeAccount, msisdn, Global.App.Tenant.Id, node.ExpectedPatterns, Global.App.eSpaceId, Global.App.eSpaceName);
			return SendSms (node, largeAccount, msisdn);
		}
	}
}