/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssAddress_CS {

	public partial class Actions {
		public class lcvAddressType_GetOrCreateByLabel: VarsBag {
			public string inParamLabel;
			public RLAddressTypeRecordList queryResGetAddressTypesByLabel_outParamList = new RLAddressTypeRecordList();
			public long queryResGetAddressTypesByLabel_outParamCount = 0L;

			public long resCreateAddressType_outParamId = 0L;

			public lcvAddressType_GetOrCreateByLabel(string inParamLabel) {
				this.inParamLabel = inParamLabel;
			}
		}
		public class lcoAddressType_GetOrCreateByLabel: VarsBag {
			public long outParamAddressTypeId = 0L;

			public lcoAddressType_GetOrCreateByLabel() {
			}
		}
		/// <summary>
		/// Action <code>ActionAddressType_GetOrCreateByLabel</code> that represents the Service Studio user
		///  action <code>AddressType_GetOrCreateByLabel</code> <p> Description: Gets or creates the addres
		/// s type for that label.</p>
		/// </summary>
		public static void ActionAddressType_GetOrCreateByLabel(HeContext heContext, string inParamLabel, out long outParamAddressTypeId) {
			lcoAddressType_GetOrCreateByLabel result = new lcoAddressType_GetOrCreateByLabel();
			lcvAddressType_GetOrCreateByLabel localVars = new lcvAddressType_GetOrCreateByLabel(inParamLabel);
			try {
				// Query datasetGetAddressTypesByLabel
				int datasetGetAddressTypesByLabel_maxRecords = 0;
				localVars.queryResGetAddressTypesByLabel_outParamList = FuncActionAddressType_GetOrCreateByLabel.datasetGetAddressTypesByLabel(heContext, datasetGetAddressTypesByLabel_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetAddressTypesByLabel_outParamCount, localVars.inParamLabel
				);

				// exists?
				if (((!localVars.queryResGetAddressTypesByLabel_outParamList.Empty))) {
					// AddressTypeId = GetAddressTypesByLabel.List.Current.AddressType.Id
					result.outParamAddressTypeId = localVars.queryResGetAddressTypesByLabel_outParamList.CurrentRec.ssENAddressType.ssId;
				} else {
					// set AddressType
					// GetAddressTypesByLabel.List.Current.AddressType.Label = Label
					localVars.queryResGetAddressTypesByLabel_outParamList.CurrentRec.ssENAddressType.ssLabel = localVars.inParamLabel;
					// GetAddressTypesByLabel.List.Current.AddressType.Active = True
					localVars.queryResGetAddressTypesByLabel_outParamList.CurrentRec.ssENAddressType.ssActive = true;
					// GetAddressTypesByLabel.List.Current.AddressType.CreatedDate = CurrDateTime
					localVars.queryResGetAddressTypesByLabel_outParamList.CurrentRec.ssENAddressType.ssCreatedDate = BuiltInFunction.CurrDateTime();
					// GetAddressTypesByLabel.List.Current.AddressType.CreatedBy = GetUserId
					localVars.queryResGetAddressTypesByLabel_outParamList.CurrentRec.ssENAddressType.ssCreatedBy = BuiltInFunction.GetUserId();
					// GetAddressTypesByLabel.List.Current.AddressType.LastUpdatedDate = CurrDateTime
					localVars.queryResGetAddressTypesByLabel_outParamList.CurrentRec.ssENAddressType.ssLastUpdatedDate = BuiltInFunction.CurrDateTime();
					// GetAddressTypesByLabel.List.Current.AddressType.LastUpdatedBy = GetUserId
					localVars.queryResGetAddressTypesByLabel_outParamList.CurrentRec.ssENAddressType.ssLastUpdatedBy = BuiltInFunction.GetUserId();
					// CreateAddressType
					ExtendedActions.CreateAddressType(heContext, (((RCAddressTypeRecord) localVars.queryResGetAddressTypesByLabel_outParamList.CurrentRec.ssENAddressType)), out localVars.resCreateAddressType_outParamId);

					// AddressTypeId = CreateAddressType.Id
					result.outParamAddressTypeId = localVars.resCreateAddressType_outParamId;
				}

			} // try

			finally {
				outParamAddressTypeId = result.outParamAddressTypeId;
			}
		}

		public static class FuncActionAddressType_GetOrCreateByLabel {

			/// <summary>
			/// Query Function "GetAddressTypesByLabel" of Action "AddressType_GetOrCreateByLabel"
			/// </summary>
			public static RLAddressTypeRecordList datasetGetAddressTypesByLabel(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out long outParamCount, string qpstLabel) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENAddressType.[ID] o0, ENAddressType.[LABEL] o1, ENAddressType.[ORDER] o2, ENAddressType.[ACTIVE] o3, ENAddressType.[CREATEDDATE] o4, ENAddressType.[CREATEDBY] o5, ENAddressType.[LASTUPDATEDDATE] o6, ENAddressType.[LASTUPDATEDBY] o7");
				fromBuilder.Append(" FROM {AddressType} ENAddressType");
				whereBuilder.Append(" WHERE (ENAddressType.[LABEL] = @qpstLabel)");
				orderByBuilder.Append(" ORDER BY ENAddressType.[LABEL] ASC ");
				sqlCmd.CreateParameterWithoutReplacements("@qpstLabel", DbType.String, qpstLabel);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLAddressTypeRecordList outParamList = new RLAddressTypeRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, false, false, false, false, false, false, false});
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLAddressTypeRecordList _tmp = new RLAddressTypeRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DateTime startTime = DateTime.Now;
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query AddressType.AddressType_GetOrCreateByLabel.GetAddressTypesByLabel.List");
						int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
						);
						RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
						if (reqTracer != null) {
							reqTracer.RegisterQueryExecuted("3e6b777c-0aa0-4150-ae50-435ca228f661", "AddressType.AddressType_GetOrCreateByLabel.GetAddressTypesByLabel", "070ed75c-5567-4cfd-abec-7c525b0af273", "Address_CS", queryExecutionTime, DateTime.Now);
						}
						outParamList = (RLAddressTypeRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DateTime startTime = DateTime.Now;
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query AddressType.AddressType_GetOrCreateByLabel.GetAddressTypesByLabel.List");
						int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
						);
						RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
						if (reqTracer != null) {
							reqTracer.RegisterQueryExecuted("3e6b777c-0aa0-4150-ae50-435ca228f661", "AddressType.AddressType_GetOrCreateByLabel.GetAddressTypesByLabel", "070ed75c-5567-4cfd-abec-7c525b0af273", "Address_CS", queryExecutionTime, DateTime.Now);
						}
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLAddressTypeRecordList _tmp = new RLAddressTypeRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DateTime startTime = DateTime.Now;
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query AddressType.AddressType_GetOrCreateByLabel.GetAddressTypesByLabel.List");
							int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
							);
							RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
							if (reqTracer != null) {
								reqTracer.RegisterQueryExecuted("3e6b777c-0aa0-4150-ae50-435ca228f661", "AddressType.AddressType_GetOrCreateByLabel.GetAddressTypesByLabel", "070ed75c-5567-4cfd-abec-7c525b0af273", "Address_CS", queryExecutionTime, DateTime.Now);
							}
							outParamList = (RLAddressTypeRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DateTime startTime = DateTime.Now;
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query AddressType.AddressType_GetOrCreateByLabel.GetAddressTypesByLabel.List");
							int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
							);
							RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
							if (reqTracer != null) {
								reqTracer.RegisterQueryExecuted("3e6b777c-0aa0-4150-ae50-435ca228f661", "AddressType.AddressType_GetOrCreateByLabel.GetAddressTypesByLabel", "070ed75c-5567-4cfd-abec-7c525b0af273", "Address_CS", queryExecutionTime, DateTime.Now);
							}
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}



		}


	}


}