/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.IO;
using System.Configuration;
using System.Web;
using System.Web.UI.WebControls;
using System.Text.RegularExpressions;
using OutSystems.RuntimeCommon;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Sql;
using OutSystems.HubEdition.SMS;
using OutSystems.HubEdition.WebWidgets;

namespace ssAddress_CS {

	public delegate void SimpleTimerCallback();

	public sealed class AppUtils: BaseAppUtils {


		public const int CurrentEspaceId = Global.eSpaceId;


		public static readonly AppUtils Instance = new AppUtils();

		protected override int GetTenantId(HeContext heContext) {
			return heContext.AppInfo.Tenant.Id;
		}

		public override string getImagePath(bool forInternalAccess, bool includeSessionIdIfNeeded, string nameOverride) {
			HttpRequest request = HttpContext.Current.Request;
			try {
				HeContext heContext = Global.App.OsContext;
				string path = heContext.OsISAPIFilter.GetHostSuffix(request, "");
				bool keepPTA = AppInfo.GetAppInfo().eSpaceId == Global.eSpaceId && nameOverride == null;
				if (!keepPTA || forInternalAccess) {
					path += RuntimePlatformUtils.GetEspacePrettyNamePath(nameOverride ?? "Address_CS", heContext);
				} else {
					path += (heContext.OsISAPIFilter.IsActiveInRequest(request) ? heContext.OsISAPIFilter.GetPath(request, "") + "/": "/Address_CS/");
				}
				if (keepPTA) {
					path += AppInfo.GetAppInfo().PtaPath;
				}
				return RuntimePlatformUtils.CheckUriSecurity(request, path);
			} catch {
				return "";
			}

		}



		public static void DoOnMobileOriginatedMessage(HeContext heContext, ref MobileOriginatedMessage Msg) {
			#if false
			RCSMSMORecord smsMoIn = new RCSMSMORecord();
			RCSMSMORecord smsMoOut;
			smsMoIn.ssSTSMSMO.ssMSISDN = Msg.MSISDN;
			smsMoIn.ssSTSMSMO.ssLargeAccount = Msg.LargeAccount;
			smsMoIn.ssSTSMSMO.ssMessage = Msg.Message;
			smsMoIn.ssSTSMSMO.ssBinaryMessage = Msg.BinaryMessage;
			smsMoIn.ssSTSMSMO.ssUDH = Msg.UDH;
			smsMoIn.ssSTSMSMO.ssMessageId = Msg.MessageId;
			smsMoIn.ssSTSMSMO.ssPriority = Msg.Priority;
			smsMoIn.ssSTSMSMO.ssEncoding = Msg.Encoding.ToString();
			smsMoIn.ssSTSMSMO.ssConnection = Msg.Connection;
			smsMoIn.ssSTSMSMO.ssOperatorCode = Msg.OperatorCode;
			smsMoIn.ssSTSMSMO.ssSent = Msg.Sent;
			smsMoIn.ssSTSMSMO.ssCustom1 = Msg.Custom1;
			smsMoIn.ssSTSMSMO.ssCustom2 = Msg.Custom2;
			smsMoIn.ssSTSMSMO.ssCustom3 = Msg.Custom3;
			Actions.ActionOnMobileOriginatedMessage(heContext, smsMoIn, out smsMoOut);
			Msg.MSISDN = smsMoOut.ssSTSMSMO.ssMSISDN;
			Msg.LargeAccount = smsMoOut.ssSTSMSMO.ssLargeAccount;
			Msg.Message = smsMoOut.ssSTSMSMO.ssMessage;
			Msg.BinaryMessage = smsMoOut.ssSTSMSMO.ssBinaryMessage;
			Msg.UDH = smsMoOut.ssSTSMSMO.ssUDH;
			Msg.MessageId = smsMoOut.ssSTSMSMO.ssMessageId;
			Msg.Priority = smsMoOut.ssSTSMSMO.ssPriority;
			try {
				Msg.Encoding = (SmsEncoding) Enum.Parse(typeof(SmsEncoding), smsMoOut.ssSTSMSMO.ssEncoding); 
			} catch {};
			Msg.Connection = smsMoOut.ssSTSMSMO.ssConnection;
			Msg.OperatorCode = smsMoOut.ssSTSMSMO.ssOperatorCode;
			Msg.Sent = smsMoOut.ssSTSMSMO.ssSent;
			Msg.Custom1 = smsMoOut.ssSTSMSMO.ssCustom1;
			Msg.Custom2 = smsMoOut.ssSTSMSMO.ssCustom2;
			Msg.Custom3 = smsMoOut.ssSTSMSMO.ssCustom3;
			#endif
		}

		public static void DoOnMobileTerminatedMessage(HeContext heContext, ref MobileTerminatedMessage Msg) {
			#if false
			RCSMSMTRecord smsMtIn = new RCSMSMTRecord();
			RCSMSMTRecord smsMtOut;
			smsMtIn.ssSTSMSMT.ssMSISDN = Msg.MSISDN;
			smsMtIn.ssSTSMSMT.ssLargeAccount = Msg.LargeAccount;
			smsMtIn.ssSTSMSMT.ssMessage = Msg.Message;
			smsMtIn.ssSTSMSMT.ssBinaryMessage = Msg.BinaryMessage;
			smsMtIn.ssSTSMSMT.ssUDH = Msg.UDH;
			smsMtIn.ssSTSMSMT.ssMessageId = Msg.MessageId;
			smsMtIn.ssSTSMSMT.ssOriginalMessageId = Msg.OriginalMessageId;
			smsMtIn.ssSTSMSMT.ssPriority = Msg.Priority;
			smsMtIn.ssSTSMSMT.ssEncoding = Msg.Encoding.ToString();
			smsMtIn.ssSTSMSMT.ssPid = Msg.Pid;
			smsMtIn.ssSTSMSMT.ssMClass = Msg.MClass.ToString();
			smsMtIn.ssSTSMSMT.ssConnection = Msg.Connection;
			smsMtIn.ssSTSMSMT.ssOperatorCode = Msg.OperatorCode;
			smsMtIn.ssSTSMSMT.ssBillingDescription = Msg.BillingDescription;
			smsMtIn.ssSTSMSMT.ssBillingCode = Msg.BillingCode;
			smsMtIn.ssSTSMSMT.ssCustom1 = Msg.Custom1;
			smsMtIn.ssSTSMSMT.ssCustom2 = Msg.Custom2;
			smsMtIn.ssSTSMSMT.ssCustom3 = Msg.Custom3;
			smsMtIn.ssSTSMSMT.ssDeliveryReport = Msg.DeliveryReport.ToString();
			smsMtIn.ssSTSMSMT.ssCustomId = Msg.CustomId;
			smsMtIn.ssSTSMSMT.ssMaximumParts = Msg.MaximumParts;
			Actions.ActionOnMobileTerminatedMessage(heContext, smsMtIn, out smsMtOut);
			Msg.MSISDN = smsMtOut.ssSTSMSMT.ssMSISDN;
			Msg.LargeAccount = smsMtOut.ssSTSMSMT.ssLargeAccount;
			Msg.Message = smsMtOut.ssSTSMSMT.ssMessage;
			Msg.BinaryMessage = smsMtOut.ssSTSMSMT.ssBinaryMessage;
			Msg.UDH = smsMtOut.ssSTSMSMT.ssUDH;
			Msg.MessageId = smsMtOut.ssSTSMSMT.ssMessageId;
			Msg.OriginalMessageId = smsMtOut.ssSTSMSMT.ssOriginalMessageId;
			Msg.Priority = smsMtOut.ssSTSMSMT.ssPriority;
			try {
				Msg.Encoding = (SmsEncoding) Enum.Parse(typeof(SmsEncoding), smsMtOut.ssSTSMSMT.ssEncoding); 
			} catch {};
			Msg.Pid = smsMtOut.ssSTSMSMT.ssPid;
			try {
				Msg.MClass = (SmsMessageClass) Enum.Parse(typeof(SmsMessageClass), smsMtOut.ssSTSMSMT.ssMClass); 
			} catch {};
			Msg.Connection = smsMtOut.ssSTSMSMT.ssConnection;
			Msg.OperatorCode = smsMtOut.ssSTSMSMT.ssOperatorCode;
			Msg.BillingDescription = smsMtOut.ssSTSMSMT.ssBillingDescription;
			Msg.BillingCode = smsMtOut.ssSTSMSMT.ssBillingCode;
			Msg.Custom1 = smsMtOut.ssSTSMSMT.ssCustom1;
			Msg.Custom2 = smsMtOut.ssSTSMSMT.ssCustom2;
			Msg.Custom3 = smsMtOut.ssSTSMSMT.ssCustom3;
			try {
				Msg.DeliveryReport = (DeliveryReportType) Enum.Parse(typeof(DeliveryReportType), smsMtOut.ssSTSMSMT.ssDeliveryReport); 
			} catch {};
			Msg.CustomId = smsMtOut.ssSTSMSMT.ssCustomId;
			Msg.MaximumParts = smsMtOut.ssSTSMSMT.ssMaximumParts;
			#endif
		}


		protected override string EntityToTablename(string entity, int tenantId) {
			string entityLC = entity.ToLowerInvariant();
			switch (entityLC) {
				case "addresstype":
					return ENAddressTypeEntity.LocalViewName(AppInfo.GetAppInfo().Tenant.Id, BuiltInFunction.GetCurrentLocale());
				case "address":
					return ENAddressEntity.LocalViewName(AppInfo.GetAppInfo().Tenant.Id, BuiltInFunction.GetCurrentLocale());
				case "user":
					return ENUserEntity.LocalViewName(AppInfo.GetAppInfo().Tenant.Id, BuiltInFunction.GetCurrentLocale());
				case "country":
					return ENCountryEntity.LocalViewName(AppInfo.GetAppInfo().Tenant.Id, BuiltInFunction.GetCurrentLocale());
				}

				throw new DataBaseException("'" + entity + "' found in 'Expand Inline' parameter is an unknown Entity");
			}

			protected override string EntityAttributeToColumnName(string entityName, string attributeName) {
				string entityNameLC = entityName.ToLowerInvariant();
				string columnName = null;
				switch (entityNameLC) {
					case "addresstype":
						ENAddressTypeEntity.AttributesToDatabaseNamesMap().TryGetValue(attributeName, out columnName); break;
					case "address":
						ENAddressEntity.AttributesToDatabaseNamesMap().TryGetValue(attributeName, out columnName); break;
					case "user":
						ENUserEntity.AttributesToDatabaseNamesMap().TryGetValue(attributeName, out columnName); break;
					case "country":
						ENCountryEntity.AttributesToDatabaseNamesMap().TryGetValue(attributeName, out columnName); break;
				}

				if (string.IsNullOrEmpty(columnName)) {
					throw new DataBaseException("'" + attributeName + "' attribute of entity '" + entityName + "' found in 'Expand Inline' parameter is unknown");
				}

				return columnName;
			}

			protected override bool CheckReadOnlyInvalidOperations(string entity) {
				string entityLC = entity.ToLowerInvariant();
				if (entityLC == "runtimekind")
				return true;
				if (entityLC == "country")
				return true;

				return false;
			}

			public override string[] GetAjaxJQueryFileNames() {
				string prefix = "";
				string osPageHeader = OsISAPIFilter.Instance.GetPage();
				if (osPageHeader != null && osPageHeader.IndexOf('/', 1) != -1) {
					prefix = AppUtils.Instance.getImagePath();
				}
				return new string[] {
					prefix + "_osjs.js"
				};

			}

			public override string GetGlobalJavaScriptInclude() {
				return "";
			}

			public override string CacheInvalidationPlatformSuffix {
				get {
					return "?10_0_603_0"; 
				}
			}

			public override string CacheInvalidationSuffix {
				get {
					return ConfigurationManager.AppSettings["OutSystems.HubEdition.CacheInvalidationSuffix.070ed75c-5567-4cfd-abec-7c525b0af273"]; 
				}
			}


		}
	}
