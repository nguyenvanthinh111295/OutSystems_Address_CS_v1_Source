/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Linq;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;

using System.Text;
using System.Data;
using System.Collections.Generic;
using Newtonsoft.Json;
using OutSystems.RESTService;
using OutSystems.RESTService.Behaviors;
using OutSystems.RESTService.Controllers;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;


namespace ssAddress_CS.RestRecords {

	public class JSONENCountryEntityRecord: AbstractRESTStructure<ENCountryEntityRecord> {
		[JsonProperty("Id")]
		public long? AttrId;

		[JsonProperty("ISO")]
		public string AttrISO;

		[JsonProperty("Name")]
		public string AttrName;

		[JsonProperty("Active")]
		public bool? AttrActive;

		[JsonProperty("CreatedDate")]
		public String AttrCreatedDate;

		[JsonProperty("CreatedBy")]
		public int? AttrCreatedBy;

		[JsonProperty("LastUpdatedDate")]
		public String AttrLastUpdatedDate;

		[JsonProperty("LastUpdatedBy")]
		public int? AttrLastUpdatedBy;

		public JSONENCountryEntityRecord() {}

		public JSONENCountryEntityRecord(ENCountryEntityRecord s, IBehaviorsConfiguration config) {
			if (config.DefaultValuesBehavior == DefaultValuesBehavior.DontSend) {
				AttrId = (long?) s.ssId;
				AttrISO = ConvertToRestWithoutDefaults(s.ssISO, "");
				AttrName = ConvertToRestWithoutDefaults(s.ssName, "");
				AttrActive = ConvertToRestWithoutDefaults(s.ssActive, true);
				AttrCreatedDate = OutSystems.RESTService.Conversions.DateTimeToRestType(s.ssCreatedDate, config.DateTimeFormat);
				AttrCreatedBy = ConvertToRestWithoutDefaults(s.ssCreatedBy, 0);
				AttrLastUpdatedDate = OutSystems.RESTService.Conversions.DateTimeToRestType(s.ssLastUpdatedDate, config.DateTimeFormat);
				AttrLastUpdatedBy = ConvertToRestWithoutDefaults(s.ssLastUpdatedBy, 0);
			} else {
				AttrId = (long?) s.ssId;
				AttrISO = s.ssISO;
				AttrName = s.ssName;
				AttrActive = (bool?) s.ssActive;
				AttrCreatedDate = OutSystems.RESTService.Conversions.DateTimeToRestType(s.ssCreatedDate, config.DateTimeFormat);
				AttrCreatedBy = (int?) s.ssCreatedBy;
				AttrLastUpdatedDate = OutSystems.RESTService.Conversions.DateTimeToRestType(s.ssLastUpdatedDate, config.DateTimeFormat);
				AttrLastUpdatedBy = (int?) s.ssLastUpdatedBy;
			}
		}

		public static Func<ssAddress_CS.RestRecords.JSONENCountryEntityRecord, ENCountryEntityRecord> ToStructureDelegate(IBehaviorsConfiguration config) {
			return (ssAddress_CS.RestRecords.JSONENCountryEntityRecord s) => ToStructure(s, config);
		}
		public static ENCountryEntityRecord ToStructure(ssAddress_CS.RestRecords.JSONENCountryEntityRecord obj, IBehaviorsConfiguration config) {
			ENCountryEntityRecord s = new ENCountryEntityRecord(null);
			if (obj != null) {
				s.ssId = obj.AttrId == null ? 0L: obj.AttrId.Value;
				s.ssISO = obj.AttrISO == null ? "": obj.AttrISO;
				s.ssName = obj.AttrName == null ? "": obj.AttrName;
				s.ssActive = obj.AttrActive == null ? true: obj.AttrActive.Value;
				s.ssCreatedDate = obj.AttrCreatedDate == null ? new DateTime(1900, 1, 1, 0, 0, 0): OutSystems.RESTService.Conversions.TextToDateTime(obj.AttrCreatedDate, config.DateTimeFormat);
				s.ssCreatedBy = obj.AttrCreatedBy == null ? 0: obj.AttrCreatedBy.Value;
				s.ssLastUpdatedDate = obj.AttrLastUpdatedDate == null ? new DateTime(1900, 1, 1, 0, 0, 0): OutSystems.RESTService.Conversions.TextToDateTime(obj.AttrLastUpdatedDate, config.DateTimeFormat);
				s.ssLastUpdatedBy = obj.AttrLastUpdatedBy == null ? 0: obj.AttrLastUpdatedBy.Value;
			}
			return s;
		}

		public static Func<ENCountryEntityRecord, ssAddress_CS.RestRecords.JSONENCountryEntityRecord> FromStructureDelegate(IBehaviorsConfiguration config) {
			return (ENCountryEntityRecord s) => FromStructure(s, config);
		}
		public static ssAddress_CS.RestRecords.JSONENCountryEntityRecord FromStructure(ENCountryEntityRecord s, IBehaviorsConfiguration config) {
			return new ssAddress_CS.RestRecords.JSONENCountryEntityRecord(s, config);
		}

	}



}