/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Http.Controllers;
using System.Web.Http.Filters;

namespace OutSystems.RESTService {
    internal class LoggingHelper {

        private const string RESTContextVariableName = "__RESTExposeContext";

        public static void SetupLoggingContext(HttpActionContext actionContext, string serviceName, string ssKey) {
            bool restExposeAction = actionContext.ActionDescriptor.GetCustomAttributes<RESTExposeActionPropertiesAttribute>().Any();
            bool restScreenServicesAction = actionContext.ActionDescriptor.GetCustomAttributes<RESTScreenServicesActionPropertiesAttribute>().Any();

            if (!restExposeAction && !restScreenServicesAction) {
                return;
            }

            RESTExposeContext restExposeContext = new RESTExposeContext();
            restExposeContext.StartTime = DateTime.Now;
            restExposeContext.ServiceName = serviceName;

            if (restExposeAction) { // For REST expose actions
                var configuration = RESTServiceConfiguration.GetCustomClientConfiguration(ssKey, AppInfo.GetAppInfo().eSpaceId);
                restExposeContext.TraceAll = configuration.TraceAll;
                restExposeContext.TraceErrors = configuration.TraceErrors;
                RESTExposeActionPropertiesAttribute propertiesAttribute = actionContext.ActionDescriptor.GetCustomAttributes<RESTExposeActionPropertiesAttribute>().Single();
                restExposeContext.ActionName = propertiesAttribute.Name;
                restExposeContext.IsRequestBinary = propertiesAttribute.IsRequestBinary;
                restExposeContext.IsResponseBinary = propertiesAttribute.IsResponseBinary;
            } else { // For Screen Services actions
                var configuration = RESTServiceConfiguration.GetMobileLoggingLevelConfiguration(AppInfo.GetAppInfo().eSpaceId);
                restExposeContext.TraceAll = configuration.TraceAll;
                restExposeContext.TraceErrors = configuration.TraceErrors;
                RESTScreenServicesActionPropertiesAttribute propertiesAttribute = actionContext.ActionDescriptor.GetCustomAttributes<RESTScreenServicesActionPropertiesAttribute>().Single();
                restExposeContext.ActionName = propertiesAttribute.Name;
                restExposeContext.ScreenName = propertiesAttribute.Screen;
                restExposeContext.IsScreenService = true;
            }

            HttpContext.Current.Items[RESTContextVariableName] = restExposeContext;
        }
        public static RESTExposeContext GetLoggingContext() {
            return (RESTExposeContext)HttpContext.Current.Items[RESTContextVariableName];
        }

        public static void LogRequest(HttpActionContext actionContext) {
            RESTExposeContext restExposeContext = GetLoggingContext();

            if (restExposeContext != null && (restExposeContext.TraceAll || restExposeContext.TraceErrors)) {
                HttpContext context = HttpContext.Current;
                StringBuilder requestTrace = new StringBuilder();
                requestTrace.AppendLine(context.Request.HttpMethod + " " + context.Request.Url.ToString() + " " + context.Request.ServerVariables["SERVER_PROTOCOL"]);
                foreach (string headerName in context.Request.Headers.Keys) {
                    foreach (string headerValue in context.Request.Headers.GetValues(headerName)) {
                        requestTrace.AppendLine(headerName + ": " + headerValue);
                    }
                }                

                if (actionContext.Request.Content != null) {
                    byte[] content = actionContext.Request.Content.ReadAsByteArrayAsync().Result;
                    if (!restExposeContext.IsRequestBinary) {
                        try {
                            string charset = RestServiceHttpUtils.TryGetRequestEncoding(actionContext.Request, "utf-8");
                            Encoding requestEncoding = Encoding.GetEncoding(charset);
                            requestTrace.AppendLine(requestEncoding.GetString(content));
                        } catch {
                            requestTrace.AppendLine("<BINARY DATA>");
                        }
                    } else {
                        requestTrace.AppendLine("<BINARY DATA>");
                    }
                }

                restExposeContext.RequestTrace = requestTrace.ToString();
            }

        }

        public static void LogResponse(HttpActionExecutedContext actionExecutedContext, string errorId = null) {

            if (actionExecutedContext == null || actionExecutedContext.Response == null) {
                return;
            }   

            AppInfo appInfo = AppInfo.GetAppInfo();
            HttpContext context = appInfo.Context;
            RESTExposeContext restExposeContext = GetLoggingContext();

            if (restExposeContext != null && 
                !restExposeContext.AlreadyLogged &&
                ((!string.IsNullOrEmpty(restExposeContext.ErrorLogId) || (!appInfo.SelectiveLoggingEnabled || appInfo.Properties.AllowLogging)) && restExposeContext.LogRequest)) {                

                TimeSpan duration = DateTime.Now.Subtract(restExposeContext.StartTime);
                int eSpaceId = appInfo.eSpaceId;
                int tenantId = (appInfo.Tenant != null ? appInfo.Tenant.Id : 0);
                string errorIdToLog = errorId ?? restExposeContext.ErrorLogId;
                string source = RuntimePlatformUtils.GetClientIpForLogging();
                string id = null;
                
                if (restExposeContext.IsScreenService) {
                    HeContext heContext = appInfo.OsContext;
                    string loginId = heContext.Session.NewRuntimeLoginInfo.LoginId;
                    int userId = heContext.Session.NewRuntimeLoginInfo.UserId;

                    id = MobileRequestLog.StaticWrite(DateTime.Now, eSpaceId, tenantId, restExposeContext.ScreenName, restExposeContext.ActionName, source, (int)duration.TotalMilliseconds, Environment.MachineName, errorIdToLog, loginId, userId);
                } else {
                    id = IntegrationLog.StaticWrite(DateTime.Now, (int)duration.TotalMilliseconds, source, null, restExposeContext.ServiceName + "." + restExposeContext.ActionName, "REST (Expose)", eSpaceId, tenantId, errorIdToLog, Environment.MachineName, true);
                }

                bool withError = !string.IsNullOrEmpty(errorIdToLog);

                if (actionExecutedContext != null && restExposeContext.RequestTrace != null && (restExposeContext.TraceAll || (restExposeContext.TraceErrors && withError))) {
                    StringBuilder responseTrace = new StringBuilder();
                    responseTrace.AppendLine(context.Request.ServerVariables["SERVER_PROTOCOL"] + " " + ((int)actionExecutedContext.Response.StatusCode).ToString() + " " + actionExecutedContext.Response.ReasonPhrase);
                    if (HttpRuntime.UsingIntegratedPipeline) {
                        foreach (var headerName in context.Response.Headers.AllKeys) {
                            foreach (string headerValue in context.Response.Headers.GetValues(headerName)) {
                                responseTrace.AppendLine(headerName + ": " + headerValue);
                            }
                        }
                    }

                    if (actionExecutedContext.Response != null && actionExecutedContext.Response.Content != null) {
                        foreach (var header in actionExecutedContext.Response.Content.Headers) {
                            foreach (string headerValue in header.Value) {
                                responseTrace.AppendLine(header.Key + ": " + headerValue);
                            }
                        }

                        if (restExposeContext.IsResponseBinary) {
                            responseTrace.AppendLine("<BINARY DATA>");
                        } else {
                            try {
                                byte[] content = actionExecutedContext.Response.Content.ReadAsByteArrayAsync().Result;
                                string charset = RestServiceHttpUtils.TryGetResponseEncoding(actionExecutedContext.Response, "utf-8");
                                Encoding requestEncoding = Encoding.GetEncoding(charset);
                                responseTrace.AppendLine(requestEncoding.GetString(content));
                            } catch {
                                responseTrace.AppendLine("<BINARY DATA>");
                            }
                        }
                    }

                    int tenantIdToDetailLog = (appInfo.Tenant != null ? appInfo.Tenant.Id : 0);
                    string detail = restExposeContext.RequestTrace + "\n\n" + responseTrace.ToString();
                    string detailLabel = "HTTP Trace";
                    if (restExposeContext.IsScreenService) {
                        MRDetailLog.StaticWrite(id, DateTime.Now, tenantIdToDetailLog, "", detail, detailLabel);
                    } else {
                        IntDetailLog.StaticWrite(id, DateTime.Now, tenantIdToDetailLog, "", detail, detailLabel);
                    }
                }

                restExposeContext.AlreadyLogged = true;
            }
        }
    }
}
