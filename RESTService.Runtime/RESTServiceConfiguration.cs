/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Data;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.Internal.Db;

namespace OutSystems.RESTService {
    public class RESTServiceConfiguration {
        public bool TraceErrors { get; set; }
        public bool TraceAll { get; set; }
        public bool Trace {
            get {
                return TraceErrors || TraceAll;
            }
        }

        public RESTServiceConfiguration() : this(false, false) { }
        public RESTServiceConfiguration(bool traceErrors, bool traceAll) {
            TraceErrors = traceErrors;
            TraceAll = traceAll;
        }

        public static RESTServiceConfiguration GetCustomClientConfiguration(string restwebrefSSKey, int eSpaceId) {
            Func<RESTServiceConfiguration> fetchFromDb = () => {
                using (var tran = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                    using (IDataReader reader = GetCustomClientConfigFields(tran, restwebrefSSKey, eSpaceId)) {
                        if (reader.Read()) {
                            var traceErrors = reader.SafeGet<bool>("TraceErrors", false);
                            var traceAll = reader.SafeGet<bool>("TraceAll", false);

                            return new RESTServiceConfiguration(traceErrors, traceAll);
                        }
                        return new RESTServiceConfiguration();
                    }
                }
            };

            return ConfigurationCache.GetESpaceCachedValue(restwebrefSSKey, "RestConfigCache", eSpaceId, _ => fetchFromDb());
        }

        public static RESTServiceConfiguration GetMobileLoggingLevelConfiguration(int eSpaceId) {
            Func<RESTServiceConfiguration> fetchLoggingLevelFromDb = () => {
                using (var tran = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
                    using (IDataReader reader = GetLoggingLevelConfig(tran, eSpaceId)) {
                        if (reader.Read()) {
                            var traceErrors = reader.SafeGet<bool>("TraceErrors", false);
                            var traceAll = reader.SafeGet<bool>("TraceAll", false);

                            return new RESTServiceConfiguration(traceErrors, traceAll);
                        }
                        return new RESTServiceConfiguration();
                    }
                }
            };

            return ConfigurationCache.GetESpaceCachedValue("", "MobileLoggingLevelConfigCache", eSpaceId, _ => fetchLoggingLevelFromDb());
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
        private static IDataReader GetCustomClientConfigFields(Transaction tran, String webrefSSKey, int espaceId) {
            Command cmd = tran.CreateCommand("SELECT TraceErrors, TraceAll FROM ossys_Rest_Expose WHERE Espace_Id = @espaceId AND SS_Key = @webrefSSKey");
            cmd.CreateParameter("@espaceId", DbType.Int32, espaceId);
            cmd.CreateParameter("@webrefSSKey", DbType.String, webrefSSKey);
            return cmd.ExecuteReader();
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
        private static IDataReader GetLoggingLevelConfig(Transaction tran, int espaceId) {
            Command cmd = tran.CreateCommand("SELECT TraceErrors, TraceAll FROM ossys_espace_mobile_configs WHERE Espace_Id = @espaceId");
            cmd.CreateParameter("@espaceId", DbType.Int32, espaceId);
            return cmd.ExecuteReader();
        }

        private static class ConfigurationCache {
            private static Dictionary<string, RESTServiceConfiguration> configCache = new Dictionary<string, RESTServiceConfiguration>();

            private static bool reentrantCall = false;

            private static void InsertESpaceCache(string cacheName, int eSpaceId) {
                System.Web.HttpRuntime.Cache.Insert(
                    cacheName,
                    eSpaceId,
                    AppInfo.CalculateCacheDependency(eSpaceId, 0),
                    DateTime.UtcNow.AddDays(1),
                    TimeSpan.Zero,
                    System.Web.Caching.CacheItemPriority.NotRemovable,
                    new System.Web.Caching.CacheItemRemovedCallback(CacheRemovedCallback));
            }

            private static void CacheRemovedCallback(string key, object value, System.Web.Caching.CacheItemRemovedReason reason) {
                lock (configCache) {
                    configCache.Remove(key);
                }
            }

            public static RESTServiceConfiguration GetESpaceCachedValue(string key, String cacheName, int eSpaceId, Func<string, RESTServiceConfiguration> Getter) {
                String cacheKey = cacheName + eSpaceId + key;
                return InnerGetCachedValue(cacheKey, cacheName, Getter, InsertESpaceCache, eSpaceId);
            }

            private static RESTServiceConfiguration InnerGetCachedValue(string key, String cacheName, Func<string, RESTServiceConfiguration> Getter, Action<string, int> CacheInsertMethod, int cacheExtraId) {
                RESTServiceConfiguration result;
                lock (configCache) {
                    if (reentrantCall) {
                        throw new InvalidOperationException("Reentrant call in AppCache for key: " + key);
                    }

                    if (!configCache.TryGetValue(key, out result)) {
                        try {
                            reentrantCall = true;
                            configCache.Add(key, result = Getter(key));
                        } catch (ArgumentException e) {
                            throw new ArgumentException("DuplicateKey was: " + key + ", map contents was: " + configCache.ToString() + ", TryGetValue was: " + configCache.TryGetValue(key, out result), e);
                        } finally {
                            reentrantCall = false;
                        }
                        CacheInsertMethod(key, cacheExtraId);
                    }
                }
                return result;
            }
        }
    }
}
