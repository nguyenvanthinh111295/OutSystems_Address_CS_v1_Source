/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Diagnostics;

namespace OutSystems.RuntimeCommon.Log {
    /// <summary>
    /// Summary description for EventLogger.
    /// </summary>
    public class EventLogger {

        public const string DefaultSource = "OutSystems Platform";

#if !JAVA        
        private static EventLogger eventLogger = new EventLogger();
        private static EventLog log;
        private static string logDisclamer = null;
#endif

        public EventLogger() {
            SetUp(DefaultSource);
        }

        public static void SetUp(string source) {
            CreateSource(source);
            log = new EventLog("Application", ".", source);
        }

        public static void SetUp(string source, string disclamer) {
            CreateSource(source);
            log = new EventLog("Application", ".", source);
            logDisclamer = disclamer;
        }

        public static void CreateSource(string source) {
            if (!EventLog.SourceExists(source)) {
                EventLog.CreateEventSource(source, "Application");
            }
        }

        public static void Write(string message, EventLogEntryType type) {
            try {
                if (null != logDisclamer) {
                    message += Environment.NewLine + Environment.NewLine + logDisclamer;
                }
                log.WriteEntry(message, type);
            } catch { }
        }

        public static void WriteInfo(string message) {
            Write(message, EventLogEntryType.Information);
        }

        public static void WriteError(string message) {
            Write(message, EventLogEntryType.Error);
        }

        public static void WriteError(Exception ex) {
            Write(ex.Message + Environment.NewLine + ex.StackTrace, EventLogEntryType.Error);
        }

        public static void WriteWarning(string message) {
            Write(message, EventLogEntryType.Warning);
        }

        public static void WriteDebug(string message) {
            Write(message, EventLogEntryType.SuccessAudit);
        }
    }
}
