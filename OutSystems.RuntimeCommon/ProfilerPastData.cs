/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;

namespace OutSystems.RuntimeCommon {
    [Serializable()]
    public class ProfilerPastData {
        public List<ProfilerData> pastDaysData;
        public ProfilerData currentDayData;

        public ProfilerPastData() {
            pastDaysData = new List<ProfilerData>(90);
            currentDayData = new ProfilerData();
        }

        public static ProfilerPastData Deserialize(byte[] binary) {
            using (MemoryStream ms = new MemoryStream(binary)) {
                BinaryFormatter myBF = new BinaryFormatter();
                var result = (ProfilerPastData)myBF.Deserialize(ms);
                return result;
            }
        }

        public byte[] Serialize() {
            using (MemoryStream ms = new MemoryStream()) {
                BinaryFormatter myBF = new BinaryFormatter();
                myBF.Serialize(ms, this);
                return ms.ToArray();
            }
        }

        public void Clear() {
            pastDaysData = new List<ProfilerData>(90);
            currentDayData = new ProfilerData();
        }

        public bool IsEmpty() {
            return pastDaysData.IsEmpty() && currentDayData.espacesProfilerData.IsEmpty();
        }
    }

    [Serializable()]
    public class ProfilerData {
        public DateTime date;
        public Dictionary<string, EspaceProfilerData> espacesProfilerData; // dict<espaceKey,EspaceProfilerData>   

        public ProfilerData() {
            espacesProfilerData = new Dictionary<string, EspaceProfilerData>(10);
        }
    }

    [Serializable()]
    public class EspaceProfilerData {
        public volatile Dictionary<string, ElementProfilerData> elementsProfilerData; // dict<elementKey,ElementProfilerData>
        public Dictionary<string, EntityProfilerData> entitiesProfilerData; // dict<entityKey,EntityProfilerData>

        public EspaceProfilerData() {
            elementsProfilerData = new Dictionary<string, ElementProfilerData>(100);
            entitiesProfilerData = new Dictionary<string, EntityProfilerData>(20);
        }

        public bool HasData {
            get {
                return !elementsProfilerData.IsEmpty() || !entitiesProfilerData.IsEmpty();
            }
        }

        public void Clear() {
            elementsProfilerData = new Dictionary<string, ElementProfilerData>(100);
            entitiesProfilerData = new Dictionary<string, EntityProfilerData>(20);
        }

        public void IncreaseData(string elementKey, ElementProfilerData elementProfilerData) {
            ElementProfilerData elementData;
            if (!elementsProfilerData.TryGetValue(elementKey, out elementData)) {
                lock (elementProfilerData) {
                    if (!elementsProfilerData.TryGetValue(elementKey, out elementData)) {
                        elementData = new ElementProfilerData();
                        elementsProfilerData.Add(elementKey, elementData);
                    }
                }
            }

            elementData.IncreaseData(elementProfilerData.ExecutionCount, elementProfilerData.ElapsedMilliseconds, elementProfilerData.ErrorCount, elementProfilerData.IterationCount, elementData.CacheHitCount);
        }
    }

    [Serializable()]
    public class ElementProfilerData {
        private long elapsedMilliseconds;
        private int executionCount, errorCount, cacheHitCount, iterationCount;
        public List<string> usedEntitiesKeys;
        public bool isUpdate;

        public long ElapsedMilliseconds {
            get { return elapsedMilliseconds; }
        }
        
        public int ExecutionCount {
            get { return executionCount; }
        }
        
        public int ErrorCount {
            get { return errorCount; }
        }

        public int CacheHitCount {
            get { return cacheHitCount; }
        }

        public int IterationCount {
            get { return iterationCount; }
        }

        public ElementProfilerData() {
            this.executionCount = 0;
            this.usedEntitiesKeys = new List<string>();
        }

        public void IncreaseData(int executionCount, long elapsedMilliseconds, int errorCount, int iterationCount, int cacheHitCount) {
            this.executionCount += executionCount;
            this.elapsedMilliseconds += elapsedMilliseconds;
            this.errorCount += errorCount;
            this.iterationCount += iterationCount;
            this.cacheHitCount += cacheHitCount;
        }
    }

    [Serializable()]
    public class EntityProfilerData {
        public int ReadsCount { get; private set; }
        public int UpdatesCount { get; private set; }

        public EntityProfilerData() {
            
        }

        public EntityProfilerData(int readsCount, int updatesCount) {
            this.ReadsCount = readsCount;
            this.UpdatesCount = updatesCount;
        }

        public void IncreaseData(bool isUpdate, int value) {
            if (isUpdate) {
                UpdatesCount += value;   
            } else {
                ReadsCount += value;
            }
        }
    }
}
