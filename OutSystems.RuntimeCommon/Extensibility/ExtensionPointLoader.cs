/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using OutSystems.RuntimeCommon;
using OutSystems.Extensibility.Exceptions;

namespace OutSystems.Extensibility {

    internal static class ExtensionPointLoaderCache {
        private static readonly IDictionary<Type, IEnumerable> cache = new Dictionary<Type, IEnumerable>();

        public static IEnumerable Get(Type type) {
            lock (cache) {
                IEnumerable value;
                if (cache.TryGetValue(type, out value)) {
                    return value;
                } else {
                    return null;
                }
            }
        }

        public static void Put(Type type, IEnumerable spis) {
            lock (cache) {
                cache.Add(type, spis);
            }
        }
    }

    public static class ExtensionPointLoader<T> where T : OutSystemsExtensionPoint {
        private static IEnumerable<T> GetImplementations() {
            IEnumerable<T> cached;
            lock (typeof(T)) {
                cached = (IEnumerable<T>) ExtensionPointLoaderCache.Get(typeof(T));
                if (cached == null) {
                    ExtensionPointLoaderCache.Put(typeof(T), cached = GetProviders());
                    int extensionsCount = cached.Count();
                    if (extensionsCount == 0) {
                        OSTrace.Debug("ExtensionPointLoader: Loaded {0} {1} extensions.", extensionsCount, typeof(T).Name);
                    } else {
                        OSTrace.Debug("ExtensionPointLoader: Loaded {0} {1} extensions:\n\t{2}", extensionsCount, typeof(T).Name, cached.Select(t => t.GetType().FullName).StrCat("\n\t"));
                    }
                }
            }
            return cached;
        }

        public static void Execute(Action<T> invocation, Configurations settings) {
            using (new ExtensibilityContext(settings)) {
                Execute(invocation);
            }
        }

        public static void Execute(Action<T> invocation, Configurations settings, SymbolicLinksHandler symbolicLinksHandler) {
            using (new ExtensibilityContext(settings, symbolicLinksHandler)) {
                Execute(invocation);
            }
        }

        private static void Execute(Action<T> invocation) {
            try {
                GetImplementations().Apply(invocation);
            } catch (ExtensibilityException e) {
                throw e;
            } catch (Exception e) {
                OSTrace.Error("Executing Extension Point action", e);
                throw new ExtensibilityException(e);
            }
        }

        private static IEnumerable<T> GetProviders() {
            // TODO: Missing .NET extensibility implementation
            return Enumerable.Empty<T>();
        }

    }
}
