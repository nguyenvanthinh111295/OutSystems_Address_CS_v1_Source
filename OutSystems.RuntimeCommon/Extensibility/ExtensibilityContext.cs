/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using OutSystems.Extensibility.Exceptions;

namespace OutSystems.Extensibility {
    public sealed class ExtensibilityContext : IDisposable {

        private readonly ExtensibilityContext old;

        public ExtensibilityContext() : this(new DummyConfigurations()) {
        }

        public ExtensibilityContext(Configurations configurations) : this(configurations, new DummySymbolicLinksHandler()) {
        }

        public ExtensibilityContext(Configurations configurations, SymbolicLinksHandler symbolicLinksHandler) {
            this.old = current;

            this.Configurations = configurations;
            this.SymbolicLinksHandler = symbolicLinksHandler;

            current = this;
        }

        public Configurations Configurations { get; private set; }
        public SymbolicLinksHandler SymbolicLinksHandler { get; private set; }



        [ThreadStatic]
        private static ExtensibilityContext current;
        internal static ExtensibilityContext Current {
            get {
                if (current == null) {
                    throw new IllegalExtensibilityContextException();
                }
                return current;
            }
        }

        public void Dispose() {
            current = old;
        }



        private sealed class DummyConfigurations : Configurations {
            protected override string RealGet(ConfigurationParameter param) {
                throw new InvalidOperationException();
            }

            protected override void RealPut(ConfigurationParameter param, string value) {
                throw new InvalidOperationException();
            }
        }

        private sealed class DummySymbolicLinksHandler : SymbolicLinksHandler {
            public void CreateSymbolicLink(string existingFileName, string linkFileName) {
                throw new InvalidOperationException();
            }

            public bool IsSymbolicLink(string fileName) {
                throw new InvalidOperationException();
            }

            public string GetSymbolicLinkTarget(string fileName) {
                throw new InvalidOperationException();
            }

            public bool PathSupportsSymbolicLinks(string path) {
                throw new InvalidOperationException();
            }
        }
    }

}
